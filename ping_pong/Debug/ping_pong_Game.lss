
ping_pong_Game.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002ea0  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000038  00800060  00002ea0  00002f34  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000008  00800098  00800098  00002f6c  2**0
                  ALLOC
  3 .stab         000029c4  00000000  00000000  00002f6c  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000c98  00000000  00000000  00005930  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  000065c8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  00006708  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  00006878  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  000084c1  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  000093ac  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  0000a15c  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  0000a2bc  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  0000a549  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000ad17  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 c7 0f 	jmp	0x1f8e	; 0x1f8e <__vector_1>
       8:	0c 94 fa 0f 	jmp	0x1ff4	; 0x1ff4 <__vector_2>
       c:	0c 94 2d 10 	jmp	0x205a	; 0x205a <__vector_3>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e0 ea       	ldi	r30, 0xA0	; 160
      68:	fe e2       	ldi	r31, 0x2E	; 46
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a8 39       	cpi	r26, 0x98	; 152
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	10 e0       	ldi	r17, 0x00	; 0
      78:	a8 e9       	ldi	r26, 0x98	; 152
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a0 3a       	cpi	r26, 0xA0	; 160
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 9a 16 	call	0x2d34	; 0x2d34 <main>
      8a:	0c 94 4e 17 	jmp	0x2e9c	; 0x2e9c <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 17 17 	jmp	0x2e2e	; 0x2e2e <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	ae e8       	ldi	r26, 0x8E	; 142
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 33 17 	jmp	0x2e66	; 0x2e66 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 23 17 	jmp	0x2e46	; 0x2e46 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 3f 17 	jmp	0x2e7e	; 0x2e7e <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 23 17 	jmp	0x2e46	; 0x2e46 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 3f 17 	jmp	0x2e7e	; 0x2e7e <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 17 17 	jmp	0x2e2e	; 0x2e2e <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	8e e8       	ldi	r24, 0x8E	; 142
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 33 17 	jmp	0x2e66	; 0x2e66 <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 23 17 	jmp	0x2e46	; 0x2e46 <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 3f 17 	jmp	0x2e7e	; 0x2e7e <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 23 17 	jmp	0x2e46	; 0x2e46 <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 3f 17 	jmp	0x2e7e	; 0x2e7e <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 23 17 	jmp	0x2e46	; 0x2e46 <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 3f 17 	jmp	0x2e7e	; 0x2e7e <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 27 17 	jmp	0x2e4e	; 0x2e4e <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 43 17 	jmp	0x2e86	; 0x2e86 <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__stack+0x113>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__stack+0x10d>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__stack+0x117>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__stack+0xaf>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__stack+0x11>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__stack+0x65>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__stack+0x21>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__stack+0x19>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__stack+0x37>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__stack+0x2f>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__stack+0x59>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__stack+0x89>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__stack+0x91>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__stack+0x91>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__stack+0xa9>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__stack+0xfd>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__stack+0x10d>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__stack+0xdf>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__stack+0xef>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__stack+0xe7>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__stack+0xfd>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__stack+0xff>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__stack+0x117>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <Game_Init>:




void Game_Init()
{
     b46:	df 93       	push	r29
     b48:	cf 93       	push	r28
     b4a:	cd b7       	in	r28, 0x3d	; 61
     b4c:	de b7       	in	r29, 0x3e	; 62
     b4e:	2e 97       	sbiw	r28, 0x0e	; 14
     b50:	0f b6       	in	r0, 0x3f	; 63
     b52:	f8 94       	cli
     b54:	de bf       	out	0x3e, r29	; 62
     b56:	0f be       	out	0x3f, r0	; 63
     b58:	cd bf       	out	0x3d, r28	; 61
	LCD_MOVE_CURSOR(1,5);
     b5a:	81 e0       	ldi	r24, 0x01	; 1
     b5c:	65 e0       	ldi	r22, 0x05	; 5
     b5e:	0e 94 f0 15 	call	0x2be0	; 0x2be0 <LCD_MOVE_CURSOR>
	LCD_enuDisplayString("PING_PONG");
     b62:	80 e6       	ldi	r24, 0x60	; 96
     b64:	90 e0       	ldi	r25, 0x00	; 0
     b66:	0e 94 bf 15 	call	0x2b7e	; 0x2b7e <LCD_enuDisplayString>
	LCD_MOVE_CURSOR(2,7);
     b6a:	82 e0       	ldi	r24, 0x02	; 2
     b6c:	67 e0       	ldi	r22, 0x07	; 7
     b6e:	0e 94 f0 15 	call	0x2be0	; 0x2be0 <LCD_MOVE_CURSOR>
	LCD_enuDisplayString("GAME");
     b72:	8a e6       	ldi	r24, 0x6A	; 106
     b74:	90 e0       	ldi	r25, 0x00	; 0
     b76:	0e 94 bf 15 	call	0x2b7e	; 0x2b7e <LCD_enuDisplayString>
     b7a:	80 e0       	ldi	r24, 0x00	; 0
     b7c:	90 e0       	ldi	r25, 0x00	; 0
     b7e:	aa e7       	ldi	r26, 0x7A	; 122
     b80:	b4 e4       	ldi	r27, 0x44	; 68
     b82:	8b 87       	std	Y+11, r24	; 0x0b
     b84:	9c 87       	std	Y+12, r25	; 0x0c
     b86:	ad 87       	std	Y+13, r26	; 0x0d
     b88:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     b8a:	6b 85       	ldd	r22, Y+11	; 0x0b
     b8c:	7c 85       	ldd	r23, Y+12	; 0x0c
     b8e:	8d 85       	ldd	r24, Y+13	; 0x0d
     b90:	9e 85       	ldd	r25, Y+14	; 0x0e
     b92:	20 e0       	ldi	r18, 0x00	; 0
     b94:	30 e0       	ldi	r19, 0x00	; 0
     b96:	4a e7       	ldi	r20, 0x7A	; 122
     b98:	53 e4       	ldi	r21, 0x43	; 67
     b9a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     b9e:	dc 01       	movw	r26, r24
     ba0:	cb 01       	movw	r24, r22
     ba2:	8f 83       	std	Y+7, r24	; 0x07
     ba4:	98 87       	std	Y+8, r25	; 0x08
     ba6:	a9 87       	std	Y+9, r26	; 0x09
     ba8:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     baa:	6f 81       	ldd	r22, Y+7	; 0x07
     bac:	78 85       	ldd	r23, Y+8	; 0x08
     bae:	89 85       	ldd	r24, Y+9	; 0x09
     bb0:	9a 85       	ldd	r25, Y+10	; 0x0a
     bb2:	20 e0       	ldi	r18, 0x00	; 0
     bb4:	30 e0       	ldi	r19, 0x00	; 0
     bb6:	40 e8       	ldi	r20, 0x80	; 128
     bb8:	5f e3       	ldi	r21, 0x3F	; 63
     bba:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     bbe:	88 23       	and	r24, r24
     bc0:	2c f4       	brge	.+10     	; 0xbcc <Game_Init+0x86>
		__ticks = 1;
     bc2:	81 e0       	ldi	r24, 0x01	; 1
     bc4:	90 e0       	ldi	r25, 0x00	; 0
     bc6:	9e 83       	std	Y+6, r25	; 0x06
     bc8:	8d 83       	std	Y+5, r24	; 0x05
     bca:	3f c0       	rjmp	.+126    	; 0xc4a <Game_Init+0x104>
	else if (__tmp > 65535)
     bcc:	6f 81       	ldd	r22, Y+7	; 0x07
     bce:	78 85       	ldd	r23, Y+8	; 0x08
     bd0:	89 85       	ldd	r24, Y+9	; 0x09
     bd2:	9a 85       	ldd	r25, Y+10	; 0x0a
     bd4:	20 e0       	ldi	r18, 0x00	; 0
     bd6:	3f ef       	ldi	r19, 0xFF	; 255
     bd8:	4f e7       	ldi	r20, 0x7F	; 127
     bda:	57 e4       	ldi	r21, 0x47	; 71
     bdc:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     be0:	18 16       	cp	r1, r24
     be2:	4c f5       	brge	.+82     	; 0xc36 <Game_Init+0xf0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     be4:	6b 85       	ldd	r22, Y+11	; 0x0b
     be6:	7c 85       	ldd	r23, Y+12	; 0x0c
     be8:	8d 85       	ldd	r24, Y+13	; 0x0d
     bea:	9e 85       	ldd	r25, Y+14	; 0x0e
     bec:	20 e0       	ldi	r18, 0x00	; 0
     bee:	30 e0       	ldi	r19, 0x00	; 0
     bf0:	40 e2       	ldi	r20, 0x20	; 32
     bf2:	51 e4       	ldi	r21, 0x41	; 65
     bf4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     bf8:	dc 01       	movw	r26, r24
     bfa:	cb 01       	movw	r24, r22
     bfc:	bc 01       	movw	r22, r24
     bfe:	cd 01       	movw	r24, r26
     c00:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     c04:	dc 01       	movw	r26, r24
     c06:	cb 01       	movw	r24, r22
     c08:	9e 83       	std	Y+6, r25	; 0x06
     c0a:	8d 83       	std	Y+5, r24	; 0x05
     c0c:	0f c0       	rjmp	.+30     	; 0xc2c <Game_Init+0xe6>
     c0e:	89 e1       	ldi	r24, 0x19	; 25
     c10:	90 e0       	ldi	r25, 0x00	; 0
     c12:	9c 83       	std	Y+4, r25	; 0x04
     c14:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     c16:	8b 81       	ldd	r24, Y+3	; 0x03
     c18:	9c 81       	ldd	r25, Y+4	; 0x04
     c1a:	01 97       	sbiw	r24, 0x01	; 1
     c1c:	f1 f7       	brne	.-4      	; 0xc1a <Game_Init+0xd4>
     c1e:	9c 83       	std	Y+4, r25	; 0x04
     c20:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     c22:	8d 81       	ldd	r24, Y+5	; 0x05
     c24:	9e 81       	ldd	r25, Y+6	; 0x06
     c26:	01 97       	sbiw	r24, 0x01	; 1
     c28:	9e 83       	std	Y+6, r25	; 0x06
     c2a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     c2c:	8d 81       	ldd	r24, Y+5	; 0x05
     c2e:	9e 81       	ldd	r25, Y+6	; 0x06
     c30:	00 97       	sbiw	r24, 0x00	; 0
     c32:	69 f7       	brne	.-38     	; 0xc0e <Game_Init+0xc8>
     c34:	14 c0       	rjmp	.+40     	; 0xc5e <Game_Init+0x118>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     c36:	6f 81       	ldd	r22, Y+7	; 0x07
     c38:	78 85       	ldd	r23, Y+8	; 0x08
     c3a:	89 85       	ldd	r24, Y+9	; 0x09
     c3c:	9a 85       	ldd	r25, Y+10	; 0x0a
     c3e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     c42:	dc 01       	movw	r26, r24
     c44:	cb 01       	movw	r24, r22
     c46:	9e 83       	std	Y+6, r25	; 0x06
     c48:	8d 83       	std	Y+5, r24	; 0x05
     c4a:	8d 81       	ldd	r24, Y+5	; 0x05
     c4c:	9e 81       	ldd	r25, Y+6	; 0x06
     c4e:	9a 83       	std	Y+2, r25	; 0x02
     c50:	89 83       	std	Y+1, r24	; 0x01
     c52:	89 81       	ldd	r24, Y+1	; 0x01
     c54:	9a 81       	ldd	r25, Y+2	; 0x02
     c56:	01 97       	sbiw	r24, 0x01	; 1
     c58:	f1 f7       	brne	.-4      	; 0xc56 <Game_Init+0x110>
     c5a:	9a 83       	std	Y+2, r25	; 0x02
     c5c:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1000);
	LCD_enuSendCommand(0x01);
     c5e:	81 e0       	ldi	r24, 0x01	; 1
     c60:	0e 94 95 12 	call	0x252a	; 0x252a <LCD_enuSendCommand>

	score1=0 , score2=0, ball_Column=2,ball_Row=2;
     c64:	10 92 98 00 	sts	0x0098, r1
     c68:	10 92 99 00 	sts	0x0099, r1
     c6c:	82 e0       	ldi	r24, 0x02	; 2
     c6e:	80 93 96 00 	sts	0x0096, r24
     c72:	82 e0       	ldi	r24, 0x02	; 2
     c74:	80 93 97 00 	sts	0x0097, r24

	LCD_MOVE_CURSOR(1,1);
     c78:	81 e0       	ldi	r24, 0x01	; 1
     c7a:	61 e0       	ldi	r22, 0x01	; 1
     c7c:	0e 94 f0 15 	call	0x2be0	; 0x2be0 <LCD_MOVE_CURSOR>
	LCD_enuDisplayString("P1:");
     c80:	8f e6       	ldi	r24, 0x6F	; 111
     c82:	90 e0       	ldi	r25, 0x00	; 0
     c84:	0e 94 bf 15 	call	0x2b7e	; 0x2b7e <LCD_enuDisplayString>
	LCD_enuDisplayIntegerNum(score1);
     c88:	80 91 98 00 	lds	r24, 0x0098
     c8c:	88 2f       	mov	r24, r24
     c8e:	90 e0       	ldi	r25, 0x00	; 0
     c90:	a0 e0       	ldi	r26, 0x00	; 0
     c92:	b0 e0       	ldi	r27, 0x00	; 0
     c94:	bc 01       	movw	r22, r24
     c96:	cd 01       	movw	r24, r26
     c98:	0e 94 aa 12 	call	0x2554	; 0x2554 <LCD_enuDisplayIntegerNum>
	LCD_MOVE_CURSOR(1,12);
     c9c:	81 e0       	ldi	r24, 0x01	; 1
     c9e:	6c e0       	ldi	r22, 0x0C	; 12
     ca0:	0e 94 f0 15 	call	0x2be0	; 0x2be0 <LCD_MOVE_CURSOR>
	LCD_enuDisplayString("P2:");
     ca4:	83 e7       	ldi	r24, 0x73	; 115
     ca6:	90 e0       	ldi	r25, 0x00	; 0
     ca8:	0e 94 bf 15 	call	0x2b7e	; 0x2b7e <LCD_enuDisplayString>
	LCD_enuDisplayIntegerNum(score2);
     cac:	80 91 99 00 	lds	r24, 0x0099
     cb0:	88 2f       	mov	r24, r24
     cb2:	90 e0       	ldi	r25, 0x00	; 0
     cb4:	a0 e0       	ldi	r26, 0x00	; 0
     cb6:	b0 e0       	ldi	r27, 0x00	; 0
     cb8:	bc 01       	movw	r22, r24
     cba:	cd 01       	movw	r24, r26
     cbc:	0e 94 aa 12 	call	0x2554	; 0x2554 <LCD_enuDisplayIntegerNum>

	LCD_MOVE_CURSOR(2,1);
     cc0:	82 e0       	ldi	r24, 0x02	; 2
     cc2:	61 e0       	ldi	r22, 0x01	; 1
     cc4:	0e 94 f0 15 	call	0x2be0	; 0x2be0 <LCD_MOVE_CURSOR>
	LCD_enuDisplayChar('|');
     cc8:	8c e7       	ldi	r24, 0x7C	; 124
     cca:	0e 94 80 12 	call	0x2500	; 0x2500 <LCD_enuDisplayChar>
	LCD_MOVE_CURSOR(2,16);
     cce:	82 e0       	ldi	r24, 0x02	; 2
     cd0:	60 e1       	ldi	r22, 0x10	; 16
     cd2:	0e 94 f0 15 	call	0x2be0	; 0x2be0 <LCD_MOVE_CURSOR>
	LCD_enuDisplayChar('|');
     cd6:	8c e7       	ldi	r24, 0x7C	; 124
     cd8:	0e 94 80 12 	call	0x2500	; 0x2500 <LCD_enuDisplayChar>

	LCD_MOVE_CURSOR(2,2);
     cdc:	82 e0       	ldi	r24, 0x02	; 2
     cde:	62 e0       	ldi	r22, 0x02	; 2
     ce0:	0e 94 f0 15 	call	0x2be0	; 0x2be0 <LCD_MOVE_CURSOR>
	LCD_enuDisplayChar('O');
     ce4:	8f e4       	ldi	r24, 0x4F	; 79
     ce6:	0e 94 80 12 	call	0x2500	; 0x2500 <LCD_enuDisplayChar>


	DIO_enuSetPinDirection(DIO_u8PORTD,DIO_u8PIN2, DIO_u8INPUT);
     cea:	83 e0       	ldi	r24, 0x03	; 3
     cec:	62 e0       	ldi	r22, 0x02	; 2
     cee:	40 e0       	ldi	r20, 0x00	; 0
     cf0:	0e 94 b7 0b 	call	0x176e	; 0x176e <DIO_enuSetPinDirection>
	DIO_enuSetPinDirection(DIO_u8PORTD,DIO_u8PIN3, DIO_u8INPUT);
     cf4:	83 e0       	ldi	r24, 0x03	; 3
     cf6:	63 e0       	ldi	r22, 0x03	; 3
     cf8:	40 e0       	ldi	r20, 0x00	; 0
     cfa:	0e 94 b7 0b 	call	0x176e	; 0x176e <DIO_enuSetPinDirection>

}
     cfe:	2e 96       	adiw	r28, 0x0e	; 14
     d00:	0f b6       	in	r0, 0x3f	; 63
     d02:	f8 94       	cli
     d04:	de bf       	out	0x3e, r29	; 62
     d06:	0f be       	out	0x3f, r0	; 63
     d08:	cd bf       	out	0x3d, r28	; 61
     d0a:	cf 91       	pop	r28
     d0c:	df 91       	pop	r29
     d0e:	08 95       	ret

00000d10 <Game>:

void Game()
{
     d10:	df 93       	push	r29
     d12:	cf 93       	push	r28
     d14:	cd b7       	in	r28, 0x3d	; 61
     d16:	de b7       	in	r29, 0x3e	; 62
     d18:	6c 97       	sbiw	r28, 0x1c	; 28
     d1a:	0f b6       	in	r0, 0x3f	; 63
     d1c:	f8 94       	cli
     d1e:	de bf       	out	0x3e, r29	; 62
     d20:	0f be       	out	0x3f, r0	; 63
     d22:	cd bf       	out	0x3d, r28	; 61
	//_delay_ms(1000);

	if(score2 > score1 || ( (score2 == score1) && score2 !=0 && score1 != 0 ) )
     d24:	90 91 99 00 	lds	r25, 0x0099
     d28:	80 91 98 00 	lds	r24, 0x0098
     d2c:	89 17       	cp	r24, r25
     d2e:	88 f0       	brcs	.+34     	; 0xd52 <Game+0x42>
     d30:	90 91 99 00 	lds	r25, 0x0099
     d34:	80 91 98 00 	lds	r24, 0x0098
     d38:	98 17       	cp	r25, r24
     d3a:	09 f0       	breq	.+2      	; 0xd3e <Game+0x2e>
     d3c:	92 c0       	rjmp	.+292    	; 0xe62 <Game+0x152>
     d3e:	80 91 99 00 	lds	r24, 0x0099
     d42:	88 23       	and	r24, r24
     d44:	09 f4       	brne	.+2      	; 0xd48 <Game+0x38>
     d46:	8d c0       	rjmp	.+282    	; 0xe62 <Game+0x152>
     d48:	80 91 98 00 	lds	r24, 0x0098
     d4c:	88 23       	and	r24, r24
     d4e:	09 f4       	brne	.+2      	; 0xd52 <Game+0x42>
     d50:	88 c0       	rjmp	.+272    	; 0xe62 <Game+0x152>
	{
	LCD_enuSendCommand(0x01);
     d52:	81 e0       	ldi	r24, 0x01	; 1
     d54:	0e 94 95 12 	call	0x252a	; 0x252a <LCD_enuSendCommand>
	LCD_MOVE_CURSOR(1,5);
     d58:	81 e0       	ldi	r24, 0x01	; 1
     d5a:	65 e0       	ldi	r22, 0x05	; 5
     d5c:	0e 94 f0 15 	call	0x2be0	; 0x2be0 <LCD_MOVE_CURSOR>
	LCD_enuDisplayString("PLayer 2");
     d60:	87 e7       	ldi	r24, 0x77	; 119
     d62:	90 e0       	ldi	r25, 0x00	; 0
     d64:	0e 94 bf 15 	call	0x2b7e	; 0x2b7e <LCD_enuDisplayString>
	LCD_MOVE_CURSOR(2,7);
     d68:	82 e0       	ldi	r24, 0x02	; 2
     d6a:	67 e0       	ldi	r22, 0x07	; 7
     d6c:	0e 94 f0 15 	call	0x2be0	; 0x2be0 <LCD_MOVE_CURSOR>
	LCD_enuDisplayString("Won!");
     d70:	80 e8       	ldi	r24, 0x80	; 128
     d72:	90 e0       	ldi	r25, 0x00	; 0
     d74:	0e 94 bf 15 	call	0x2b7e	; 0x2b7e <LCD_enuDisplayString>
     d78:	80 e0       	ldi	r24, 0x00	; 0
     d7a:	90 e0       	ldi	r25, 0x00	; 0
     d7c:	aa e7       	ldi	r26, 0x7A	; 122
     d7e:	b4 e4       	ldi	r27, 0x44	; 68
     d80:	89 8f       	std	Y+25, r24	; 0x19
     d82:	9a 8f       	std	Y+26, r25	; 0x1a
     d84:	ab 8f       	std	Y+27, r26	; 0x1b
     d86:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     d88:	69 8d       	ldd	r22, Y+25	; 0x19
     d8a:	7a 8d       	ldd	r23, Y+26	; 0x1a
     d8c:	8b 8d       	ldd	r24, Y+27	; 0x1b
     d8e:	9c 8d       	ldd	r25, Y+28	; 0x1c
     d90:	20 e0       	ldi	r18, 0x00	; 0
     d92:	30 e0       	ldi	r19, 0x00	; 0
     d94:	4a e7       	ldi	r20, 0x7A	; 122
     d96:	53 e4       	ldi	r21, 0x43	; 67
     d98:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     d9c:	dc 01       	movw	r26, r24
     d9e:	cb 01       	movw	r24, r22
     da0:	8d 8b       	std	Y+21, r24	; 0x15
     da2:	9e 8b       	std	Y+22, r25	; 0x16
     da4:	af 8b       	std	Y+23, r26	; 0x17
     da6:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
     da8:	6d 89       	ldd	r22, Y+21	; 0x15
     daa:	7e 89       	ldd	r23, Y+22	; 0x16
     dac:	8f 89       	ldd	r24, Y+23	; 0x17
     dae:	98 8d       	ldd	r25, Y+24	; 0x18
     db0:	20 e0       	ldi	r18, 0x00	; 0
     db2:	30 e0       	ldi	r19, 0x00	; 0
     db4:	40 e8       	ldi	r20, 0x80	; 128
     db6:	5f e3       	ldi	r21, 0x3F	; 63
     db8:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     dbc:	88 23       	and	r24, r24
     dbe:	2c f4       	brge	.+10     	; 0xdca <Game+0xba>
		__ticks = 1;
     dc0:	81 e0       	ldi	r24, 0x01	; 1
     dc2:	90 e0       	ldi	r25, 0x00	; 0
     dc4:	9c 8b       	std	Y+20, r25	; 0x14
     dc6:	8b 8b       	std	Y+19, r24	; 0x13
     dc8:	3f c0       	rjmp	.+126    	; 0xe48 <Game+0x138>
	else if (__tmp > 65535)
     dca:	6d 89       	ldd	r22, Y+21	; 0x15
     dcc:	7e 89       	ldd	r23, Y+22	; 0x16
     dce:	8f 89       	ldd	r24, Y+23	; 0x17
     dd0:	98 8d       	ldd	r25, Y+24	; 0x18
     dd2:	20 e0       	ldi	r18, 0x00	; 0
     dd4:	3f ef       	ldi	r19, 0xFF	; 255
     dd6:	4f e7       	ldi	r20, 0x7F	; 127
     dd8:	57 e4       	ldi	r21, 0x47	; 71
     dda:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     dde:	18 16       	cp	r1, r24
     de0:	4c f5       	brge	.+82     	; 0xe34 <Game+0x124>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     de2:	69 8d       	ldd	r22, Y+25	; 0x19
     de4:	7a 8d       	ldd	r23, Y+26	; 0x1a
     de6:	8b 8d       	ldd	r24, Y+27	; 0x1b
     de8:	9c 8d       	ldd	r25, Y+28	; 0x1c
     dea:	20 e0       	ldi	r18, 0x00	; 0
     dec:	30 e0       	ldi	r19, 0x00	; 0
     dee:	40 e2       	ldi	r20, 0x20	; 32
     df0:	51 e4       	ldi	r21, 0x41	; 65
     df2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     df6:	dc 01       	movw	r26, r24
     df8:	cb 01       	movw	r24, r22
     dfa:	bc 01       	movw	r22, r24
     dfc:	cd 01       	movw	r24, r26
     dfe:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     e02:	dc 01       	movw	r26, r24
     e04:	cb 01       	movw	r24, r22
     e06:	9c 8b       	std	Y+20, r25	; 0x14
     e08:	8b 8b       	std	Y+19, r24	; 0x13
     e0a:	0f c0       	rjmp	.+30     	; 0xe2a <Game+0x11a>
     e0c:	89 e1       	ldi	r24, 0x19	; 25
     e0e:	90 e0       	ldi	r25, 0x00	; 0
     e10:	9a 8b       	std	Y+18, r25	; 0x12
     e12:	89 8b       	std	Y+17, r24	; 0x11
     e14:	89 89       	ldd	r24, Y+17	; 0x11
     e16:	9a 89       	ldd	r25, Y+18	; 0x12
     e18:	01 97       	sbiw	r24, 0x01	; 1
     e1a:	f1 f7       	brne	.-4      	; 0xe18 <Game+0x108>
     e1c:	9a 8b       	std	Y+18, r25	; 0x12
     e1e:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     e20:	8b 89       	ldd	r24, Y+19	; 0x13
     e22:	9c 89       	ldd	r25, Y+20	; 0x14
     e24:	01 97       	sbiw	r24, 0x01	; 1
     e26:	9c 8b       	std	Y+20, r25	; 0x14
     e28:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     e2a:	8b 89       	ldd	r24, Y+19	; 0x13
     e2c:	9c 89       	ldd	r25, Y+20	; 0x14
     e2e:	00 97       	sbiw	r24, 0x00	; 0
     e30:	69 f7       	brne	.-38     	; 0xe0c <Game+0xfc>
     e32:	14 c0       	rjmp	.+40     	; 0xe5c <Game+0x14c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     e34:	6d 89       	ldd	r22, Y+21	; 0x15
     e36:	7e 89       	ldd	r23, Y+22	; 0x16
     e38:	8f 89       	ldd	r24, Y+23	; 0x17
     e3a:	98 8d       	ldd	r25, Y+24	; 0x18
     e3c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     e40:	dc 01       	movw	r26, r24
     e42:	cb 01       	movw	r24, r22
     e44:	9c 8b       	std	Y+20, r25	; 0x14
     e46:	8b 8b       	std	Y+19, r24	; 0x13
     e48:	8b 89       	ldd	r24, Y+19	; 0x13
     e4a:	9c 89       	ldd	r25, Y+20	; 0x14
     e4c:	98 8b       	std	Y+16, r25	; 0x10
     e4e:	8f 87       	std	Y+15, r24	; 0x0f
     e50:	8f 85       	ldd	r24, Y+15	; 0x0f
     e52:	98 89       	ldd	r25, Y+16	; 0x10
     e54:	01 97       	sbiw	r24, 0x01	; 1
     e56:	f1 f7       	brne	.-4      	; 0xe54 <Game+0x144>
     e58:	98 8b       	std	Y+16, r25	; 0x10
     e5a:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1000);
	Game_Init();
     e5c:	0e 94 a3 05 	call	0xb46	; 0xb46 <Game_Init>
     e60:	8e c0       	rjmp	.+284    	; 0xf7e <Game+0x26e>
	}

	else if(score1 > score2 )
     e62:	90 91 98 00 	lds	r25, 0x0098
     e66:	80 91 99 00 	lds	r24, 0x0099
     e6a:	89 17       	cp	r24, r25
     e6c:	08 f0       	brcs	.+2      	; 0xe70 <Game+0x160>
     e6e:	87 c0       	rjmp	.+270    	; 0xf7e <Game+0x26e>
		{
		LCD_enuSendCommand(0x01);
     e70:	81 e0       	ldi	r24, 0x01	; 1
     e72:	0e 94 95 12 	call	0x252a	; 0x252a <LCD_enuSendCommand>
		LCD_MOVE_CURSOR(1,5);
     e76:	81 e0       	ldi	r24, 0x01	; 1
     e78:	65 e0       	ldi	r22, 0x05	; 5
     e7a:	0e 94 f0 15 	call	0x2be0	; 0x2be0 <LCD_MOVE_CURSOR>
		LCD_enuDisplayString("PLayer 1");
     e7e:	85 e8       	ldi	r24, 0x85	; 133
     e80:	90 e0       	ldi	r25, 0x00	; 0
     e82:	0e 94 bf 15 	call	0x2b7e	; 0x2b7e <LCD_enuDisplayString>
		LCD_MOVE_CURSOR(2,7);
     e86:	82 e0       	ldi	r24, 0x02	; 2
     e88:	67 e0       	ldi	r22, 0x07	; 7
     e8a:	0e 94 f0 15 	call	0x2be0	; 0x2be0 <LCD_MOVE_CURSOR>
		LCD_enuDisplayString("Won!");
     e8e:	80 e8       	ldi	r24, 0x80	; 128
     e90:	90 e0       	ldi	r25, 0x00	; 0
     e92:	0e 94 bf 15 	call	0x2b7e	; 0x2b7e <LCD_enuDisplayString>
     e96:	80 e0       	ldi	r24, 0x00	; 0
     e98:	90 e0       	ldi	r25, 0x00	; 0
     e9a:	aa e7       	ldi	r26, 0x7A	; 122
     e9c:	b4 e4       	ldi	r27, 0x44	; 68
     e9e:	8b 87       	std	Y+11, r24	; 0x0b
     ea0:	9c 87       	std	Y+12, r25	; 0x0c
     ea2:	ad 87       	std	Y+13, r26	; 0x0d
     ea4:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     ea6:	6b 85       	ldd	r22, Y+11	; 0x0b
     ea8:	7c 85       	ldd	r23, Y+12	; 0x0c
     eaa:	8d 85       	ldd	r24, Y+13	; 0x0d
     eac:	9e 85       	ldd	r25, Y+14	; 0x0e
     eae:	20 e0       	ldi	r18, 0x00	; 0
     eb0:	30 e0       	ldi	r19, 0x00	; 0
     eb2:	4a e7       	ldi	r20, 0x7A	; 122
     eb4:	53 e4       	ldi	r21, 0x43	; 67
     eb6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     eba:	dc 01       	movw	r26, r24
     ebc:	cb 01       	movw	r24, r22
     ebe:	8f 83       	std	Y+7, r24	; 0x07
     ec0:	98 87       	std	Y+8, r25	; 0x08
     ec2:	a9 87       	std	Y+9, r26	; 0x09
     ec4:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     ec6:	6f 81       	ldd	r22, Y+7	; 0x07
     ec8:	78 85       	ldd	r23, Y+8	; 0x08
     eca:	89 85       	ldd	r24, Y+9	; 0x09
     ecc:	9a 85       	ldd	r25, Y+10	; 0x0a
     ece:	20 e0       	ldi	r18, 0x00	; 0
     ed0:	30 e0       	ldi	r19, 0x00	; 0
     ed2:	40 e8       	ldi	r20, 0x80	; 128
     ed4:	5f e3       	ldi	r21, 0x3F	; 63
     ed6:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     eda:	88 23       	and	r24, r24
     edc:	2c f4       	brge	.+10     	; 0xee8 <Game+0x1d8>
		__ticks = 1;
     ede:	81 e0       	ldi	r24, 0x01	; 1
     ee0:	90 e0       	ldi	r25, 0x00	; 0
     ee2:	9e 83       	std	Y+6, r25	; 0x06
     ee4:	8d 83       	std	Y+5, r24	; 0x05
     ee6:	3f c0       	rjmp	.+126    	; 0xf66 <Game+0x256>
	else if (__tmp > 65535)
     ee8:	6f 81       	ldd	r22, Y+7	; 0x07
     eea:	78 85       	ldd	r23, Y+8	; 0x08
     eec:	89 85       	ldd	r24, Y+9	; 0x09
     eee:	9a 85       	ldd	r25, Y+10	; 0x0a
     ef0:	20 e0       	ldi	r18, 0x00	; 0
     ef2:	3f ef       	ldi	r19, 0xFF	; 255
     ef4:	4f e7       	ldi	r20, 0x7F	; 127
     ef6:	57 e4       	ldi	r21, 0x47	; 71
     ef8:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     efc:	18 16       	cp	r1, r24
     efe:	4c f5       	brge	.+82     	; 0xf52 <Game+0x242>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     f00:	6b 85       	ldd	r22, Y+11	; 0x0b
     f02:	7c 85       	ldd	r23, Y+12	; 0x0c
     f04:	8d 85       	ldd	r24, Y+13	; 0x0d
     f06:	9e 85       	ldd	r25, Y+14	; 0x0e
     f08:	20 e0       	ldi	r18, 0x00	; 0
     f0a:	30 e0       	ldi	r19, 0x00	; 0
     f0c:	40 e2       	ldi	r20, 0x20	; 32
     f0e:	51 e4       	ldi	r21, 0x41	; 65
     f10:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     f14:	dc 01       	movw	r26, r24
     f16:	cb 01       	movw	r24, r22
     f18:	bc 01       	movw	r22, r24
     f1a:	cd 01       	movw	r24, r26
     f1c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     f20:	dc 01       	movw	r26, r24
     f22:	cb 01       	movw	r24, r22
     f24:	9e 83       	std	Y+6, r25	; 0x06
     f26:	8d 83       	std	Y+5, r24	; 0x05
     f28:	0f c0       	rjmp	.+30     	; 0xf48 <Game+0x238>
     f2a:	89 e1       	ldi	r24, 0x19	; 25
     f2c:	90 e0       	ldi	r25, 0x00	; 0
     f2e:	9c 83       	std	Y+4, r25	; 0x04
     f30:	8b 83       	std	Y+3, r24	; 0x03
     f32:	8b 81       	ldd	r24, Y+3	; 0x03
     f34:	9c 81       	ldd	r25, Y+4	; 0x04
     f36:	01 97       	sbiw	r24, 0x01	; 1
     f38:	f1 f7       	brne	.-4      	; 0xf36 <Game+0x226>
     f3a:	9c 83       	std	Y+4, r25	; 0x04
     f3c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     f3e:	8d 81       	ldd	r24, Y+5	; 0x05
     f40:	9e 81       	ldd	r25, Y+6	; 0x06
     f42:	01 97       	sbiw	r24, 0x01	; 1
     f44:	9e 83       	std	Y+6, r25	; 0x06
     f46:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     f48:	8d 81       	ldd	r24, Y+5	; 0x05
     f4a:	9e 81       	ldd	r25, Y+6	; 0x06
     f4c:	00 97       	sbiw	r24, 0x00	; 0
     f4e:	69 f7       	brne	.-38     	; 0xf2a <Game+0x21a>
     f50:	14 c0       	rjmp	.+40     	; 0xf7a <Game+0x26a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     f52:	6f 81       	ldd	r22, Y+7	; 0x07
     f54:	78 85       	ldd	r23, Y+8	; 0x08
     f56:	89 85       	ldd	r24, Y+9	; 0x09
     f58:	9a 85       	ldd	r25, Y+10	; 0x0a
     f5a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     f5e:	dc 01       	movw	r26, r24
     f60:	cb 01       	movw	r24, r22
     f62:	9e 83       	std	Y+6, r25	; 0x06
     f64:	8d 83       	std	Y+5, r24	; 0x05
     f66:	8d 81       	ldd	r24, Y+5	; 0x05
     f68:	9e 81       	ldd	r25, Y+6	; 0x06
     f6a:	9a 83       	std	Y+2, r25	; 0x02
     f6c:	89 83       	std	Y+1, r24	; 0x01
     f6e:	89 81       	ldd	r24, Y+1	; 0x01
     f70:	9a 81       	ldd	r25, Y+2	; 0x02
     f72:	01 97       	sbiw	r24, 0x01	; 1
     f74:	f1 f7       	brne	.-4      	; 0xf72 <Game+0x262>
     f76:	9a 83       	std	Y+2, r25	; 0x02
     f78:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(1000);
		Game_Init();
     f7a:	0e 94 a3 05 	call	0xb46	; 0xb46 <Game_Init>
		}


}
     f7e:	6c 96       	adiw	r28, 0x1c	; 28
     f80:	0f b6       	in	r0, 0x3f	; 63
     f82:	f8 94       	cli
     f84:	de bf       	out	0x3e, r29	; 62
     f86:	0f be       	out	0x3f, r0	; 63
     f88:	cd bf       	out	0x3d, r28	; 61
     f8a:	cf 91       	pop	r28
     f8c:	df 91       	pop	r29
     f8e:	08 95       	ret

00000f90 <EXINT0>:

void EXINT0()
{
     f90:	df 93       	push	r29
     f92:	cf 93       	push	r28
     f94:	cd b7       	in	r28, 0x3d	; 61
     f96:	de b7       	in	r29, 0x3e	; 62
     f98:	6c 97       	sbiw	r28, 0x1c	; 28
     f9a:	0f b6       	in	r0, 0x3f	; 63
     f9c:	f8 94       	cli
     f9e:	de bf       	out	0x3e, r29	; 62
     fa0:	0f be       	out	0x3f, r0	; 63
     fa2:	cd bf       	out	0x3d, r28	; 61
	if(ball_Column ==2)
     fa4:	80 91 96 00 	lds	r24, 0x0096
     fa8:	82 30       	cpi	r24, 0x02	; 2
     faa:	09 f0       	breq	.+2      	; 0xfae <EXINT0+0x1e>
     fac:	2b c1       	rjmp	.+598    	; 0x1204 <EXINT0+0x274>
	{
		LCD_MOVE_CURSOR(2,2);
     fae:	82 e0       	ldi	r24, 0x02	; 2
     fb0:	62 e0       	ldi	r22, 0x02	; 2
     fb2:	0e 94 f0 15 	call	0x2be0	; 0x2be0 <LCD_MOVE_CURSOR>
	    LCD_enuDisplayChar(' ');
     fb6:	80 e2       	ldi	r24, 0x20	; 32
     fb8:	0e 94 80 12 	call	0x2500	; 0x2500 <LCD_enuDisplayChar>

	score1++;
     fbc:	80 91 98 00 	lds	r24, 0x0098
     fc0:	8f 5f       	subi	r24, 0xFF	; 255
     fc2:	80 93 98 00 	sts	0x0098, r24
	LCD_MOVE_CURSOR(1,1);
     fc6:	81 e0       	ldi	r24, 0x01	; 1
     fc8:	61 e0       	ldi	r22, 0x01	; 1
     fca:	0e 94 f0 15 	call	0x2be0	; 0x2be0 <LCD_MOVE_CURSOR>
	LCD_enuDisplayString("P1:");
     fce:	8f e6       	ldi	r24, 0x6F	; 111
     fd0:	90 e0       	ldi	r25, 0x00	; 0
     fd2:	0e 94 bf 15 	call	0x2b7e	; 0x2b7e <LCD_enuDisplayString>
	LCD_enuDisplayIntegerNum(score1);
     fd6:	80 91 98 00 	lds	r24, 0x0098
     fda:	88 2f       	mov	r24, r24
     fdc:	90 e0       	ldi	r25, 0x00	; 0
     fde:	a0 e0       	ldi	r26, 0x00	; 0
     fe0:	b0 e0       	ldi	r27, 0x00	; 0
     fe2:	bc 01       	movw	r22, r24
     fe4:	cd 01       	movw	r24, r26
     fe6:	0e 94 aa 12 	call	0x2554	; 0x2554 <LCD_enuDisplayIntegerNum>
	for( ball_Column=3;ball_Column<15;ball_Column++){
     fea:	83 e0       	ldi	r24, 0x03	; 3
     fec:	80 93 96 00 	sts	0x0096, r24
     ff0:	89 c0       	rjmp	.+274    	; 0x1104 <EXINT0+0x174>

		LCD_MOVE_CURSOR(2,ball_Column);
     ff2:	90 91 96 00 	lds	r25, 0x0096
     ff6:	82 e0       	ldi	r24, 0x02	; 2
     ff8:	69 2f       	mov	r22, r25
     ffa:	0e 94 f0 15 	call	0x2be0	; 0x2be0 <LCD_MOVE_CURSOR>
		LCD_enuDisplayChar('O');
     ffe:	8f e4       	ldi	r24, 0x4F	; 79
    1000:	0e 94 80 12 	call	0x2500	; 0x2500 <LCD_enuDisplayChar>
    1004:	80 e0       	ldi	r24, 0x00	; 0
    1006:	90 e0       	ldi	r25, 0x00	; 0
    1008:	a0 ea       	ldi	r26, 0xA0	; 160
    100a:	b2 e4       	ldi	r27, 0x42	; 66
    100c:	89 8f       	std	Y+25, r24	; 0x19
    100e:	9a 8f       	std	Y+26, r25	; 0x1a
    1010:	ab 8f       	std	Y+27, r26	; 0x1b
    1012:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1014:	69 8d       	ldd	r22, Y+25	; 0x19
    1016:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1018:	8b 8d       	ldd	r24, Y+27	; 0x1b
    101a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    101c:	20 e0       	ldi	r18, 0x00	; 0
    101e:	30 e0       	ldi	r19, 0x00	; 0
    1020:	4a e7       	ldi	r20, 0x7A	; 122
    1022:	53 e4       	ldi	r21, 0x43	; 67
    1024:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1028:	dc 01       	movw	r26, r24
    102a:	cb 01       	movw	r24, r22
    102c:	8d 8b       	std	Y+21, r24	; 0x15
    102e:	9e 8b       	std	Y+22, r25	; 0x16
    1030:	af 8b       	std	Y+23, r26	; 0x17
    1032:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1034:	6d 89       	ldd	r22, Y+21	; 0x15
    1036:	7e 89       	ldd	r23, Y+22	; 0x16
    1038:	8f 89       	ldd	r24, Y+23	; 0x17
    103a:	98 8d       	ldd	r25, Y+24	; 0x18
    103c:	20 e0       	ldi	r18, 0x00	; 0
    103e:	30 e0       	ldi	r19, 0x00	; 0
    1040:	40 e8       	ldi	r20, 0x80	; 128
    1042:	5f e3       	ldi	r21, 0x3F	; 63
    1044:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1048:	88 23       	and	r24, r24
    104a:	2c f4       	brge	.+10     	; 0x1056 <EXINT0+0xc6>
		__ticks = 1;
    104c:	81 e0       	ldi	r24, 0x01	; 1
    104e:	90 e0       	ldi	r25, 0x00	; 0
    1050:	9c 8b       	std	Y+20, r25	; 0x14
    1052:	8b 8b       	std	Y+19, r24	; 0x13
    1054:	3f c0       	rjmp	.+126    	; 0x10d4 <EXINT0+0x144>
	else if (__tmp > 65535)
    1056:	6d 89       	ldd	r22, Y+21	; 0x15
    1058:	7e 89       	ldd	r23, Y+22	; 0x16
    105a:	8f 89       	ldd	r24, Y+23	; 0x17
    105c:	98 8d       	ldd	r25, Y+24	; 0x18
    105e:	20 e0       	ldi	r18, 0x00	; 0
    1060:	3f ef       	ldi	r19, 0xFF	; 255
    1062:	4f e7       	ldi	r20, 0x7F	; 127
    1064:	57 e4       	ldi	r21, 0x47	; 71
    1066:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    106a:	18 16       	cp	r1, r24
    106c:	4c f5       	brge	.+82     	; 0x10c0 <EXINT0+0x130>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    106e:	69 8d       	ldd	r22, Y+25	; 0x19
    1070:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1072:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1074:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1076:	20 e0       	ldi	r18, 0x00	; 0
    1078:	30 e0       	ldi	r19, 0x00	; 0
    107a:	40 e2       	ldi	r20, 0x20	; 32
    107c:	51 e4       	ldi	r21, 0x41	; 65
    107e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1082:	dc 01       	movw	r26, r24
    1084:	cb 01       	movw	r24, r22
    1086:	bc 01       	movw	r22, r24
    1088:	cd 01       	movw	r24, r26
    108a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    108e:	dc 01       	movw	r26, r24
    1090:	cb 01       	movw	r24, r22
    1092:	9c 8b       	std	Y+20, r25	; 0x14
    1094:	8b 8b       	std	Y+19, r24	; 0x13
    1096:	0f c0       	rjmp	.+30     	; 0x10b6 <EXINT0+0x126>
    1098:	89 e1       	ldi	r24, 0x19	; 25
    109a:	90 e0       	ldi	r25, 0x00	; 0
    109c:	9a 8b       	std	Y+18, r25	; 0x12
    109e:	89 8b       	std	Y+17, r24	; 0x11
    10a0:	89 89       	ldd	r24, Y+17	; 0x11
    10a2:	9a 89       	ldd	r25, Y+18	; 0x12
    10a4:	01 97       	sbiw	r24, 0x01	; 1
    10a6:	f1 f7       	brne	.-4      	; 0x10a4 <EXINT0+0x114>
    10a8:	9a 8b       	std	Y+18, r25	; 0x12
    10aa:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    10ac:	8b 89       	ldd	r24, Y+19	; 0x13
    10ae:	9c 89       	ldd	r25, Y+20	; 0x14
    10b0:	01 97       	sbiw	r24, 0x01	; 1
    10b2:	9c 8b       	std	Y+20, r25	; 0x14
    10b4:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    10b6:	8b 89       	ldd	r24, Y+19	; 0x13
    10b8:	9c 89       	ldd	r25, Y+20	; 0x14
    10ba:	00 97       	sbiw	r24, 0x00	; 0
    10bc:	69 f7       	brne	.-38     	; 0x1098 <EXINT0+0x108>
    10be:	14 c0       	rjmp	.+40     	; 0x10e8 <EXINT0+0x158>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    10c0:	6d 89       	ldd	r22, Y+21	; 0x15
    10c2:	7e 89       	ldd	r23, Y+22	; 0x16
    10c4:	8f 89       	ldd	r24, Y+23	; 0x17
    10c6:	98 8d       	ldd	r25, Y+24	; 0x18
    10c8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    10cc:	dc 01       	movw	r26, r24
    10ce:	cb 01       	movw	r24, r22
    10d0:	9c 8b       	std	Y+20, r25	; 0x14
    10d2:	8b 8b       	std	Y+19, r24	; 0x13
    10d4:	8b 89       	ldd	r24, Y+19	; 0x13
    10d6:	9c 89       	ldd	r25, Y+20	; 0x14
    10d8:	98 8b       	std	Y+16, r25	; 0x10
    10da:	8f 87       	std	Y+15, r24	; 0x0f
    10dc:	8f 85       	ldd	r24, Y+15	; 0x0f
    10de:	98 89       	ldd	r25, Y+16	; 0x10
    10e0:	01 97       	sbiw	r24, 0x01	; 1
    10e2:	f1 f7       	brne	.-4      	; 0x10e0 <EXINT0+0x150>
    10e4:	98 8b       	std	Y+16, r25	; 0x10
    10e6:	8f 87       	std	Y+15, r24	; 0x0f
		_delay_ms(80);
		LCD_MOVE_CURSOR(2,ball_Column);
    10e8:	90 91 96 00 	lds	r25, 0x0096
    10ec:	82 e0       	ldi	r24, 0x02	; 2
    10ee:	69 2f       	mov	r22, r25
    10f0:	0e 94 f0 15 	call	0x2be0	; 0x2be0 <LCD_MOVE_CURSOR>
		LCD_enuDisplayChar(' ');
    10f4:	80 e2       	ldi	r24, 0x20	; 32
    10f6:	0e 94 80 12 	call	0x2500	; 0x2500 <LCD_enuDisplayChar>

	score1++;
	LCD_MOVE_CURSOR(1,1);
	LCD_enuDisplayString("P1:");
	LCD_enuDisplayIntegerNum(score1);
	for( ball_Column=3;ball_Column<15;ball_Column++){
    10fa:	80 91 96 00 	lds	r24, 0x0096
    10fe:	8f 5f       	subi	r24, 0xFF	; 255
    1100:	80 93 96 00 	sts	0x0096, r24
    1104:	80 91 96 00 	lds	r24, 0x0096
    1108:	8f 30       	cpi	r24, 0x0F	; 15
    110a:	08 f4       	brcc	.+2      	; 0x110e <EXINT0+0x17e>
    110c:	72 cf       	rjmp	.-284    	; 0xff2 <EXINT0+0x62>
		_delay_ms(80);
		LCD_MOVE_CURSOR(2,ball_Column);
		LCD_enuDisplayChar(' ');
	}

	LCD_MOVE_CURSOR(2,ball_Column);
    110e:	90 91 96 00 	lds	r25, 0x0096
    1112:	82 e0       	ldi	r24, 0x02	; 2
    1114:	69 2f       	mov	r22, r25
    1116:	0e 94 f0 15 	call	0x2be0	; 0x2be0 <LCD_MOVE_CURSOR>
	LCD_enuDisplayChar('O');
    111a:	8f e4       	ldi	r24, 0x4F	; 79
    111c:	0e 94 80 12 	call	0x2500	; 0x2500 <LCD_enuDisplayChar>
    1120:	80 e0       	ldi	r24, 0x00	; 0
    1122:	90 e0       	ldi	r25, 0x00	; 0
    1124:	aa ef       	ldi	r26, 0xFA	; 250
    1126:	b3 e4       	ldi	r27, 0x43	; 67
    1128:	8b 87       	std	Y+11, r24	; 0x0b
    112a:	9c 87       	std	Y+12, r25	; 0x0c
    112c:	ad 87       	std	Y+13, r26	; 0x0d
    112e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1130:	6b 85       	ldd	r22, Y+11	; 0x0b
    1132:	7c 85       	ldd	r23, Y+12	; 0x0c
    1134:	8d 85       	ldd	r24, Y+13	; 0x0d
    1136:	9e 85       	ldd	r25, Y+14	; 0x0e
    1138:	20 e0       	ldi	r18, 0x00	; 0
    113a:	30 e0       	ldi	r19, 0x00	; 0
    113c:	4a e7       	ldi	r20, 0x7A	; 122
    113e:	53 e4       	ldi	r21, 0x43	; 67
    1140:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1144:	dc 01       	movw	r26, r24
    1146:	cb 01       	movw	r24, r22
    1148:	8f 83       	std	Y+7, r24	; 0x07
    114a:	98 87       	std	Y+8, r25	; 0x08
    114c:	a9 87       	std	Y+9, r26	; 0x09
    114e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1150:	6f 81       	ldd	r22, Y+7	; 0x07
    1152:	78 85       	ldd	r23, Y+8	; 0x08
    1154:	89 85       	ldd	r24, Y+9	; 0x09
    1156:	9a 85       	ldd	r25, Y+10	; 0x0a
    1158:	20 e0       	ldi	r18, 0x00	; 0
    115a:	30 e0       	ldi	r19, 0x00	; 0
    115c:	40 e8       	ldi	r20, 0x80	; 128
    115e:	5f e3       	ldi	r21, 0x3F	; 63
    1160:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1164:	88 23       	and	r24, r24
    1166:	2c f4       	brge	.+10     	; 0x1172 <EXINT0+0x1e2>
		__ticks = 1;
    1168:	81 e0       	ldi	r24, 0x01	; 1
    116a:	90 e0       	ldi	r25, 0x00	; 0
    116c:	9e 83       	std	Y+6, r25	; 0x06
    116e:	8d 83       	std	Y+5, r24	; 0x05
    1170:	3f c0       	rjmp	.+126    	; 0x11f0 <EXINT0+0x260>
	else if (__tmp > 65535)
    1172:	6f 81       	ldd	r22, Y+7	; 0x07
    1174:	78 85       	ldd	r23, Y+8	; 0x08
    1176:	89 85       	ldd	r24, Y+9	; 0x09
    1178:	9a 85       	ldd	r25, Y+10	; 0x0a
    117a:	20 e0       	ldi	r18, 0x00	; 0
    117c:	3f ef       	ldi	r19, 0xFF	; 255
    117e:	4f e7       	ldi	r20, 0x7F	; 127
    1180:	57 e4       	ldi	r21, 0x47	; 71
    1182:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1186:	18 16       	cp	r1, r24
    1188:	4c f5       	brge	.+82     	; 0x11dc <EXINT0+0x24c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    118a:	6b 85       	ldd	r22, Y+11	; 0x0b
    118c:	7c 85       	ldd	r23, Y+12	; 0x0c
    118e:	8d 85       	ldd	r24, Y+13	; 0x0d
    1190:	9e 85       	ldd	r25, Y+14	; 0x0e
    1192:	20 e0       	ldi	r18, 0x00	; 0
    1194:	30 e0       	ldi	r19, 0x00	; 0
    1196:	40 e2       	ldi	r20, 0x20	; 32
    1198:	51 e4       	ldi	r21, 0x41	; 65
    119a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    119e:	dc 01       	movw	r26, r24
    11a0:	cb 01       	movw	r24, r22
    11a2:	bc 01       	movw	r22, r24
    11a4:	cd 01       	movw	r24, r26
    11a6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    11aa:	dc 01       	movw	r26, r24
    11ac:	cb 01       	movw	r24, r22
    11ae:	9e 83       	std	Y+6, r25	; 0x06
    11b0:	8d 83       	std	Y+5, r24	; 0x05
    11b2:	0f c0       	rjmp	.+30     	; 0x11d2 <EXINT0+0x242>
    11b4:	89 e1       	ldi	r24, 0x19	; 25
    11b6:	90 e0       	ldi	r25, 0x00	; 0
    11b8:	9c 83       	std	Y+4, r25	; 0x04
    11ba:	8b 83       	std	Y+3, r24	; 0x03
    11bc:	8b 81       	ldd	r24, Y+3	; 0x03
    11be:	9c 81       	ldd	r25, Y+4	; 0x04
    11c0:	01 97       	sbiw	r24, 0x01	; 1
    11c2:	f1 f7       	brne	.-4      	; 0x11c0 <EXINT0+0x230>
    11c4:	9c 83       	std	Y+4, r25	; 0x04
    11c6:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    11c8:	8d 81       	ldd	r24, Y+5	; 0x05
    11ca:	9e 81       	ldd	r25, Y+6	; 0x06
    11cc:	01 97       	sbiw	r24, 0x01	; 1
    11ce:	9e 83       	std	Y+6, r25	; 0x06
    11d0:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    11d2:	8d 81       	ldd	r24, Y+5	; 0x05
    11d4:	9e 81       	ldd	r25, Y+6	; 0x06
    11d6:	00 97       	sbiw	r24, 0x00	; 0
    11d8:	69 f7       	brne	.-38     	; 0x11b4 <EXINT0+0x224>
    11da:	14 c0       	rjmp	.+40     	; 0x1204 <EXINT0+0x274>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    11dc:	6f 81       	ldd	r22, Y+7	; 0x07
    11de:	78 85       	ldd	r23, Y+8	; 0x08
    11e0:	89 85       	ldd	r24, Y+9	; 0x09
    11e2:	9a 85       	ldd	r25, Y+10	; 0x0a
    11e4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    11e8:	dc 01       	movw	r26, r24
    11ea:	cb 01       	movw	r24, r22
    11ec:	9e 83       	std	Y+6, r25	; 0x06
    11ee:	8d 83       	std	Y+5, r24	; 0x05
    11f0:	8d 81       	ldd	r24, Y+5	; 0x05
    11f2:	9e 81       	ldd	r25, Y+6	; 0x06
    11f4:	9a 83       	std	Y+2, r25	; 0x02
    11f6:	89 83       	std	Y+1, r24	; 0x01
    11f8:	89 81       	ldd	r24, Y+1	; 0x01
    11fa:	9a 81       	ldd	r25, Y+2	; 0x02
    11fc:	01 97       	sbiw	r24, 0x01	; 1
    11fe:	f1 f7       	brne	.-4      	; 0x11fc <EXINT0+0x26c>
    1200:	9a 83       	std	Y+2, r25	; 0x02
    1202:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(500);
	}

}
    1204:	6c 96       	adiw	r28, 0x1c	; 28
    1206:	0f b6       	in	r0, 0x3f	; 63
    1208:	f8 94       	cli
    120a:	de bf       	out	0x3e, r29	; 62
    120c:	0f be       	out	0x3f, r0	; 63
    120e:	cd bf       	out	0x3d, r28	; 61
    1210:	cf 91       	pop	r28
    1212:	df 91       	pop	r29
    1214:	08 95       	ret

00001216 <EXINT1>:


void EXINT1()
{
    1216:	df 93       	push	r29
    1218:	cf 93       	push	r28
    121a:	cd b7       	in	r28, 0x3d	; 61
    121c:	de b7       	in	r29, 0x3e	; 62
    121e:	6c 97       	sbiw	r28, 0x1c	; 28
    1220:	0f b6       	in	r0, 0x3f	; 63
    1222:	f8 94       	cli
    1224:	de bf       	out	0x3e, r29	; 62
    1226:	0f be       	out	0x3f, r0	; 63
    1228:	cd bf       	out	0x3d, r28	; 61
	if(ball_Column ==15)
    122a:	80 91 96 00 	lds	r24, 0x0096
    122e:	8f 30       	cpi	r24, 0x0F	; 15
    1230:	09 f0       	breq	.+2      	; 0x1234 <EXINT1+0x1e>
    1232:	24 c1       	rjmp	.+584    	; 0x147c <EXINT1+0x266>
		{
	score2++;
    1234:	80 91 99 00 	lds	r24, 0x0099
    1238:	8f 5f       	subi	r24, 0xFF	; 255
    123a:	80 93 99 00 	sts	0x0099, r24
	LCD_MOVE_CURSOR(1,12);
    123e:	81 e0       	ldi	r24, 0x01	; 1
    1240:	6c e0       	ldi	r22, 0x0C	; 12
    1242:	0e 94 f0 15 	call	0x2be0	; 0x2be0 <LCD_MOVE_CURSOR>
	LCD_enuDisplayString("P2:");
    1246:	83 e7       	ldi	r24, 0x73	; 115
    1248:	90 e0       	ldi	r25, 0x00	; 0
    124a:	0e 94 bf 15 	call	0x2b7e	; 0x2b7e <LCD_enuDisplayString>
	LCD_enuDisplayIntegerNum(score2);
    124e:	80 91 99 00 	lds	r24, 0x0099
    1252:	88 2f       	mov	r24, r24
    1254:	90 e0       	ldi	r25, 0x00	; 0
    1256:	a0 e0       	ldi	r26, 0x00	; 0
    1258:	b0 e0       	ldi	r27, 0x00	; 0
    125a:	bc 01       	movw	r22, r24
    125c:	cd 01       	movw	r24, r26
    125e:	0e 94 aa 12 	call	0x2554	; 0x2554 <LCD_enuDisplayIntegerNum>
	for( ball_Column=15; ball_Column>2; ball_Column--){
    1262:	8f e0       	ldi	r24, 0x0F	; 15
    1264:	80 93 96 00 	sts	0x0096, r24
    1268:	89 c0       	rjmp	.+274    	; 0x137c <EXINT1+0x166>
		       LCD_MOVE_CURSOR(2,ball_Column);
    126a:	90 91 96 00 	lds	r25, 0x0096
    126e:	82 e0       	ldi	r24, 0x02	; 2
    1270:	69 2f       	mov	r22, r25
    1272:	0e 94 f0 15 	call	0x2be0	; 0x2be0 <LCD_MOVE_CURSOR>
				LCD_enuDisplayChar('O');
    1276:	8f e4       	ldi	r24, 0x4F	; 79
    1278:	0e 94 80 12 	call	0x2500	; 0x2500 <LCD_enuDisplayChar>
    127c:	80 e0       	ldi	r24, 0x00	; 0
    127e:	90 e0       	ldi	r25, 0x00	; 0
    1280:	a0 ea       	ldi	r26, 0xA0	; 160
    1282:	b2 e4       	ldi	r27, 0x42	; 66
    1284:	89 8f       	std	Y+25, r24	; 0x19
    1286:	9a 8f       	std	Y+26, r25	; 0x1a
    1288:	ab 8f       	std	Y+27, r26	; 0x1b
    128a:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    128c:	69 8d       	ldd	r22, Y+25	; 0x19
    128e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1290:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1292:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1294:	20 e0       	ldi	r18, 0x00	; 0
    1296:	30 e0       	ldi	r19, 0x00	; 0
    1298:	4a e7       	ldi	r20, 0x7A	; 122
    129a:	53 e4       	ldi	r21, 0x43	; 67
    129c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    12a0:	dc 01       	movw	r26, r24
    12a2:	cb 01       	movw	r24, r22
    12a4:	8d 8b       	std	Y+21, r24	; 0x15
    12a6:	9e 8b       	std	Y+22, r25	; 0x16
    12a8:	af 8b       	std	Y+23, r26	; 0x17
    12aa:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    12ac:	6d 89       	ldd	r22, Y+21	; 0x15
    12ae:	7e 89       	ldd	r23, Y+22	; 0x16
    12b0:	8f 89       	ldd	r24, Y+23	; 0x17
    12b2:	98 8d       	ldd	r25, Y+24	; 0x18
    12b4:	20 e0       	ldi	r18, 0x00	; 0
    12b6:	30 e0       	ldi	r19, 0x00	; 0
    12b8:	40 e8       	ldi	r20, 0x80	; 128
    12ba:	5f e3       	ldi	r21, 0x3F	; 63
    12bc:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    12c0:	88 23       	and	r24, r24
    12c2:	2c f4       	brge	.+10     	; 0x12ce <EXINT1+0xb8>
		__ticks = 1;
    12c4:	81 e0       	ldi	r24, 0x01	; 1
    12c6:	90 e0       	ldi	r25, 0x00	; 0
    12c8:	9c 8b       	std	Y+20, r25	; 0x14
    12ca:	8b 8b       	std	Y+19, r24	; 0x13
    12cc:	3f c0       	rjmp	.+126    	; 0x134c <EXINT1+0x136>
	else if (__tmp > 65535)
    12ce:	6d 89       	ldd	r22, Y+21	; 0x15
    12d0:	7e 89       	ldd	r23, Y+22	; 0x16
    12d2:	8f 89       	ldd	r24, Y+23	; 0x17
    12d4:	98 8d       	ldd	r25, Y+24	; 0x18
    12d6:	20 e0       	ldi	r18, 0x00	; 0
    12d8:	3f ef       	ldi	r19, 0xFF	; 255
    12da:	4f e7       	ldi	r20, 0x7F	; 127
    12dc:	57 e4       	ldi	r21, 0x47	; 71
    12de:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    12e2:	18 16       	cp	r1, r24
    12e4:	4c f5       	brge	.+82     	; 0x1338 <EXINT1+0x122>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    12e6:	69 8d       	ldd	r22, Y+25	; 0x19
    12e8:	7a 8d       	ldd	r23, Y+26	; 0x1a
    12ea:	8b 8d       	ldd	r24, Y+27	; 0x1b
    12ec:	9c 8d       	ldd	r25, Y+28	; 0x1c
    12ee:	20 e0       	ldi	r18, 0x00	; 0
    12f0:	30 e0       	ldi	r19, 0x00	; 0
    12f2:	40 e2       	ldi	r20, 0x20	; 32
    12f4:	51 e4       	ldi	r21, 0x41	; 65
    12f6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    12fa:	dc 01       	movw	r26, r24
    12fc:	cb 01       	movw	r24, r22
    12fe:	bc 01       	movw	r22, r24
    1300:	cd 01       	movw	r24, r26
    1302:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1306:	dc 01       	movw	r26, r24
    1308:	cb 01       	movw	r24, r22
    130a:	9c 8b       	std	Y+20, r25	; 0x14
    130c:	8b 8b       	std	Y+19, r24	; 0x13
    130e:	0f c0       	rjmp	.+30     	; 0x132e <EXINT1+0x118>
    1310:	89 e1       	ldi	r24, 0x19	; 25
    1312:	90 e0       	ldi	r25, 0x00	; 0
    1314:	9a 8b       	std	Y+18, r25	; 0x12
    1316:	89 8b       	std	Y+17, r24	; 0x11
    1318:	89 89       	ldd	r24, Y+17	; 0x11
    131a:	9a 89       	ldd	r25, Y+18	; 0x12
    131c:	01 97       	sbiw	r24, 0x01	; 1
    131e:	f1 f7       	brne	.-4      	; 0x131c <EXINT1+0x106>
    1320:	9a 8b       	std	Y+18, r25	; 0x12
    1322:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1324:	8b 89       	ldd	r24, Y+19	; 0x13
    1326:	9c 89       	ldd	r25, Y+20	; 0x14
    1328:	01 97       	sbiw	r24, 0x01	; 1
    132a:	9c 8b       	std	Y+20, r25	; 0x14
    132c:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    132e:	8b 89       	ldd	r24, Y+19	; 0x13
    1330:	9c 89       	ldd	r25, Y+20	; 0x14
    1332:	00 97       	sbiw	r24, 0x00	; 0
    1334:	69 f7       	brne	.-38     	; 0x1310 <EXINT1+0xfa>
    1336:	14 c0       	rjmp	.+40     	; 0x1360 <EXINT1+0x14a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1338:	6d 89       	ldd	r22, Y+21	; 0x15
    133a:	7e 89       	ldd	r23, Y+22	; 0x16
    133c:	8f 89       	ldd	r24, Y+23	; 0x17
    133e:	98 8d       	ldd	r25, Y+24	; 0x18
    1340:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1344:	dc 01       	movw	r26, r24
    1346:	cb 01       	movw	r24, r22
    1348:	9c 8b       	std	Y+20, r25	; 0x14
    134a:	8b 8b       	std	Y+19, r24	; 0x13
    134c:	8b 89       	ldd	r24, Y+19	; 0x13
    134e:	9c 89       	ldd	r25, Y+20	; 0x14
    1350:	98 8b       	std	Y+16, r25	; 0x10
    1352:	8f 87       	std	Y+15, r24	; 0x0f
    1354:	8f 85       	ldd	r24, Y+15	; 0x0f
    1356:	98 89       	ldd	r25, Y+16	; 0x10
    1358:	01 97       	sbiw	r24, 0x01	; 1
    135a:	f1 f7       	brne	.-4      	; 0x1358 <EXINT1+0x142>
    135c:	98 8b       	std	Y+16, r25	; 0x10
    135e:	8f 87       	std	Y+15, r24	; 0x0f
				_delay_ms(80);
				LCD_MOVE_CURSOR(2,ball_Column);
    1360:	90 91 96 00 	lds	r25, 0x0096
    1364:	82 e0       	ldi	r24, 0x02	; 2
    1366:	69 2f       	mov	r22, r25
    1368:	0e 94 f0 15 	call	0x2be0	; 0x2be0 <LCD_MOVE_CURSOR>
				LCD_enuDisplayChar(' ');
    136c:	80 e2       	ldi	r24, 0x20	; 32
    136e:	0e 94 80 12 	call	0x2500	; 0x2500 <LCD_enuDisplayChar>
		{
	score2++;
	LCD_MOVE_CURSOR(1,12);
	LCD_enuDisplayString("P2:");
	LCD_enuDisplayIntegerNum(score2);
	for( ball_Column=15; ball_Column>2; ball_Column--){
    1372:	80 91 96 00 	lds	r24, 0x0096
    1376:	81 50       	subi	r24, 0x01	; 1
    1378:	80 93 96 00 	sts	0x0096, r24
    137c:	80 91 96 00 	lds	r24, 0x0096
    1380:	83 30       	cpi	r24, 0x03	; 3
    1382:	08 f0       	brcs	.+2      	; 0x1386 <EXINT1+0x170>
    1384:	72 cf       	rjmp	.-284    	; 0x126a <EXINT1+0x54>
				LCD_enuDisplayChar('O');
				_delay_ms(80);
				LCD_MOVE_CURSOR(2,ball_Column);
				LCD_enuDisplayChar(' ');
	}
	LCD_MOVE_CURSOR(2,ball_Column);
    1386:	90 91 96 00 	lds	r25, 0x0096
    138a:	82 e0       	ldi	r24, 0x02	; 2
    138c:	69 2f       	mov	r22, r25
    138e:	0e 94 f0 15 	call	0x2be0	; 0x2be0 <LCD_MOVE_CURSOR>
	LCD_enuDisplayChar('O');
    1392:	8f e4       	ldi	r24, 0x4F	; 79
    1394:	0e 94 80 12 	call	0x2500	; 0x2500 <LCD_enuDisplayChar>
    1398:	80 e0       	ldi	r24, 0x00	; 0
    139a:	90 e0       	ldi	r25, 0x00	; 0
    139c:	aa ef       	ldi	r26, 0xFA	; 250
    139e:	b3 e4       	ldi	r27, 0x43	; 67
    13a0:	8b 87       	std	Y+11, r24	; 0x0b
    13a2:	9c 87       	std	Y+12, r25	; 0x0c
    13a4:	ad 87       	std	Y+13, r26	; 0x0d
    13a6:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    13a8:	6b 85       	ldd	r22, Y+11	; 0x0b
    13aa:	7c 85       	ldd	r23, Y+12	; 0x0c
    13ac:	8d 85       	ldd	r24, Y+13	; 0x0d
    13ae:	9e 85       	ldd	r25, Y+14	; 0x0e
    13b0:	20 e0       	ldi	r18, 0x00	; 0
    13b2:	30 e0       	ldi	r19, 0x00	; 0
    13b4:	4a e7       	ldi	r20, 0x7A	; 122
    13b6:	53 e4       	ldi	r21, 0x43	; 67
    13b8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    13bc:	dc 01       	movw	r26, r24
    13be:	cb 01       	movw	r24, r22
    13c0:	8f 83       	std	Y+7, r24	; 0x07
    13c2:	98 87       	std	Y+8, r25	; 0x08
    13c4:	a9 87       	std	Y+9, r26	; 0x09
    13c6:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    13c8:	6f 81       	ldd	r22, Y+7	; 0x07
    13ca:	78 85       	ldd	r23, Y+8	; 0x08
    13cc:	89 85       	ldd	r24, Y+9	; 0x09
    13ce:	9a 85       	ldd	r25, Y+10	; 0x0a
    13d0:	20 e0       	ldi	r18, 0x00	; 0
    13d2:	30 e0       	ldi	r19, 0x00	; 0
    13d4:	40 e8       	ldi	r20, 0x80	; 128
    13d6:	5f e3       	ldi	r21, 0x3F	; 63
    13d8:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    13dc:	88 23       	and	r24, r24
    13de:	2c f4       	brge	.+10     	; 0x13ea <EXINT1+0x1d4>
		__ticks = 1;
    13e0:	81 e0       	ldi	r24, 0x01	; 1
    13e2:	90 e0       	ldi	r25, 0x00	; 0
    13e4:	9e 83       	std	Y+6, r25	; 0x06
    13e6:	8d 83       	std	Y+5, r24	; 0x05
    13e8:	3f c0       	rjmp	.+126    	; 0x1468 <EXINT1+0x252>
	else if (__tmp > 65535)
    13ea:	6f 81       	ldd	r22, Y+7	; 0x07
    13ec:	78 85       	ldd	r23, Y+8	; 0x08
    13ee:	89 85       	ldd	r24, Y+9	; 0x09
    13f0:	9a 85       	ldd	r25, Y+10	; 0x0a
    13f2:	20 e0       	ldi	r18, 0x00	; 0
    13f4:	3f ef       	ldi	r19, 0xFF	; 255
    13f6:	4f e7       	ldi	r20, 0x7F	; 127
    13f8:	57 e4       	ldi	r21, 0x47	; 71
    13fa:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    13fe:	18 16       	cp	r1, r24
    1400:	4c f5       	brge	.+82     	; 0x1454 <EXINT1+0x23e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1402:	6b 85       	ldd	r22, Y+11	; 0x0b
    1404:	7c 85       	ldd	r23, Y+12	; 0x0c
    1406:	8d 85       	ldd	r24, Y+13	; 0x0d
    1408:	9e 85       	ldd	r25, Y+14	; 0x0e
    140a:	20 e0       	ldi	r18, 0x00	; 0
    140c:	30 e0       	ldi	r19, 0x00	; 0
    140e:	40 e2       	ldi	r20, 0x20	; 32
    1410:	51 e4       	ldi	r21, 0x41	; 65
    1412:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1416:	dc 01       	movw	r26, r24
    1418:	cb 01       	movw	r24, r22
    141a:	bc 01       	movw	r22, r24
    141c:	cd 01       	movw	r24, r26
    141e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1422:	dc 01       	movw	r26, r24
    1424:	cb 01       	movw	r24, r22
    1426:	9e 83       	std	Y+6, r25	; 0x06
    1428:	8d 83       	std	Y+5, r24	; 0x05
    142a:	0f c0       	rjmp	.+30     	; 0x144a <EXINT1+0x234>
    142c:	89 e1       	ldi	r24, 0x19	; 25
    142e:	90 e0       	ldi	r25, 0x00	; 0
    1430:	9c 83       	std	Y+4, r25	; 0x04
    1432:	8b 83       	std	Y+3, r24	; 0x03
    1434:	8b 81       	ldd	r24, Y+3	; 0x03
    1436:	9c 81       	ldd	r25, Y+4	; 0x04
    1438:	01 97       	sbiw	r24, 0x01	; 1
    143a:	f1 f7       	brne	.-4      	; 0x1438 <EXINT1+0x222>
    143c:	9c 83       	std	Y+4, r25	; 0x04
    143e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1440:	8d 81       	ldd	r24, Y+5	; 0x05
    1442:	9e 81       	ldd	r25, Y+6	; 0x06
    1444:	01 97       	sbiw	r24, 0x01	; 1
    1446:	9e 83       	std	Y+6, r25	; 0x06
    1448:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    144a:	8d 81       	ldd	r24, Y+5	; 0x05
    144c:	9e 81       	ldd	r25, Y+6	; 0x06
    144e:	00 97       	sbiw	r24, 0x00	; 0
    1450:	69 f7       	brne	.-38     	; 0x142c <EXINT1+0x216>
    1452:	14 c0       	rjmp	.+40     	; 0x147c <EXINT1+0x266>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1454:	6f 81       	ldd	r22, Y+7	; 0x07
    1456:	78 85       	ldd	r23, Y+8	; 0x08
    1458:	89 85       	ldd	r24, Y+9	; 0x09
    145a:	9a 85       	ldd	r25, Y+10	; 0x0a
    145c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1460:	dc 01       	movw	r26, r24
    1462:	cb 01       	movw	r24, r22
    1464:	9e 83       	std	Y+6, r25	; 0x06
    1466:	8d 83       	std	Y+5, r24	; 0x05
    1468:	8d 81       	ldd	r24, Y+5	; 0x05
    146a:	9e 81       	ldd	r25, Y+6	; 0x06
    146c:	9a 83       	std	Y+2, r25	; 0x02
    146e:	89 83       	std	Y+1, r24	; 0x01
    1470:	89 81       	ldd	r24, Y+1	; 0x01
    1472:	9a 81       	ldd	r25, Y+2	; 0x02
    1474:	01 97       	sbiw	r24, 0x01	; 1
    1476:	f1 f7       	brne	.-4      	; 0x1474 <EXINT1+0x25e>
    1478:	9a 83       	std	Y+2, r25	; 0x02
    147a:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(500);
		}

}
    147c:	6c 96       	adiw	r28, 0x1c	; 28
    147e:	0f b6       	in	r0, 0x3f	; 63
    1480:	f8 94       	cli
    1482:	de bf       	out	0x3e, r29	; 62
    1484:	0f be       	out	0x3f, r0	; 63
    1486:	cd bf       	out	0x3d, r28	; 61
    1488:	cf 91       	pop	r28
    148a:	df 91       	pop	r29
    148c:	08 95       	ret

0000148e <DIO_enuInit>:

#include "DIO_priv.h"
#include "DIO_config.h"

ES_t DIO_enuInit(void)
{
    148e:	df 93       	push	r29
    1490:	cf 93       	push	r28
    1492:	0f 92       	push	r0
    1494:	cd b7       	in	r28, 0x3d	; 61
    1496:	de b7       	in	r29, 0x3e	; 62
	ES_t Local_enuErrorstate = ES_NOK;
    1498:	19 82       	std	Y+1, r1	; 0x01

	DDRA = CONC(PA_PIN7_DIR,PA_PIN6_DIR,PA_PIN5_DIR,PA_PIN4_DIR,PA_PIN3_DIR,PA_PIN2_DIR,PA_PIN1_DIR,PA_PIN0_DIR);
    149a:	ea e3       	ldi	r30, 0x3A	; 58
    149c:	f0 e0       	ldi	r31, 0x00	; 0
    149e:	8f ef       	ldi	r24, 0xFF	; 255
    14a0:	80 83       	st	Z, r24
	DDRB = CONC(PB_PIN7_DIR,PB_PIN6_DIR,PB_PIN5_DIR,PB_PIN4_DIR,PB_PIN3_DIR,PB_PIN2_DIR,PB_PIN1_DIR,PB_PIN0_DIR);
    14a2:	e7 e3       	ldi	r30, 0x37	; 55
    14a4:	f0 e0       	ldi	r31, 0x00	; 0
    14a6:	8f ef       	ldi	r24, 0xFF	; 255
    14a8:	80 83       	st	Z, r24
	DDRC = CONC(PC_PIN7_DIR,PC_PIN6_DIR,PC_PIN5_DIR,PC_PIN4_DIR,PC_PIN3_DIR,PC_PIN2_DIR,PC_PIN1_DIR,PC_PIN0_DIR);
    14aa:	e4 e3       	ldi	r30, 0x34	; 52
    14ac:	f0 e0       	ldi	r31, 0x00	; 0
    14ae:	86 e9       	ldi	r24, 0x96	; 150
    14b0:	80 83       	st	Z, r24
	DDRD = CONC(PD_PIN7_DIR,PD_PIN6_DIR,PD_PIN5_DIR,PD_PIN4_DIR,PD_PIN3_DIR,PD_PIN2_DIR,PD_PIN1_DIR,PD_PIN0_DIR);
    14b2:	e1 e3       	ldi	r30, 0x31	; 49
    14b4:	f0 e0       	ldi	r31, 0x00	; 0
    14b6:	86 e9       	ldi	r24, 0x96	; 150
    14b8:	80 83       	st	Z, r24

	PORTA =CONC(PA_PIN7_VAL,PA_PIN6_VAL,PA_PIN5_VAL,PA_PIN4_VAL,PA_PIN3_VAL,PA_PIN2_VAL,PA_PIN1_VAL,PA_PIN0_VAL);
    14ba:	eb e3       	ldi	r30, 0x3B	; 59
    14bc:	f0 e0       	ldi	r31, 0x00	; 0
    14be:	10 82       	st	Z, r1

	Local_enuErrorstate = ES_OK;
    14c0:	81 e0       	ldi	r24, 0x01	; 1
    14c2:	89 83       	std	Y+1, r24	; 0x01

	return Local_enuErrorstate;
    14c4:	89 81       	ldd	r24, Y+1	; 0x01
}
    14c6:	0f 90       	pop	r0
    14c8:	cf 91       	pop	r28
    14ca:	df 91       	pop	r29
    14cc:	08 95       	ret

000014ce <DIO_enuSetPortDirection>:

ES_t DIO_enuSetPortDirection(u8 Copy_u8PortID , u8 Copy_u8Value)
{
    14ce:	df 93       	push	r29
    14d0:	cf 93       	push	r28
    14d2:	00 d0       	rcall	.+0      	; 0x14d4 <DIO_enuSetPortDirection+0x6>
    14d4:	00 d0       	rcall	.+0      	; 0x14d6 <DIO_enuSetPortDirection+0x8>
    14d6:	0f 92       	push	r0
    14d8:	cd b7       	in	r28, 0x3d	; 61
    14da:	de b7       	in	r29, 0x3e	; 62
    14dc:	8a 83       	std	Y+2, r24	; 0x02
    14de:	6b 83       	std	Y+3, r22	; 0x03
	ES_t Local_enuErrorstate = ES_NOK;
    14e0:	19 82       	std	Y+1, r1	; 0x01

	if (Copy_u8PortID <= DIO_PORTD)
    14e2:	8a 81       	ldd	r24, Y+2	; 0x02
    14e4:	84 30       	cpi	r24, 0x04	; 4
    14e6:	a8 f5       	brcc	.+106    	; 0x1552 <DIO_enuSetPortDirection+0x84>
	{
		switch (Copy_u8PortID)
    14e8:	8a 81       	ldd	r24, Y+2	; 0x02
    14ea:	28 2f       	mov	r18, r24
    14ec:	30 e0       	ldi	r19, 0x00	; 0
    14ee:	3d 83       	std	Y+5, r19	; 0x05
    14f0:	2c 83       	std	Y+4, r18	; 0x04
    14f2:	8c 81       	ldd	r24, Y+4	; 0x04
    14f4:	9d 81       	ldd	r25, Y+5	; 0x05
    14f6:	81 30       	cpi	r24, 0x01	; 1
    14f8:	91 05       	cpc	r25, r1
    14fa:	d1 f0       	breq	.+52     	; 0x1530 <DIO_enuSetPortDirection+0x62>
    14fc:	2c 81       	ldd	r18, Y+4	; 0x04
    14fe:	3d 81       	ldd	r19, Y+5	; 0x05
    1500:	22 30       	cpi	r18, 0x02	; 2
    1502:	31 05       	cpc	r19, r1
    1504:	2c f4       	brge	.+10     	; 0x1510 <DIO_enuSetPortDirection+0x42>
    1506:	8c 81       	ldd	r24, Y+4	; 0x04
    1508:	9d 81       	ldd	r25, Y+5	; 0x05
    150a:	00 97       	sbiw	r24, 0x00	; 0
    150c:	61 f0       	breq	.+24     	; 0x1526 <DIO_enuSetPortDirection+0x58>
    150e:	1e c0       	rjmp	.+60     	; 0x154c <DIO_enuSetPortDirection+0x7e>
    1510:	2c 81       	ldd	r18, Y+4	; 0x04
    1512:	3d 81       	ldd	r19, Y+5	; 0x05
    1514:	22 30       	cpi	r18, 0x02	; 2
    1516:	31 05       	cpc	r19, r1
    1518:	81 f0       	breq	.+32     	; 0x153a <DIO_enuSetPortDirection+0x6c>
    151a:	8c 81       	ldd	r24, Y+4	; 0x04
    151c:	9d 81       	ldd	r25, Y+5	; 0x05
    151e:	83 30       	cpi	r24, 0x03	; 3
    1520:	91 05       	cpc	r25, r1
    1522:	81 f0       	breq	.+32     	; 0x1544 <DIO_enuSetPortDirection+0x76>
    1524:	13 c0       	rjmp	.+38     	; 0x154c <DIO_enuSetPortDirection+0x7e>
		{
		case DIO_PORTA:
			DDRA = Copy_u8Value;
    1526:	ea e3       	ldi	r30, 0x3A	; 58
    1528:	f0 e0       	ldi	r31, 0x00	; 0
    152a:	8b 81       	ldd	r24, Y+3	; 0x03
    152c:	80 83       	st	Z, r24
    152e:	0e c0       	rjmp	.+28     	; 0x154c <DIO_enuSetPortDirection+0x7e>
			break;
		case DIO_PORTB:
			DDRB = Copy_u8Value;
    1530:	e7 e3       	ldi	r30, 0x37	; 55
    1532:	f0 e0       	ldi	r31, 0x00	; 0
    1534:	8b 81       	ldd	r24, Y+3	; 0x03
    1536:	80 83       	st	Z, r24
    1538:	09 c0       	rjmp	.+18     	; 0x154c <DIO_enuSetPortDirection+0x7e>
			break;
		case DIO_PORTC:
			DDRC = Copy_u8Value;
    153a:	e4 e3       	ldi	r30, 0x34	; 52
    153c:	f0 e0       	ldi	r31, 0x00	; 0
    153e:	8b 81       	ldd	r24, Y+3	; 0x03
    1540:	80 83       	st	Z, r24
    1542:	04 c0       	rjmp	.+8      	; 0x154c <DIO_enuSetPortDirection+0x7e>
			break;
		case DIO_PORTD:
			DDRD = Copy_u8Value;
    1544:	e1 e3       	ldi	r30, 0x31	; 49
    1546:	f0 e0       	ldi	r31, 0x00	; 0
    1548:	8b 81       	ldd	r24, Y+3	; 0x03
    154a:	80 83       	st	Z, r24
			break;
		}
		Local_enuErrorstate = ES_OK;
    154c:	81 e0       	ldi	r24, 0x01	; 1
    154e:	89 83       	std	Y+1, r24	; 0x01
    1550:	02 c0       	rjmp	.+4      	; 0x1556 <DIO_enuSetPortDirection+0x88>
	}
	else
	{
		Local_enuErrorstate = ES_OUT_OF_RANGE;
    1552:	83 e0       	ldi	r24, 0x03	; 3
    1554:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_enuErrorstate;
    1556:	89 81       	ldd	r24, Y+1	; 0x01
}
    1558:	0f 90       	pop	r0
    155a:	0f 90       	pop	r0
    155c:	0f 90       	pop	r0
    155e:	0f 90       	pop	r0
    1560:	0f 90       	pop	r0
    1562:	cf 91       	pop	r28
    1564:	df 91       	pop	r29
    1566:	08 95       	ret

00001568 <DIO_enuSetPortValue>:

ES_t DIO_enuSetPortValue(u8 Copy_u8PortID , u8 Copy_u8Value)
{
    1568:	df 93       	push	r29
    156a:	cf 93       	push	r28
    156c:	00 d0       	rcall	.+0      	; 0x156e <DIO_enuSetPortValue+0x6>
    156e:	00 d0       	rcall	.+0      	; 0x1570 <DIO_enuSetPortValue+0x8>
    1570:	0f 92       	push	r0
    1572:	cd b7       	in	r28, 0x3d	; 61
    1574:	de b7       	in	r29, 0x3e	; 62
    1576:	8a 83       	std	Y+2, r24	; 0x02
    1578:	6b 83       	std	Y+3, r22	; 0x03
	ES_t Local_enuErrorstate = ES_NOK;
    157a:	19 82       	std	Y+1, r1	; 0x01

	if (Copy_u8PortID <= DIO_PORTD)
    157c:	8a 81       	ldd	r24, Y+2	; 0x02
    157e:	84 30       	cpi	r24, 0x04	; 4
    1580:	a8 f5       	brcc	.+106    	; 0x15ec <DIO_enuSetPortValue+0x84>
	{
		switch (Copy_u8PortID)
    1582:	8a 81       	ldd	r24, Y+2	; 0x02
    1584:	28 2f       	mov	r18, r24
    1586:	30 e0       	ldi	r19, 0x00	; 0
    1588:	3d 83       	std	Y+5, r19	; 0x05
    158a:	2c 83       	std	Y+4, r18	; 0x04
    158c:	8c 81       	ldd	r24, Y+4	; 0x04
    158e:	9d 81       	ldd	r25, Y+5	; 0x05
    1590:	81 30       	cpi	r24, 0x01	; 1
    1592:	91 05       	cpc	r25, r1
    1594:	d1 f0       	breq	.+52     	; 0x15ca <DIO_enuSetPortValue+0x62>
    1596:	2c 81       	ldd	r18, Y+4	; 0x04
    1598:	3d 81       	ldd	r19, Y+5	; 0x05
    159a:	22 30       	cpi	r18, 0x02	; 2
    159c:	31 05       	cpc	r19, r1
    159e:	2c f4       	brge	.+10     	; 0x15aa <DIO_enuSetPortValue+0x42>
    15a0:	8c 81       	ldd	r24, Y+4	; 0x04
    15a2:	9d 81       	ldd	r25, Y+5	; 0x05
    15a4:	00 97       	sbiw	r24, 0x00	; 0
    15a6:	61 f0       	breq	.+24     	; 0x15c0 <DIO_enuSetPortValue+0x58>
    15a8:	1e c0       	rjmp	.+60     	; 0x15e6 <DIO_enuSetPortValue+0x7e>
    15aa:	2c 81       	ldd	r18, Y+4	; 0x04
    15ac:	3d 81       	ldd	r19, Y+5	; 0x05
    15ae:	22 30       	cpi	r18, 0x02	; 2
    15b0:	31 05       	cpc	r19, r1
    15b2:	81 f0       	breq	.+32     	; 0x15d4 <DIO_enuSetPortValue+0x6c>
    15b4:	8c 81       	ldd	r24, Y+4	; 0x04
    15b6:	9d 81       	ldd	r25, Y+5	; 0x05
    15b8:	83 30       	cpi	r24, 0x03	; 3
    15ba:	91 05       	cpc	r25, r1
    15bc:	81 f0       	breq	.+32     	; 0x15de <DIO_enuSetPortValue+0x76>
    15be:	13 c0       	rjmp	.+38     	; 0x15e6 <DIO_enuSetPortValue+0x7e>
		{
		case DIO_PORTA:
			PORTA = Copy_u8Value;
    15c0:	eb e3       	ldi	r30, 0x3B	; 59
    15c2:	f0 e0       	ldi	r31, 0x00	; 0
    15c4:	8b 81       	ldd	r24, Y+3	; 0x03
    15c6:	80 83       	st	Z, r24
    15c8:	0e c0       	rjmp	.+28     	; 0x15e6 <DIO_enuSetPortValue+0x7e>
			break;
		case DIO_PORTB:
			PORTB = Copy_u8Value;
    15ca:	e8 e3       	ldi	r30, 0x38	; 56
    15cc:	f0 e0       	ldi	r31, 0x00	; 0
    15ce:	8b 81       	ldd	r24, Y+3	; 0x03
    15d0:	80 83       	st	Z, r24
    15d2:	09 c0       	rjmp	.+18     	; 0x15e6 <DIO_enuSetPortValue+0x7e>
			break;
		case DIO_PORTC:
			PORTC = Copy_u8Value;
    15d4:	e5 e3       	ldi	r30, 0x35	; 53
    15d6:	f0 e0       	ldi	r31, 0x00	; 0
    15d8:	8b 81       	ldd	r24, Y+3	; 0x03
    15da:	80 83       	st	Z, r24
    15dc:	04 c0       	rjmp	.+8      	; 0x15e6 <DIO_enuSetPortValue+0x7e>
			break;
		case DIO_PORTD:
			PORTD = Copy_u8Value;
    15de:	e2 e3       	ldi	r30, 0x32	; 50
    15e0:	f0 e0       	ldi	r31, 0x00	; 0
    15e2:	8b 81       	ldd	r24, Y+3	; 0x03
    15e4:	80 83       	st	Z, r24
			break;
		}
		Local_enuErrorstate = ES_OK;
    15e6:	81 e0       	ldi	r24, 0x01	; 1
    15e8:	89 83       	std	Y+1, r24	; 0x01
    15ea:	02 c0       	rjmp	.+4      	; 0x15f0 <DIO_enuSetPortValue+0x88>
	}
	else
	{
		Local_enuErrorstate = ES_OUT_OF_RANGE;
    15ec:	83 e0       	ldi	r24, 0x03	; 3
    15ee:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_enuErrorstate;
    15f0:	89 81       	ldd	r24, Y+1	; 0x01
}
    15f2:	0f 90       	pop	r0
    15f4:	0f 90       	pop	r0
    15f6:	0f 90       	pop	r0
    15f8:	0f 90       	pop	r0
    15fa:	0f 90       	pop	r0
    15fc:	cf 91       	pop	r28
    15fe:	df 91       	pop	r29
    1600:	08 95       	ret

00001602 <DIO_enuTogPortValue>:

ES_t DIO_enuTogPortValue(u8 Copy_u8PortID)
{
    1602:	df 93       	push	r29
    1604:	cf 93       	push	r28
    1606:	00 d0       	rcall	.+0      	; 0x1608 <DIO_enuTogPortValue+0x6>
    1608:	00 d0       	rcall	.+0      	; 0x160a <DIO_enuTogPortValue+0x8>
    160a:	cd b7       	in	r28, 0x3d	; 61
    160c:	de b7       	in	r29, 0x3e	; 62
    160e:	8a 83       	std	Y+2, r24	; 0x02
	ES_t Local_enuErrorstate = ES_NOK;
    1610:	19 82       	std	Y+1, r1	; 0x01

	if (Copy_u8PortID <= DIO_PORTD)
    1612:	8a 81       	ldd	r24, Y+2	; 0x02
    1614:	84 30       	cpi	r24, 0x04	; 4
    1616:	08 f0       	brcs	.+2      	; 0x161a <DIO_enuTogPortValue+0x18>
    1618:	41 c0       	rjmp	.+130    	; 0x169c <DIO_enuTogPortValue+0x9a>
	{
		switch (Copy_u8PortID)
    161a:	8a 81       	ldd	r24, Y+2	; 0x02
    161c:	28 2f       	mov	r18, r24
    161e:	30 e0       	ldi	r19, 0x00	; 0
    1620:	3c 83       	std	Y+4, r19	; 0x04
    1622:	2b 83       	std	Y+3, r18	; 0x03
    1624:	8b 81       	ldd	r24, Y+3	; 0x03
    1626:	9c 81       	ldd	r25, Y+4	; 0x04
    1628:	81 30       	cpi	r24, 0x01	; 1
    162a:	91 05       	cpc	r25, r1
    162c:	e9 f0       	breq	.+58     	; 0x1668 <DIO_enuTogPortValue+0x66>
    162e:	2b 81       	ldd	r18, Y+3	; 0x03
    1630:	3c 81       	ldd	r19, Y+4	; 0x04
    1632:	22 30       	cpi	r18, 0x02	; 2
    1634:	31 05       	cpc	r19, r1
    1636:	2c f4       	brge	.+10     	; 0x1642 <DIO_enuTogPortValue+0x40>
    1638:	8b 81       	ldd	r24, Y+3	; 0x03
    163a:	9c 81       	ldd	r25, Y+4	; 0x04
    163c:	00 97       	sbiw	r24, 0x00	; 0
    163e:	61 f0       	breq	.+24     	; 0x1658 <DIO_enuTogPortValue+0x56>
    1640:	2a c0       	rjmp	.+84     	; 0x1696 <DIO_enuTogPortValue+0x94>
    1642:	2b 81       	ldd	r18, Y+3	; 0x03
    1644:	3c 81       	ldd	r19, Y+4	; 0x04
    1646:	22 30       	cpi	r18, 0x02	; 2
    1648:	31 05       	cpc	r19, r1
    164a:	b1 f0       	breq	.+44     	; 0x1678 <DIO_enuTogPortValue+0x76>
    164c:	8b 81       	ldd	r24, Y+3	; 0x03
    164e:	9c 81       	ldd	r25, Y+4	; 0x04
    1650:	83 30       	cpi	r24, 0x03	; 3
    1652:	91 05       	cpc	r25, r1
    1654:	c9 f0       	breq	.+50     	; 0x1688 <DIO_enuTogPortValue+0x86>
    1656:	1f c0       	rjmp	.+62     	; 0x1696 <DIO_enuTogPortValue+0x94>
		{
		case DIO_PORTA:
			PORTA = ~PORTA;
    1658:	ab e3       	ldi	r26, 0x3B	; 59
    165a:	b0 e0       	ldi	r27, 0x00	; 0
    165c:	eb e3       	ldi	r30, 0x3B	; 59
    165e:	f0 e0       	ldi	r31, 0x00	; 0
    1660:	80 81       	ld	r24, Z
    1662:	80 95       	com	r24
    1664:	8c 93       	st	X, r24
    1666:	17 c0       	rjmp	.+46     	; 0x1696 <DIO_enuTogPortValue+0x94>
			break;
		case DIO_PORTB:
			PORTB = ~PORTB;
    1668:	a8 e3       	ldi	r26, 0x38	; 56
    166a:	b0 e0       	ldi	r27, 0x00	; 0
    166c:	e8 e3       	ldi	r30, 0x38	; 56
    166e:	f0 e0       	ldi	r31, 0x00	; 0
    1670:	80 81       	ld	r24, Z
    1672:	80 95       	com	r24
    1674:	8c 93       	st	X, r24
    1676:	0f c0       	rjmp	.+30     	; 0x1696 <DIO_enuTogPortValue+0x94>
			break;
		case DIO_PORTC:
			PORTC = ~PORTC;
    1678:	a5 e3       	ldi	r26, 0x35	; 53
    167a:	b0 e0       	ldi	r27, 0x00	; 0
    167c:	e5 e3       	ldi	r30, 0x35	; 53
    167e:	f0 e0       	ldi	r31, 0x00	; 0
    1680:	80 81       	ld	r24, Z
    1682:	80 95       	com	r24
    1684:	8c 93       	st	X, r24
    1686:	07 c0       	rjmp	.+14     	; 0x1696 <DIO_enuTogPortValue+0x94>
			break;
		case DIO_PORTD:
			PORTD = ~PORTD;
    1688:	a2 e3       	ldi	r26, 0x32	; 50
    168a:	b0 e0       	ldi	r27, 0x00	; 0
    168c:	e2 e3       	ldi	r30, 0x32	; 50
    168e:	f0 e0       	ldi	r31, 0x00	; 0
    1690:	80 81       	ld	r24, Z
    1692:	80 95       	com	r24
    1694:	8c 93       	st	X, r24
			break;
		}
		Local_enuErrorstate = ES_OK;
    1696:	81 e0       	ldi	r24, 0x01	; 1
    1698:	89 83       	std	Y+1, r24	; 0x01
    169a:	02 c0       	rjmp	.+4      	; 0x16a0 <DIO_enuTogPortValue+0x9e>
	}
	else
	{
		Local_enuErrorstate = ES_OUT_OF_RANGE;
    169c:	83 e0       	ldi	r24, 0x03	; 3
    169e:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_enuErrorstate;
    16a0:	89 81       	ldd	r24, Y+1	; 0x01
}
    16a2:	0f 90       	pop	r0
    16a4:	0f 90       	pop	r0
    16a6:	0f 90       	pop	r0
    16a8:	0f 90       	pop	r0
    16aa:	cf 91       	pop	r28
    16ac:	df 91       	pop	r29
    16ae:	08 95       	ret

000016b0 <DIO_enuGetPortValue>:

ES_t DIO_enuGetPortValue(u8 Copy_u8PortID , u8 * Copy_pu8Value)
{
    16b0:	df 93       	push	r29
    16b2:	cf 93       	push	r28
    16b4:	00 d0       	rcall	.+0      	; 0x16b6 <DIO_enuGetPortValue+0x6>
    16b6:	00 d0       	rcall	.+0      	; 0x16b8 <DIO_enuGetPortValue+0x8>
    16b8:	00 d0       	rcall	.+0      	; 0x16ba <DIO_enuGetPortValue+0xa>
    16ba:	cd b7       	in	r28, 0x3d	; 61
    16bc:	de b7       	in	r29, 0x3e	; 62
    16be:	8a 83       	std	Y+2, r24	; 0x02
    16c0:	7c 83       	std	Y+4, r23	; 0x04
    16c2:	6b 83       	std	Y+3, r22	; 0x03
	ES_t Local_enuErrorstate = ES_NOK;
    16c4:	19 82       	std	Y+1, r1	; 0x01

	if (Copy_pu8Value != NULL)
    16c6:	8b 81       	ldd	r24, Y+3	; 0x03
    16c8:	9c 81       	ldd	r25, Y+4	; 0x04
    16ca:	00 97       	sbiw	r24, 0x00	; 0
    16cc:	09 f4       	brne	.+2      	; 0x16d0 <DIO_enuGetPortValue+0x20>
    16ce:	43 c0       	rjmp	.+134    	; 0x1756 <DIO_enuGetPortValue+0xa6>
	{
		if (Copy_u8PortID <= DIO_PORTD)
    16d0:	8a 81       	ldd	r24, Y+2	; 0x02
    16d2:	84 30       	cpi	r24, 0x04	; 4
    16d4:	e8 f5       	brcc	.+122    	; 0x1750 <DIO_enuGetPortValue+0xa0>
		{
			switch (Copy_u8PortID)
    16d6:	8a 81       	ldd	r24, Y+2	; 0x02
    16d8:	28 2f       	mov	r18, r24
    16da:	30 e0       	ldi	r19, 0x00	; 0
    16dc:	3e 83       	std	Y+6, r19	; 0x06
    16de:	2d 83       	std	Y+5, r18	; 0x05
    16e0:	8d 81       	ldd	r24, Y+5	; 0x05
    16e2:	9e 81       	ldd	r25, Y+6	; 0x06
    16e4:	81 30       	cpi	r24, 0x01	; 1
    16e6:	91 05       	cpc	r25, r1
    16e8:	e1 f0       	breq	.+56     	; 0x1722 <DIO_enuGetPortValue+0x72>
    16ea:	2d 81       	ldd	r18, Y+5	; 0x05
    16ec:	3e 81       	ldd	r19, Y+6	; 0x06
    16ee:	22 30       	cpi	r18, 0x02	; 2
    16f0:	31 05       	cpc	r19, r1
    16f2:	2c f4       	brge	.+10     	; 0x16fe <DIO_enuGetPortValue+0x4e>
    16f4:	8d 81       	ldd	r24, Y+5	; 0x05
    16f6:	9e 81       	ldd	r25, Y+6	; 0x06
    16f8:	00 97       	sbiw	r24, 0x00	; 0
    16fa:	61 f0       	breq	.+24     	; 0x1714 <DIO_enuGetPortValue+0x64>
    16fc:	26 c0       	rjmp	.+76     	; 0x174a <DIO_enuGetPortValue+0x9a>
    16fe:	2d 81       	ldd	r18, Y+5	; 0x05
    1700:	3e 81       	ldd	r19, Y+6	; 0x06
    1702:	22 30       	cpi	r18, 0x02	; 2
    1704:	31 05       	cpc	r19, r1
    1706:	a1 f0       	breq	.+40     	; 0x1730 <DIO_enuGetPortValue+0x80>
    1708:	8d 81       	ldd	r24, Y+5	; 0x05
    170a:	9e 81       	ldd	r25, Y+6	; 0x06
    170c:	83 30       	cpi	r24, 0x03	; 3
    170e:	91 05       	cpc	r25, r1
    1710:	b1 f0       	breq	.+44     	; 0x173e <DIO_enuGetPortValue+0x8e>
    1712:	1b c0       	rjmp	.+54     	; 0x174a <DIO_enuGetPortValue+0x9a>
			{
			case DIO_PORTA:
				*Copy_pu8Value = PINA;
    1714:	e9 e3       	ldi	r30, 0x39	; 57
    1716:	f0 e0       	ldi	r31, 0x00	; 0
    1718:	80 81       	ld	r24, Z
    171a:	eb 81       	ldd	r30, Y+3	; 0x03
    171c:	fc 81       	ldd	r31, Y+4	; 0x04
    171e:	80 83       	st	Z, r24
    1720:	14 c0       	rjmp	.+40     	; 0x174a <DIO_enuGetPortValue+0x9a>
				break;
			case DIO_PORTB:
				*Copy_pu8Value = PINB;
    1722:	e6 e3       	ldi	r30, 0x36	; 54
    1724:	f0 e0       	ldi	r31, 0x00	; 0
    1726:	80 81       	ld	r24, Z
    1728:	eb 81       	ldd	r30, Y+3	; 0x03
    172a:	fc 81       	ldd	r31, Y+4	; 0x04
    172c:	80 83       	st	Z, r24
    172e:	0d c0       	rjmp	.+26     	; 0x174a <DIO_enuGetPortValue+0x9a>
				break;
			case DIO_PORTC:
				*Copy_pu8Value = PINC;
    1730:	e3 e3       	ldi	r30, 0x33	; 51
    1732:	f0 e0       	ldi	r31, 0x00	; 0
    1734:	80 81       	ld	r24, Z
    1736:	eb 81       	ldd	r30, Y+3	; 0x03
    1738:	fc 81       	ldd	r31, Y+4	; 0x04
    173a:	80 83       	st	Z, r24
    173c:	06 c0       	rjmp	.+12     	; 0x174a <DIO_enuGetPortValue+0x9a>
				break;
			case DIO_PORTD:
				*Copy_pu8Value = PIND;
    173e:	e0 e3       	ldi	r30, 0x30	; 48
    1740:	f0 e0       	ldi	r31, 0x00	; 0
    1742:	80 81       	ld	r24, Z
    1744:	eb 81       	ldd	r30, Y+3	; 0x03
    1746:	fc 81       	ldd	r31, Y+4	; 0x04
    1748:	80 83       	st	Z, r24
				break;
			}
			Local_enuErrorstate = ES_OK;
    174a:	81 e0       	ldi	r24, 0x01	; 1
    174c:	89 83       	std	Y+1, r24	; 0x01
    174e:	05 c0       	rjmp	.+10     	; 0x175a <DIO_enuGetPortValue+0xaa>
		}
		else
		{
			Local_enuErrorstate = ES_OUT_OF_RANGE;
    1750:	83 e0       	ldi	r24, 0x03	; 3
    1752:	89 83       	std	Y+1, r24	; 0x01
    1754:	02 c0       	rjmp	.+4      	; 0x175a <DIO_enuGetPortValue+0xaa>
		}
	}
	else
	{
		Local_enuErrorstate = ES_NULL_POINTER;
    1756:	82 e0       	ldi	r24, 0x02	; 2
    1758:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_enuErrorstate;
    175a:	89 81       	ldd	r24, Y+1	; 0x01
}
    175c:	26 96       	adiw	r28, 0x06	; 6
    175e:	0f b6       	in	r0, 0x3f	; 63
    1760:	f8 94       	cli
    1762:	de bf       	out	0x3e, r29	; 62
    1764:	0f be       	out	0x3f, r0	; 63
    1766:	cd bf       	out	0x3d, r28	; 61
    1768:	cf 91       	pop	r28
    176a:	df 91       	pop	r29
    176c:	08 95       	ret

0000176e <DIO_enuSetPinDirection>:

ES_t DIO_enuSetPinDirection(u8 Copy_u8PortID ,u8 Copy_u8PinID , u8 Copy_u8Value)
{
    176e:	df 93       	push	r29
    1770:	cf 93       	push	r28
    1772:	00 d0       	rcall	.+0      	; 0x1774 <DIO_enuSetPinDirection+0x6>
    1774:	00 d0       	rcall	.+0      	; 0x1776 <DIO_enuSetPinDirection+0x8>
    1776:	00 d0       	rcall	.+0      	; 0x1778 <DIO_enuSetPinDirection+0xa>
    1778:	cd b7       	in	r28, 0x3d	; 61
    177a:	de b7       	in	r29, 0x3e	; 62
    177c:	8a 83       	std	Y+2, r24	; 0x02
    177e:	6b 83       	std	Y+3, r22	; 0x03
    1780:	4c 83       	std	Y+4, r20	; 0x04
	ES_t Local_enuErrorstate = ES_NOK;
    1782:	19 82       	std	Y+1, r1	; 0x01

	if (Copy_u8PortID <= DIO_PORTD &&
    1784:	8a 81       	ldd	r24, Y+2	; 0x02
    1786:	84 30       	cpi	r24, 0x04	; 4
    1788:	08 f0       	brcs	.+2      	; 0x178c <DIO_enuSetPinDirection+0x1e>
    178a:	d1 c0       	rjmp	.+418    	; 0x192e <DIO_enuSetPinDirection+0x1c0>
    178c:	8b 81       	ldd	r24, Y+3	; 0x03
    178e:	88 30       	cpi	r24, 0x08	; 8
    1790:	08 f0       	brcs	.+2      	; 0x1794 <DIO_enuSetPinDirection+0x26>
    1792:	cd c0       	rjmp	.+410    	; 0x192e <DIO_enuSetPinDirection+0x1c0>
    1794:	8c 81       	ldd	r24, Y+4	; 0x04
    1796:	82 30       	cpi	r24, 0x02	; 2
    1798:	08 f0       	brcs	.+2      	; 0x179c <DIO_enuSetPinDirection+0x2e>
    179a:	c9 c0       	rjmp	.+402    	; 0x192e <DIO_enuSetPinDirection+0x1c0>
			Copy_u8PinID <= DIO_PIN7 &&
			Copy_u8Value <= OUTPUT)
	{
		switch (Copy_u8PortID)
    179c:	8a 81       	ldd	r24, Y+2	; 0x02
    179e:	28 2f       	mov	r18, r24
    17a0:	30 e0       	ldi	r19, 0x00	; 0
    17a2:	3e 83       	std	Y+6, r19	; 0x06
    17a4:	2d 83       	std	Y+5, r18	; 0x05
    17a6:	6d 81       	ldd	r22, Y+5	; 0x05
    17a8:	7e 81       	ldd	r23, Y+6	; 0x06
    17aa:	61 30       	cpi	r22, 0x01	; 1
    17ac:	71 05       	cpc	r23, r1
    17ae:	09 f4       	brne	.+2      	; 0x17b2 <DIO_enuSetPinDirection+0x44>
    17b0:	41 c0       	rjmp	.+130    	; 0x1834 <DIO_enuSetPinDirection+0xc6>
    17b2:	8d 81       	ldd	r24, Y+5	; 0x05
    17b4:	9e 81       	ldd	r25, Y+6	; 0x06
    17b6:	82 30       	cpi	r24, 0x02	; 2
    17b8:	91 05       	cpc	r25, r1
    17ba:	34 f4       	brge	.+12     	; 0x17c8 <DIO_enuSetPinDirection+0x5a>
    17bc:	2d 81       	ldd	r18, Y+5	; 0x05
    17be:	3e 81       	ldd	r19, Y+6	; 0x06
    17c0:	21 15       	cp	r18, r1
    17c2:	31 05       	cpc	r19, r1
    17c4:	71 f0       	breq	.+28     	; 0x17e2 <DIO_enuSetPinDirection+0x74>
    17c6:	b0 c0       	rjmp	.+352    	; 0x1928 <DIO_enuSetPinDirection+0x1ba>
    17c8:	6d 81       	ldd	r22, Y+5	; 0x05
    17ca:	7e 81       	ldd	r23, Y+6	; 0x06
    17cc:	62 30       	cpi	r22, 0x02	; 2
    17ce:	71 05       	cpc	r23, r1
    17d0:	09 f4       	brne	.+2      	; 0x17d4 <DIO_enuSetPinDirection+0x66>
    17d2:	59 c0       	rjmp	.+178    	; 0x1886 <DIO_enuSetPinDirection+0x118>
    17d4:	8d 81       	ldd	r24, Y+5	; 0x05
    17d6:	9e 81       	ldd	r25, Y+6	; 0x06
    17d8:	83 30       	cpi	r24, 0x03	; 3
    17da:	91 05       	cpc	r25, r1
    17dc:	09 f4       	brne	.+2      	; 0x17e0 <DIO_enuSetPinDirection+0x72>
    17de:	7c c0       	rjmp	.+248    	; 0x18d8 <DIO_enuSetPinDirection+0x16a>
    17e0:	a3 c0       	rjmp	.+326    	; 0x1928 <DIO_enuSetPinDirection+0x1ba>
		{
		case DIO_PORTA:
			DDRA &= ~(DIO_MASK_BIT<<Copy_u8PinID);
    17e2:	aa e3       	ldi	r26, 0x3A	; 58
    17e4:	b0 e0       	ldi	r27, 0x00	; 0
    17e6:	ea e3       	ldi	r30, 0x3A	; 58
    17e8:	f0 e0       	ldi	r31, 0x00	; 0
    17ea:	80 81       	ld	r24, Z
    17ec:	48 2f       	mov	r20, r24
    17ee:	8b 81       	ldd	r24, Y+3	; 0x03
    17f0:	28 2f       	mov	r18, r24
    17f2:	30 e0       	ldi	r19, 0x00	; 0
    17f4:	81 e0       	ldi	r24, 0x01	; 1
    17f6:	90 e0       	ldi	r25, 0x00	; 0
    17f8:	02 c0       	rjmp	.+4      	; 0x17fe <DIO_enuSetPinDirection+0x90>
    17fa:	88 0f       	add	r24, r24
    17fc:	99 1f       	adc	r25, r25
    17fe:	2a 95       	dec	r18
    1800:	e2 f7       	brpl	.-8      	; 0x17fa <DIO_enuSetPinDirection+0x8c>
    1802:	80 95       	com	r24
    1804:	84 23       	and	r24, r20
    1806:	8c 93       	st	X, r24
			DDRA |=  (Copy_u8Value << Copy_u8PinID);
    1808:	aa e3       	ldi	r26, 0x3A	; 58
    180a:	b0 e0       	ldi	r27, 0x00	; 0
    180c:	ea e3       	ldi	r30, 0x3A	; 58
    180e:	f0 e0       	ldi	r31, 0x00	; 0
    1810:	80 81       	ld	r24, Z
    1812:	48 2f       	mov	r20, r24
    1814:	8c 81       	ldd	r24, Y+4	; 0x04
    1816:	28 2f       	mov	r18, r24
    1818:	30 e0       	ldi	r19, 0x00	; 0
    181a:	8b 81       	ldd	r24, Y+3	; 0x03
    181c:	88 2f       	mov	r24, r24
    181e:	90 e0       	ldi	r25, 0x00	; 0
    1820:	b9 01       	movw	r22, r18
    1822:	02 c0       	rjmp	.+4      	; 0x1828 <DIO_enuSetPinDirection+0xba>
    1824:	66 0f       	add	r22, r22
    1826:	77 1f       	adc	r23, r23
    1828:	8a 95       	dec	r24
    182a:	e2 f7       	brpl	.-8      	; 0x1824 <DIO_enuSetPinDirection+0xb6>
    182c:	cb 01       	movw	r24, r22
    182e:	84 2b       	or	r24, r20
    1830:	8c 93       	st	X, r24
    1832:	7a c0       	rjmp	.+244    	; 0x1928 <DIO_enuSetPinDirection+0x1ba>
			break;
		case DIO_PORTB:
			DDRB &= ~(DIO_MASK_BIT<<Copy_u8PinID);
    1834:	a7 e3       	ldi	r26, 0x37	; 55
    1836:	b0 e0       	ldi	r27, 0x00	; 0
    1838:	e7 e3       	ldi	r30, 0x37	; 55
    183a:	f0 e0       	ldi	r31, 0x00	; 0
    183c:	80 81       	ld	r24, Z
    183e:	48 2f       	mov	r20, r24
    1840:	8b 81       	ldd	r24, Y+3	; 0x03
    1842:	28 2f       	mov	r18, r24
    1844:	30 e0       	ldi	r19, 0x00	; 0
    1846:	81 e0       	ldi	r24, 0x01	; 1
    1848:	90 e0       	ldi	r25, 0x00	; 0
    184a:	02 c0       	rjmp	.+4      	; 0x1850 <DIO_enuSetPinDirection+0xe2>
    184c:	88 0f       	add	r24, r24
    184e:	99 1f       	adc	r25, r25
    1850:	2a 95       	dec	r18
    1852:	e2 f7       	brpl	.-8      	; 0x184c <DIO_enuSetPinDirection+0xde>
    1854:	80 95       	com	r24
    1856:	84 23       	and	r24, r20
    1858:	8c 93       	st	X, r24
			DDRB |=  (Copy_u8Value << Copy_u8PinID);
    185a:	a7 e3       	ldi	r26, 0x37	; 55
    185c:	b0 e0       	ldi	r27, 0x00	; 0
    185e:	e7 e3       	ldi	r30, 0x37	; 55
    1860:	f0 e0       	ldi	r31, 0x00	; 0
    1862:	80 81       	ld	r24, Z
    1864:	48 2f       	mov	r20, r24
    1866:	8c 81       	ldd	r24, Y+4	; 0x04
    1868:	28 2f       	mov	r18, r24
    186a:	30 e0       	ldi	r19, 0x00	; 0
    186c:	8b 81       	ldd	r24, Y+3	; 0x03
    186e:	88 2f       	mov	r24, r24
    1870:	90 e0       	ldi	r25, 0x00	; 0
    1872:	b9 01       	movw	r22, r18
    1874:	02 c0       	rjmp	.+4      	; 0x187a <DIO_enuSetPinDirection+0x10c>
    1876:	66 0f       	add	r22, r22
    1878:	77 1f       	adc	r23, r23
    187a:	8a 95       	dec	r24
    187c:	e2 f7       	brpl	.-8      	; 0x1876 <DIO_enuSetPinDirection+0x108>
    187e:	cb 01       	movw	r24, r22
    1880:	84 2b       	or	r24, r20
    1882:	8c 93       	st	X, r24
    1884:	51 c0       	rjmp	.+162    	; 0x1928 <DIO_enuSetPinDirection+0x1ba>
			break;
		case DIO_PORTC:
			DDRC &= ~(DIO_MASK_BIT<<Copy_u8PinID);
    1886:	a4 e3       	ldi	r26, 0x34	; 52
    1888:	b0 e0       	ldi	r27, 0x00	; 0
    188a:	e4 e3       	ldi	r30, 0x34	; 52
    188c:	f0 e0       	ldi	r31, 0x00	; 0
    188e:	80 81       	ld	r24, Z
    1890:	48 2f       	mov	r20, r24
    1892:	8b 81       	ldd	r24, Y+3	; 0x03
    1894:	28 2f       	mov	r18, r24
    1896:	30 e0       	ldi	r19, 0x00	; 0
    1898:	81 e0       	ldi	r24, 0x01	; 1
    189a:	90 e0       	ldi	r25, 0x00	; 0
    189c:	02 c0       	rjmp	.+4      	; 0x18a2 <DIO_enuSetPinDirection+0x134>
    189e:	88 0f       	add	r24, r24
    18a0:	99 1f       	adc	r25, r25
    18a2:	2a 95       	dec	r18
    18a4:	e2 f7       	brpl	.-8      	; 0x189e <DIO_enuSetPinDirection+0x130>
    18a6:	80 95       	com	r24
    18a8:	84 23       	and	r24, r20
    18aa:	8c 93       	st	X, r24
			DDRC |=  (Copy_u8Value << Copy_u8PinID);
    18ac:	a4 e3       	ldi	r26, 0x34	; 52
    18ae:	b0 e0       	ldi	r27, 0x00	; 0
    18b0:	e4 e3       	ldi	r30, 0x34	; 52
    18b2:	f0 e0       	ldi	r31, 0x00	; 0
    18b4:	80 81       	ld	r24, Z
    18b6:	48 2f       	mov	r20, r24
    18b8:	8c 81       	ldd	r24, Y+4	; 0x04
    18ba:	28 2f       	mov	r18, r24
    18bc:	30 e0       	ldi	r19, 0x00	; 0
    18be:	8b 81       	ldd	r24, Y+3	; 0x03
    18c0:	88 2f       	mov	r24, r24
    18c2:	90 e0       	ldi	r25, 0x00	; 0
    18c4:	b9 01       	movw	r22, r18
    18c6:	02 c0       	rjmp	.+4      	; 0x18cc <DIO_enuSetPinDirection+0x15e>
    18c8:	66 0f       	add	r22, r22
    18ca:	77 1f       	adc	r23, r23
    18cc:	8a 95       	dec	r24
    18ce:	e2 f7       	brpl	.-8      	; 0x18c8 <DIO_enuSetPinDirection+0x15a>
    18d0:	cb 01       	movw	r24, r22
    18d2:	84 2b       	or	r24, r20
    18d4:	8c 93       	st	X, r24
    18d6:	28 c0       	rjmp	.+80     	; 0x1928 <DIO_enuSetPinDirection+0x1ba>
			break;
		case DIO_PORTD:
			DDRD &= ~(DIO_MASK_BIT<<Copy_u8PinID);
    18d8:	a1 e3       	ldi	r26, 0x31	; 49
    18da:	b0 e0       	ldi	r27, 0x00	; 0
    18dc:	e1 e3       	ldi	r30, 0x31	; 49
    18de:	f0 e0       	ldi	r31, 0x00	; 0
    18e0:	80 81       	ld	r24, Z
    18e2:	48 2f       	mov	r20, r24
    18e4:	8b 81       	ldd	r24, Y+3	; 0x03
    18e6:	28 2f       	mov	r18, r24
    18e8:	30 e0       	ldi	r19, 0x00	; 0
    18ea:	81 e0       	ldi	r24, 0x01	; 1
    18ec:	90 e0       	ldi	r25, 0x00	; 0
    18ee:	02 c0       	rjmp	.+4      	; 0x18f4 <DIO_enuSetPinDirection+0x186>
    18f0:	88 0f       	add	r24, r24
    18f2:	99 1f       	adc	r25, r25
    18f4:	2a 95       	dec	r18
    18f6:	e2 f7       	brpl	.-8      	; 0x18f0 <DIO_enuSetPinDirection+0x182>
    18f8:	80 95       	com	r24
    18fa:	84 23       	and	r24, r20
    18fc:	8c 93       	st	X, r24
			DDRD |=  (Copy_u8Value << Copy_u8PinID);
    18fe:	a1 e3       	ldi	r26, 0x31	; 49
    1900:	b0 e0       	ldi	r27, 0x00	; 0
    1902:	e1 e3       	ldi	r30, 0x31	; 49
    1904:	f0 e0       	ldi	r31, 0x00	; 0
    1906:	80 81       	ld	r24, Z
    1908:	48 2f       	mov	r20, r24
    190a:	8c 81       	ldd	r24, Y+4	; 0x04
    190c:	28 2f       	mov	r18, r24
    190e:	30 e0       	ldi	r19, 0x00	; 0
    1910:	8b 81       	ldd	r24, Y+3	; 0x03
    1912:	88 2f       	mov	r24, r24
    1914:	90 e0       	ldi	r25, 0x00	; 0
    1916:	b9 01       	movw	r22, r18
    1918:	02 c0       	rjmp	.+4      	; 0x191e <DIO_enuSetPinDirection+0x1b0>
    191a:	66 0f       	add	r22, r22
    191c:	77 1f       	adc	r23, r23
    191e:	8a 95       	dec	r24
    1920:	e2 f7       	brpl	.-8      	; 0x191a <DIO_enuSetPinDirection+0x1ac>
    1922:	cb 01       	movw	r24, r22
    1924:	84 2b       	or	r24, r20
    1926:	8c 93       	st	X, r24
			break;
		}
		Local_enuErrorstate = ES_OK;
    1928:	81 e0       	ldi	r24, 0x01	; 1
    192a:	89 83       	std	Y+1, r24	; 0x01
    192c:	02 c0       	rjmp	.+4      	; 0x1932 <DIO_enuSetPinDirection+0x1c4>
	}
	else
	{
		Local_enuErrorstate = ES_OUT_OF_RANGE;
    192e:	83 e0       	ldi	r24, 0x03	; 3
    1930:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_enuErrorstate;
    1932:	89 81       	ldd	r24, Y+1	; 0x01
}
    1934:	26 96       	adiw	r28, 0x06	; 6
    1936:	0f b6       	in	r0, 0x3f	; 63
    1938:	f8 94       	cli
    193a:	de bf       	out	0x3e, r29	; 62
    193c:	0f be       	out	0x3f, r0	; 63
    193e:	cd bf       	out	0x3d, r28	; 61
    1940:	cf 91       	pop	r28
    1942:	df 91       	pop	r29
    1944:	08 95       	ret

00001946 <DIO_enuSetPinValue>:

ES_t DIO_enuSetPinValue(u8 Copy_u8PortID , u8 Copy_u8PinID ,u8 Copy_u8Value)
{
    1946:	df 93       	push	r29
    1948:	cf 93       	push	r28
    194a:	00 d0       	rcall	.+0      	; 0x194c <DIO_enuSetPinValue+0x6>
    194c:	00 d0       	rcall	.+0      	; 0x194e <DIO_enuSetPinValue+0x8>
    194e:	00 d0       	rcall	.+0      	; 0x1950 <DIO_enuSetPinValue+0xa>
    1950:	cd b7       	in	r28, 0x3d	; 61
    1952:	de b7       	in	r29, 0x3e	; 62
    1954:	8a 83       	std	Y+2, r24	; 0x02
    1956:	6b 83       	std	Y+3, r22	; 0x03
    1958:	4c 83       	std	Y+4, r20	; 0x04
	ES_t Local_enuErrorstate = ES_NOK;
    195a:	19 82       	std	Y+1, r1	; 0x01

	if (Copy_u8PortID <= DIO_PORTD &&
    195c:	8a 81       	ldd	r24, Y+2	; 0x02
    195e:	84 30       	cpi	r24, 0x04	; 4
    1960:	08 f0       	brcs	.+2      	; 0x1964 <DIO_enuSetPinValue+0x1e>
    1962:	d1 c0       	rjmp	.+418    	; 0x1b06 <DIO_enuSetPinValue+0x1c0>
    1964:	8b 81       	ldd	r24, Y+3	; 0x03
    1966:	88 30       	cpi	r24, 0x08	; 8
    1968:	08 f0       	brcs	.+2      	; 0x196c <DIO_enuSetPinValue+0x26>
    196a:	cd c0       	rjmp	.+410    	; 0x1b06 <DIO_enuSetPinValue+0x1c0>
    196c:	8c 81       	ldd	r24, Y+4	; 0x04
    196e:	82 30       	cpi	r24, 0x02	; 2
    1970:	08 f0       	brcs	.+2      	; 0x1974 <DIO_enuSetPinValue+0x2e>
    1972:	c9 c0       	rjmp	.+402    	; 0x1b06 <DIO_enuSetPinValue+0x1c0>
			Copy_u8PinID <= DIO_PIN7 &&
			Copy_u8Value <= OUTPUT)
	{
		switch (Copy_u8PortID)
    1974:	8a 81       	ldd	r24, Y+2	; 0x02
    1976:	28 2f       	mov	r18, r24
    1978:	30 e0       	ldi	r19, 0x00	; 0
    197a:	3e 83       	std	Y+6, r19	; 0x06
    197c:	2d 83       	std	Y+5, r18	; 0x05
    197e:	6d 81       	ldd	r22, Y+5	; 0x05
    1980:	7e 81       	ldd	r23, Y+6	; 0x06
    1982:	61 30       	cpi	r22, 0x01	; 1
    1984:	71 05       	cpc	r23, r1
    1986:	09 f4       	brne	.+2      	; 0x198a <DIO_enuSetPinValue+0x44>
    1988:	41 c0       	rjmp	.+130    	; 0x1a0c <DIO_enuSetPinValue+0xc6>
    198a:	8d 81       	ldd	r24, Y+5	; 0x05
    198c:	9e 81       	ldd	r25, Y+6	; 0x06
    198e:	82 30       	cpi	r24, 0x02	; 2
    1990:	91 05       	cpc	r25, r1
    1992:	34 f4       	brge	.+12     	; 0x19a0 <DIO_enuSetPinValue+0x5a>
    1994:	2d 81       	ldd	r18, Y+5	; 0x05
    1996:	3e 81       	ldd	r19, Y+6	; 0x06
    1998:	21 15       	cp	r18, r1
    199a:	31 05       	cpc	r19, r1
    199c:	71 f0       	breq	.+28     	; 0x19ba <DIO_enuSetPinValue+0x74>
    199e:	b0 c0       	rjmp	.+352    	; 0x1b00 <DIO_enuSetPinValue+0x1ba>
    19a0:	6d 81       	ldd	r22, Y+5	; 0x05
    19a2:	7e 81       	ldd	r23, Y+6	; 0x06
    19a4:	62 30       	cpi	r22, 0x02	; 2
    19a6:	71 05       	cpc	r23, r1
    19a8:	09 f4       	brne	.+2      	; 0x19ac <DIO_enuSetPinValue+0x66>
    19aa:	59 c0       	rjmp	.+178    	; 0x1a5e <DIO_enuSetPinValue+0x118>
    19ac:	8d 81       	ldd	r24, Y+5	; 0x05
    19ae:	9e 81       	ldd	r25, Y+6	; 0x06
    19b0:	83 30       	cpi	r24, 0x03	; 3
    19b2:	91 05       	cpc	r25, r1
    19b4:	09 f4       	brne	.+2      	; 0x19b8 <DIO_enuSetPinValue+0x72>
    19b6:	7c c0       	rjmp	.+248    	; 0x1ab0 <DIO_enuSetPinValue+0x16a>
    19b8:	a3 c0       	rjmp	.+326    	; 0x1b00 <DIO_enuSetPinValue+0x1ba>
		{
		case DIO_PORTA:
			PORTA &= ~(DIO_MASK_BIT<<Copy_u8PinID);
    19ba:	ab e3       	ldi	r26, 0x3B	; 59
    19bc:	b0 e0       	ldi	r27, 0x00	; 0
    19be:	eb e3       	ldi	r30, 0x3B	; 59
    19c0:	f0 e0       	ldi	r31, 0x00	; 0
    19c2:	80 81       	ld	r24, Z
    19c4:	48 2f       	mov	r20, r24
    19c6:	8b 81       	ldd	r24, Y+3	; 0x03
    19c8:	28 2f       	mov	r18, r24
    19ca:	30 e0       	ldi	r19, 0x00	; 0
    19cc:	81 e0       	ldi	r24, 0x01	; 1
    19ce:	90 e0       	ldi	r25, 0x00	; 0
    19d0:	02 c0       	rjmp	.+4      	; 0x19d6 <DIO_enuSetPinValue+0x90>
    19d2:	88 0f       	add	r24, r24
    19d4:	99 1f       	adc	r25, r25
    19d6:	2a 95       	dec	r18
    19d8:	e2 f7       	brpl	.-8      	; 0x19d2 <DIO_enuSetPinValue+0x8c>
    19da:	80 95       	com	r24
    19dc:	84 23       	and	r24, r20
    19de:	8c 93       	st	X, r24
			PORTA |=  (Copy_u8Value << Copy_u8PinID);
    19e0:	ab e3       	ldi	r26, 0x3B	; 59
    19e2:	b0 e0       	ldi	r27, 0x00	; 0
    19e4:	eb e3       	ldi	r30, 0x3B	; 59
    19e6:	f0 e0       	ldi	r31, 0x00	; 0
    19e8:	80 81       	ld	r24, Z
    19ea:	48 2f       	mov	r20, r24
    19ec:	8c 81       	ldd	r24, Y+4	; 0x04
    19ee:	28 2f       	mov	r18, r24
    19f0:	30 e0       	ldi	r19, 0x00	; 0
    19f2:	8b 81       	ldd	r24, Y+3	; 0x03
    19f4:	88 2f       	mov	r24, r24
    19f6:	90 e0       	ldi	r25, 0x00	; 0
    19f8:	b9 01       	movw	r22, r18
    19fa:	02 c0       	rjmp	.+4      	; 0x1a00 <DIO_enuSetPinValue+0xba>
    19fc:	66 0f       	add	r22, r22
    19fe:	77 1f       	adc	r23, r23
    1a00:	8a 95       	dec	r24
    1a02:	e2 f7       	brpl	.-8      	; 0x19fc <DIO_enuSetPinValue+0xb6>
    1a04:	cb 01       	movw	r24, r22
    1a06:	84 2b       	or	r24, r20
    1a08:	8c 93       	st	X, r24
    1a0a:	7a c0       	rjmp	.+244    	; 0x1b00 <DIO_enuSetPinValue+0x1ba>
			break;
		case DIO_PORTB:
			PORTB &= ~(DIO_MASK_BIT<<Copy_u8PinID);
    1a0c:	a8 e3       	ldi	r26, 0x38	; 56
    1a0e:	b0 e0       	ldi	r27, 0x00	; 0
    1a10:	e8 e3       	ldi	r30, 0x38	; 56
    1a12:	f0 e0       	ldi	r31, 0x00	; 0
    1a14:	80 81       	ld	r24, Z
    1a16:	48 2f       	mov	r20, r24
    1a18:	8b 81       	ldd	r24, Y+3	; 0x03
    1a1a:	28 2f       	mov	r18, r24
    1a1c:	30 e0       	ldi	r19, 0x00	; 0
    1a1e:	81 e0       	ldi	r24, 0x01	; 1
    1a20:	90 e0       	ldi	r25, 0x00	; 0
    1a22:	02 c0       	rjmp	.+4      	; 0x1a28 <DIO_enuSetPinValue+0xe2>
    1a24:	88 0f       	add	r24, r24
    1a26:	99 1f       	adc	r25, r25
    1a28:	2a 95       	dec	r18
    1a2a:	e2 f7       	brpl	.-8      	; 0x1a24 <DIO_enuSetPinValue+0xde>
    1a2c:	80 95       	com	r24
    1a2e:	84 23       	and	r24, r20
    1a30:	8c 93       	st	X, r24
			PORTB |=  (Copy_u8Value << Copy_u8PinID);
    1a32:	a8 e3       	ldi	r26, 0x38	; 56
    1a34:	b0 e0       	ldi	r27, 0x00	; 0
    1a36:	e8 e3       	ldi	r30, 0x38	; 56
    1a38:	f0 e0       	ldi	r31, 0x00	; 0
    1a3a:	80 81       	ld	r24, Z
    1a3c:	48 2f       	mov	r20, r24
    1a3e:	8c 81       	ldd	r24, Y+4	; 0x04
    1a40:	28 2f       	mov	r18, r24
    1a42:	30 e0       	ldi	r19, 0x00	; 0
    1a44:	8b 81       	ldd	r24, Y+3	; 0x03
    1a46:	88 2f       	mov	r24, r24
    1a48:	90 e0       	ldi	r25, 0x00	; 0
    1a4a:	b9 01       	movw	r22, r18
    1a4c:	02 c0       	rjmp	.+4      	; 0x1a52 <DIO_enuSetPinValue+0x10c>
    1a4e:	66 0f       	add	r22, r22
    1a50:	77 1f       	adc	r23, r23
    1a52:	8a 95       	dec	r24
    1a54:	e2 f7       	brpl	.-8      	; 0x1a4e <DIO_enuSetPinValue+0x108>
    1a56:	cb 01       	movw	r24, r22
    1a58:	84 2b       	or	r24, r20
    1a5a:	8c 93       	st	X, r24
    1a5c:	51 c0       	rjmp	.+162    	; 0x1b00 <DIO_enuSetPinValue+0x1ba>
			break;
		case DIO_PORTC:
			PORTC &= ~(DIO_MASK_BIT<<Copy_u8PinID);
    1a5e:	a5 e3       	ldi	r26, 0x35	; 53
    1a60:	b0 e0       	ldi	r27, 0x00	; 0
    1a62:	e5 e3       	ldi	r30, 0x35	; 53
    1a64:	f0 e0       	ldi	r31, 0x00	; 0
    1a66:	80 81       	ld	r24, Z
    1a68:	48 2f       	mov	r20, r24
    1a6a:	8b 81       	ldd	r24, Y+3	; 0x03
    1a6c:	28 2f       	mov	r18, r24
    1a6e:	30 e0       	ldi	r19, 0x00	; 0
    1a70:	81 e0       	ldi	r24, 0x01	; 1
    1a72:	90 e0       	ldi	r25, 0x00	; 0
    1a74:	02 c0       	rjmp	.+4      	; 0x1a7a <DIO_enuSetPinValue+0x134>
    1a76:	88 0f       	add	r24, r24
    1a78:	99 1f       	adc	r25, r25
    1a7a:	2a 95       	dec	r18
    1a7c:	e2 f7       	brpl	.-8      	; 0x1a76 <DIO_enuSetPinValue+0x130>
    1a7e:	80 95       	com	r24
    1a80:	84 23       	and	r24, r20
    1a82:	8c 93       	st	X, r24
			PORTC |=  (Copy_u8Value << Copy_u8PinID);
    1a84:	a5 e3       	ldi	r26, 0x35	; 53
    1a86:	b0 e0       	ldi	r27, 0x00	; 0
    1a88:	e5 e3       	ldi	r30, 0x35	; 53
    1a8a:	f0 e0       	ldi	r31, 0x00	; 0
    1a8c:	80 81       	ld	r24, Z
    1a8e:	48 2f       	mov	r20, r24
    1a90:	8c 81       	ldd	r24, Y+4	; 0x04
    1a92:	28 2f       	mov	r18, r24
    1a94:	30 e0       	ldi	r19, 0x00	; 0
    1a96:	8b 81       	ldd	r24, Y+3	; 0x03
    1a98:	88 2f       	mov	r24, r24
    1a9a:	90 e0       	ldi	r25, 0x00	; 0
    1a9c:	b9 01       	movw	r22, r18
    1a9e:	02 c0       	rjmp	.+4      	; 0x1aa4 <DIO_enuSetPinValue+0x15e>
    1aa0:	66 0f       	add	r22, r22
    1aa2:	77 1f       	adc	r23, r23
    1aa4:	8a 95       	dec	r24
    1aa6:	e2 f7       	brpl	.-8      	; 0x1aa0 <DIO_enuSetPinValue+0x15a>
    1aa8:	cb 01       	movw	r24, r22
    1aaa:	84 2b       	or	r24, r20
    1aac:	8c 93       	st	X, r24
    1aae:	28 c0       	rjmp	.+80     	; 0x1b00 <DIO_enuSetPinValue+0x1ba>
			break;
		case DIO_PORTD:
			PORTD &= ~(DIO_MASK_BIT<<Copy_u8PinID);
    1ab0:	a2 e3       	ldi	r26, 0x32	; 50
    1ab2:	b0 e0       	ldi	r27, 0x00	; 0
    1ab4:	e2 e3       	ldi	r30, 0x32	; 50
    1ab6:	f0 e0       	ldi	r31, 0x00	; 0
    1ab8:	80 81       	ld	r24, Z
    1aba:	48 2f       	mov	r20, r24
    1abc:	8b 81       	ldd	r24, Y+3	; 0x03
    1abe:	28 2f       	mov	r18, r24
    1ac0:	30 e0       	ldi	r19, 0x00	; 0
    1ac2:	81 e0       	ldi	r24, 0x01	; 1
    1ac4:	90 e0       	ldi	r25, 0x00	; 0
    1ac6:	02 c0       	rjmp	.+4      	; 0x1acc <DIO_enuSetPinValue+0x186>
    1ac8:	88 0f       	add	r24, r24
    1aca:	99 1f       	adc	r25, r25
    1acc:	2a 95       	dec	r18
    1ace:	e2 f7       	brpl	.-8      	; 0x1ac8 <DIO_enuSetPinValue+0x182>
    1ad0:	80 95       	com	r24
    1ad2:	84 23       	and	r24, r20
    1ad4:	8c 93       	st	X, r24
			PORTD |=  (Copy_u8Value << Copy_u8PinID);
    1ad6:	a2 e3       	ldi	r26, 0x32	; 50
    1ad8:	b0 e0       	ldi	r27, 0x00	; 0
    1ada:	e2 e3       	ldi	r30, 0x32	; 50
    1adc:	f0 e0       	ldi	r31, 0x00	; 0
    1ade:	80 81       	ld	r24, Z
    1ae0:	48 2f       	mov	r20, r24
    1ae2:	8c 81       	ldd	r24, Y+4	; 0x04
    1ae4:	28 2f       	mov	r18, r24
    1ae6:	30 e0       	ldi	r19, 0x00	; 0
    1ae8:	8b 81       	ldd	r24, Y+3	; 0x03
    1aea:	88 2f       	mov	r24, r24
    1aec:	90 e0       	ldi	r25, 0x00	; 0
    1aee:	b9 01       	movw	r22, r18
    1af0:	02 c0       	rjmp	.+4      	; 0x1af6 <DIO_enuSetPinValue+0x1b0>
    1af2:	66 0f       	add	r22, r22
    1af4:	77 1f       	adc	r23, r23
    1af6:	8a 95       	dec	r24
    1af8:	e2 f7       	brpl	.-8      	; 0x1af2 <DIO_enuSetPinValue+0x1ac>
    1afa:	cb 01       	movw	r24, r22
    1afc:	84 2b       	or	r24, r20
    1afe:	8c 93       	st	X, r24
			break;
		}
		Local_enuErrorstate = ES_OK;
    1b00:	81 e0       	ldi	r24, 0x01	; 1
    1b02:	89 83       	std	Y+1, r24	; 0x01
    1b04:	02 c0       	rjmp	.+4      	; 0x1b0a <DIO_enuSetPinValue+0x1c4>
	}
	else
	{
		Local_enuErrorstate = ES_OUT_OF_RANGE;
    1b06:	83 e0       	ldi	r24, 0x03	; 3
    1b08:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_enuErrorstate;
    1b0a:	89 81       	ldd	r24, Y+1	; 0x01
}
    1b0c:	26 96       	adiw	r28, 0x06	; 6
    1b0e:	0f b6       	in	r0, 0x3f	; 63
    1b10:	f8 94       	cli
    1b12:	de bf       	out	0x3e, r29	; 62
    1b14:	0f be       	out	0x3f, r0	; 63
    1b16:	cd bf       	out	0x3d, r28	; 61
    1b18:	cf 91       	pop	r28
    1b1a:	df 91       	pop	r29
    1b1c:	08 95       	ret

00001b1e <DIO_enuTogPin>:

ES_t DIO_enuTogPin(u8 Copy_u8PortID, u8 Copy_u8PinID )
{
    1b1e:	df 93       	push	r29
    1b20:	cf 93       	push	r28
    1b22:	00 d0       	rcall	.+0      	; 0x1b24 <DIO_enuTogPin+0x6>
    1b24:	00 d0       	rcall	.+0      	; 0x1b26 <DIO_enuTogPin+0x8>
    1b26:	0f 92       	push	r0
    1b28:	cd b7       	in	r28, 0x3d	; 61
    1b2a:	de b7       	in	r29, 0x3e	; 62
    1b2c:	8a 83       	std	Y+2, r24	; 0x02
    1b2e:	6b 83       	std	Y+3, r22	; 0x03
	ES_t Local_enuErrorstate = ES_NOK;
    1b30:	19 82       	std	Y+1, r1	; 0x01

	if (Copy_u8PortID <= DIO_PORTD &&
    1b32:	8a 81       	ldd	r24, Y+2	; 0x02
    1b34:	84 30       	cpi	r24, 0x04	; 4
    1b36:	08 f0       	brcs	.+2      	; 0x1b3a <DIO_enuTogPin+0x1c>
    1b38:	75 c0       	rjmp	.+234    	; 0x1c24 <DIO_enuTogPin+0x106>
    1b3a:	8b 81       	ldd	r24, Y+3	; 0x03
    1b3c:	88 30       	cpi	r24, 0x08	; 8
    1b3e:	08 f0       	brcs	.+2      	; 0x1b42 <DIO_enuTogPin+0x24>
    1b40:	71 c0       	rjmp	.+226    	; 0x1c24 <DIO_enuTogPin+0x106>
			Copy_u8PinID <= DIO_PIN7)
	{
		switch (Copy_u8PortID)
    1b42:	8a 81       	ldd	r24, Y+2	; 0x02
    1b44:	28 2f       	mov	r18, r24
    1b46:	30 e0       	ldi	r19, 0x00	; 0
    1b48:	3d 83       	std	Y+5, r19	; 0x05
    1b4a:	2c 83       	std	Y+4, r18	; 0x04
    1b4c:	8c 81       	ldd	r24, Y+4	; 0x04
    1b4e:	9d 81       	ldd	r25, Y+5	; 0x05
    1b50:	81 30       	cpi	r24, 0x01	; 1
    1b52:	91 05       	cpc	r25, r1
    1b54:	49 f1       	breq	.+82     	; 0x1ba8 <DIO_enuTogPin+0x8a>
    1b56:	2c 81       	ldd	r18, Y+4	; 0x04
    1b58:	3d 81       	ldd	r19, Y+5	; 0x05
    1b5a:	22 30       	cpi	r18, 0x02	; 2
    1b5c:	31 05       	cpc	r19, r1
    1b5e:	2c f4       	brge	.+10     	; 0x1b6a <DIO_enuTogPin+0x4c>
    1b60:	8c 81       	ldd	r24, Y+4	; 0x04
    1b62:	9d 81       	ldd	r25, Y+5	; 0x05
    1b64:	00 97       	sbiw	r24, 0x00	; 0
    1b66:	61 f0       	breq	.+24     	; 0x1b80 <DIO_enuTogPin+0x62>
    1b68:	5a c0       	rjmp	.+180    	; 0x1c1e <DIO_enuTogPin+0x100>
    1b6a:	2c 81       	ldd	r18, Y+4	; 0x04
    1b6c:	3d 81       	ldd	r19, Y+5	; 0x05
    1b6e:	22 30       	cpi	r18, 0x02	; 2
    1b70:	31 05       	cpc	r19, r1
    1b72:	71 f1       	breq	.+92     	; 0x1bd0 <DIO_enuTogPin+0xb2>
    1b74:	8c 81       	ldd	r24, Y+4	; 0x04
    1b76:	9d 81       	ldd	r25, Y+5	; 0x05
    1b78:	83 30       	cpi	r24, 0x03	; 3
    1b7a:	91 05       	cpc	r25, r1
    1b7c:	e9 f1       	breq	.+122    	; 0x1bf8 <DIO_enuTogPin+0xda>
    1b7e:	4f c0       	rjmp	.+158    	; 0x1c1e <DIO_enuTogPin+0x100>
		{
		case DIO_PORTA:
			PORTA ^= (DIO_MASK_BIT<<Copy_u8PinID);
    1b80:	ab e3       	ldi	r26, 0x3B	; 59
    1b82:	b0 e0       	ldi	r27, 0x00	; 0
    1b84:	eb e3       	ldi	r30, 0x3B	; 59
    1b86:	f0 e0       	ldi	r31, 0x00	; 0
    1b88:	80 81       	ld	r24, Z
    1b8a:	48 2f       	mov	r20, r24
    1b8c:	8b 81       	ldd	r24, Y+3	; 0x03
    1b8e:	28 2f       	mov	r18, r24
    1b90:	30 e0       	ldi	r19, 0x00	; 0
    1b92:	81 e0       	ldi	r24, 0x01	; 1
    1b94:	90 e0       	ldi	r25, 0x00	; 0
    1b96:	02 2e       	mov	r0, r18
    1b98:	02 c0       	rjmp	.+4      	; 0x1b9e <DIO_enuTogPin+0x80>
    1b9a:	88 0f       	add	r24, r24
    1b9c:	99 1f       	adc	r25, r25
    1b9e:	0a 94       	dec	r0
    1ba0:	e2 f7       	brpl	.-8      	; 0x1b9a <DIO_enuTogPin+0x7c>
    1ba2:	84 27       	eor	r24, r20
    1ba4:	8c 93       	st	X, r24
    1ba6:	3b c0       	rjmp	.+118    	; 0x1c1e <DIO_enuTogPin+0x100>
			break;
		case DIO_PORTB:
			PORTB ^= (DIO_MASK_BIT<<Copy_u8PinID);
    1ba8:	a8 e3       	ldi	r26, 0x38	; 56
    1baa:	b0 e0       	ldi	r27, 0x00	; 0
    1bac:	e8 e3       	ldi	r30, 0x38	; 56
    1bae:	f0 e0       	ldi	r31, 0x00	; 0
    1bb0:	80 81       	ld	r24, Z
    1bb2:	48 2f       	mov	r20, r24
    1bb4:	8b 81       	ldd	r24, Y+3	; 0x03
    1bb6:	28 2f       	mov	r18, r24
    1bb8:	30 e0       	ldi	r19, 0x00	; 0
    1bba:	81 e0       	ldi	r24, 0x01	; 1
    1bbc:	90 e0       	ldi	r25, 0x00	; 0
    1bbe:	02 2e       	mov	r0, r18
    1bc0:	02 c0       	rjmp	.+4      	; 0x1bc6 <DIO_enuTogPin+0xa8>
    1bc2:	88 0f       	add	r24, r24
    1bc4:	99 1f       	adc	r25, r25
    1bc6:	0a 94       	dec	r0
    1bc8:	e2 f7       	brpl	.-8      	; 0x1bc2 <DIO_enuTogPin+0xa4>
    1bca:	84 27       	eor	r24, r20
    1bcc:	8c 93       	st	X, r24
    1bce:	27 c0       	rjmp	.+78     	; 0x1c1e <DIO_enuTogPin+0x100>
			break;
		case DIO_PORTC:
			PORTC ^= (DIO_MASK_BIT<<Copy_u8PinID);
    1bd0:	a5 e3       	ldi	r26, 0x35	; 53
    1bd2:	b0 e0       	ldi	r27, 0x00	; 0
    1bd4:	e5 e3       	ldi	r30, 0x35	; 53
    1bd6:	f0 e0       	ldi	r31, 0x00	; 0
    1bd8:	80 81       	ld	r24, Z
    1bda:	48 2f       	mov	r20, r24
    1bdc:	8b 81       	ldd	r24, Y+3	; 0x03
    1bde:	28 2f       	mov	r18, r24
    1be0:	30 e0       	ldi	r19, 0x00	; 0
    1be2:	81 e0       	ldi	r24, 0x01	; 1
    1be4:	90 e0       	ldi	r25, 0x00	; 0
    1be6:	02 2e       	mov	r0, r18
    1be8:	02 c0       	rjmp	.+4      	; 0x1bee <DIO_enuTogPin+0xd0>
    1bea:	88 0f       	add	r24, r24
    1bec:	99 1f       	adc	r25, r25
    1bee:	0a 94       	dec	r0
    1bf0:	e2 f7       	brpl	.-8      	; 0x1bea <DIO_enuTogPin+0xcc>
    1bf2:	84 27       	eor	r24, r20
    1bf4:	8c 93       	st	X, r24
    1bf6:	13 c0       	rjmp	.+38     	; 0x1c1e <DIO_enuTogPin+0x100>
			break;
		case DIO_PORTD:
			PORTD ^= (DIO_MASK_BIT<<Copy_u8PinID);
    1bf8:	a2 e3       	ldi	r26, 0x32	; 50
    1bfa:	b0 e0       	ldi	r27, 0x00	; 0
    1bfc:	e2 e3       	ldi	r30, 0x32	; 50
    1bfe:	f0 e0       	ldi	r31, 0x00	; 0
    1c00:	80 81       	ld	r24, Z
    1c02:	48 2f       	mov	r20, r24
    1c04:	8b 81       	ldd	r24, Y+3	; 0x03
    1c06:	28 2f       	mov	r18, r24
    1c08:	30 e0       	ldi	r19, 0x00	; 0
    1c0a:	81 e0       	ldi	r24, 0x01	; 1
    1c0c:	90 e0       	ldi	r25, 0x00	; 0
    1c0e:	02 2e       	mov	r0, r18
    1c10:	02 c0       	rjmp	.+4      	; 0x1c16 <DIO_enuTogPin+0xf8>
    1c12:	88 0f       	add	r24, r24
    1c14:	99 1f       	adc	r25, r25
    1c16:	0a 94       	dec	r0
    1c18:	e2 f7       	brpl	.-8      	; 0x1c12 <DIO_enuTogPin+0xf4>
    1c1a:	84 27       	eor	r24, r20
    1c1c:	8c 93       	st	X, r24
			break;
		}
		Local_enuErrorstate = ES_OK;
    1c1e:	81 e0       	ldi	r24, 0x01	; 1
    1c20:	89 83       	std	Y+1, r24	; 0x01
    1c22:	02 c0       	rjmp	.+4      	; 0x1c28 <DIO_enuTogPin+0x10a>
	}
	else
	{
		Local_enuErrorstate = ES_OUT_OF_RANGE;
    1c24:	83 e0       	ldi	r24, 0x03	; 3
    1c26:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_enuErrorstate;
    1c28:	89 81       	ldd	r24, Y+1	; 0x01
}
    1c2a:	0f 90       	pop	r0
    1c2c:	0f 90       	pop	r0
    1c2e:	0f 90       	pop	r0
    1c30:	0f 90       	pop	r0
    1c32:	0f 90       	pop	r0
    1c34:	cf 91       	pop	r28
    1c36:	df 91       	pop	r29
    1c38:	08 95       	ret

00001c3a <DIO_enuGetPinValue>:

ES_t DIO_enuGetPinValue(u8 Copy_u8PortID ,u8 Copy_u8PinID , u8 * Copy_pu8Value)
{
    1c3a:	df 93       	push	r29
    1c3c:	cf 93       	push	r28
    1c3e:	cd b7       	in	r28, 0x3d	; 61
    1c40:	de b7       	in	r29, 0x3e	; 62
    1c42:	27 97       	sbiw	r28, 0x07	; 7
    1c44:	0f b6       	in	r0, 0x3f	; 63
    1c46:	f8 94       	cli
    1c48:	de bf       	out	0x3e, r29	; 62
    1c4a:	0f be       	out	0x3f, r0	; 63
    1c4c:	cd bf       	out	0x3d, r28	; 61
    1c4e:	8a 83       	std	Y+2, r24	; 0x02
    1c50:	6b 83       	std	Y+3, r22	; 0x03
    1c52:	5d 83       	std	Y+5, r21	; 0x05
    1c54:	4c 83       	std	Y+4, r20	; 0x04
	ES_t Local_enuErrorstate = ES_NOK;
    1c56:	19 82       	std	Y+1, r1	; 0x01

	if (Copy_pu8Value != NULL)
    1c58:	8c 81       	ldd	r24, Y+4	; 0x04
    1c5a:	9d 81       	ldd	r25, Y+5	; 0x05
    1c5c:	00 97       	sbiw	r24, 0x00	; 0
    1c5e:	09 f4       	brne	.+2      	; 0x1c62 <DIO_enuGetPinValue+0x28>
    1c60:	7e c0       	rjmp	.+252    	; 0x1d5e <DIO_enuGetPinValue+0x124>
	{
		if (Copy_u8PortID <= DIO_PORTD &&
    1c62:	8a 81       	ldd	r24, Y+2	; 0x02
    1c64:	84 30       	cpi	r24, 0x04	; 4
    1c66:	08 f0       	brcs	.+2      	; 0x1c6a <DIO_enuGetPinValue+0x30>
    1c68:	77 c0       	rjmp	.+238    	; 0x1d58 <DIO_enuGetPinValue+0x11e>
    1c6a:	8b 81       	ldd	r24, Y+3	; 0x03
    1c6c:	88 30       	cpi	r24, 0x08	; 8
    1c6e:	08 f0       	brcs	.+2      	; 0x1c72 <DIO_enuGetPinValue+0x38>
    1c70:	73 c0       	rjmp	.+230    	; 0x1d58 <DIO_enuGetPinValue+0x11e>
				Copy_u8PinID <= DIO_PIN7)
		{
			switch (Copy_u8PortID)
    1c72:	8a 81       	ldd	r24, Y+2	; 0x02
    1c74:	28 2f       	mov	r18, r24
    1c76:	30 e0       	ldi	r19, 0x00	; 0
    1c78:	3f 83       	std	Y+7, r19	; 0x07
    1c7a:	2e 83       	std	Y+6, r18	; 0x06
    1c7c:	4e 81       	ldd	r20, Y+6	; 0x06
    1c7e:	5f 81       	ldd	r21, Y+7	; 0x07
    1c80:	41 30       	cpi	r20, 0x01	; 1
    1c82:	51 05       	cpc	r21, r1
    1c84:	59 f1       	breq	.+86     	; 0x1cdc <DIO_enuGetPinValue+0xa2>
    1c86:	8e 81       	ldd	r24, Y+6	; 0x06
    1c88:	9f 81       	ldd	r25, Y+7	; 0x07
    1c8a:	82 30       	cpi	r24, 0x02	; 2
    1c8c:	91 05       	cpc	r25, r1
    1c8e:	34 f4       	brge	.+12     	; 0x1c9c <DIO_enuGetPinValue+0x62>
    1c90:	2e 81       	ldd	r18, Y+6	; 0x06
    1c92:	3f 81       	ldd	r19, Y+7	; 0x07
    1c94:	21 15       	cp	r18, r1
    1c96:	31 05       	cpc	r19, r1
    1c98:	69 f0       	breq	.+26     	; 0x1cb4 <DIO_enuGetPinValue+0x7a>
    1c9a:	5b c0       	rjmp	.+182    	; 0x1d52 <DIO_enuGetPinValue+0x118>
    1c9c:	4e 81       	ldd	r20, Y+6	; 0x06
    1c9e:	5f 81       	ldd	r21, Y+7	; 0x07
    1ca0:	42 30       	cpi	r20, 0x02	; 2
    1ca2:	51 05       	cpc	r21, r1
    1ca4:	79 f1       	breq	.+94     	; 0x1d04 <DIO_enuGetPinValue+0xca>
    1ca6:	8e 81       	ldd	r24, Y+6	; 0x06
    1ca8:	9f 81       	ldd	r25, Y+7	; 0x07
    1caa:	83 30       	cpi	r24, 0x03	; 3
    1cac:	91 05       	cpc	r25, r1
    1cae:	09 f4       	brne	.+2      	; 0x1cb2 <DIO_enuGetPinValue+0x78>
    1cb0:	3d c0       	rjmp	.+122    	; 0x1d2c <DIO_enuGetPinValue+0xf2>
    1cb2:	4f c0       	rjmp	.+158    	; 0x1d52 <DIO_enuGetPinValue+0x118>
			{
			case DIO_PORTA:
				*Copy_pu8Value = ((PINA>>Copy_u8PinID) &DIO_MASK_BIT);
    1cb4:	e9 e3       	ldi	r30, 0x39	; 57
    1cb6:	f0 e0       	ldi	r31, 0x00	; 0
    1cb8:	80 81       	ld	r24, Z
    1cba:	28 2f       	mov	r18, r24
    1cbc:	30 e0       	ldi	r19, 0x00	; 0
    1cbe:	8b 81       	ldd	r24, Y+3	; 0x03
    1cc0:	88 2f       	mov	r24, r24
    1cc2:	90 e0       	ldi	r25, 0x00	; 0
    1cc4:	a9 01       	movw	r20, r18
    1cc6:	02 c0       	rjmp	.+4      	; 0x1ccc <DIO_enuGetPinValue+0x92>
    1cc8:	55 95       	asr	r21
    1cca:	47 95       	ror	r20
    1ccc:	8a 95       	dec	r24
    1cce:	e2 f7       	brpl	.-8      	; 0x1cc8 <DIO_enuGetPinValue+0x8e>
    1cd0:	ca 01       	movw	r24, r20
    1cd2:	81 70       	andi	r24, 0x01	; 1
    1cd4:	ec 81       	ldd	r30, Y+4	; 0x04
    1cd6:	fd 81       	ldd	r31, Y+5	; 0x05
    1cd8:	80 83       	st	Z, r24
    1cda:	3b c0       	rjmp	.+118    	; 0x1d52 <DIO_enuGetPinValue+0x118>
				break;
			case DIO_PORTB:
				*Copy_pu8Value = ((PINB>>Copy_u8PinID) &DIO_MASK_BIT);
    1cdc:	e6 e3       	ldi	r30, 0x36	; 54
    1cde:	f0 e0       	ldi	r31, 0x00	; 0
    1ce0:	80 81       	ld	r24, Z
    1ce2:	28 2f       	mov	r18, r24
    1ce4:	30 e0       	ldi	r19, 0x00	; 0
    1ce6:	8b 81       	ldd	r24, Y+3	; 0x03
    1ce8:	88 2f       	mov	r24, r24
    1cea:	90 e0       	ldi	r25, 0x00	; 0
    1cec:	a9 01       	movw	r20, r18
    1cee:	02 c0       	rjmp	.+4      	; 0x1cf4 <DIO_enuGetPinValue+0xba>
    1cf0:	55 95       	asr	r21
    1cf2:	47 95       	ror	r20
    1cf4:	8a 95       	dec	r24
    1cf6:	e2 f7       	brpl	.-8      	; 0x1cf0 <DIO_enuGetPinValue+0xb6>
    1cf8:	ca 01       	movw	r24, r20
    1cfa:	81 70       	andi	r24, 0x01	; 1
    1cfc:	ec 81       	ldd	r30, Y+4	; 0x04
    1cfe:	fd 81       	ldd	r31, Y+5	; 0x05
    1d00:	80 83       	st	Z, r24
    1d02:	27 c0       	rjmp	.+78     	; 0x1d52 <DIO_enuGetPinValue+0x118>
				break;
			case DIO_PORTC:
				*Copy_pu8Value = ((PINC>>Copy_u8PinID) &DIO_MASK_BIT);
    1d04:	e3 e3       	ldi	r30, 0x33	; 51
    1d06:	f0 e0       	ldi	r31, 0x00	; 0
    1d08:	80 81       	ld	r24, Z
    1d0a:	28 2f       	mov	r18, r24
    1d0c:	30 e0       	ldi	r19, 0x00	; 0
    1d0e:	8b 81       	ldd	r24, Y+3	; 0x03
    1d10:	88 2f       	mov	r24, r24
    1d12:	90 e0       	ldi	r25, 0x00	; 0
    1d14:	a9 01       	movw	r20, r18
    1d16:	02 c0       	rjmp	.+4      	; 0x1d1c <DIO_enuGetPinValue+0xe2>
    1d18:	55 95       	asr	r21
    1d1a:	47 95       	ror	r20
    1d1c:	8a 95       	dec	r24
    1d1e:	e2 f7       	brpl	.-8      	; 0x1d18 <DIO_enuGetPinValue+0xde>
    1d20:	ca 01       	movw	r24, r20
    1d22:	81 70       	andi	r24, 0x01	; 1
    1d24:	ec 81       	ldd	r30, Y+4	; 0x04
    1d26:	fd 81       	ldd	r31, Y+5	; 0x05
    1d28:	80 83       	st	Z, r24
    1d2a:	13 c0       	rjmp	.+38     	; 0x1d52 <DIO_enuGetPinValue+0x118>
				break;
			case DIO_PORTD:
				*Copy_pu8Value = ((PIND>>Copy_u8PinID) &DIO_MASK_BIT);
    1d2c:	e0 e3       	ldi	r30, 0x30	; 48
    1d2e:	f0 e0       	ldi	r31, 0x00	; 0
    1d30:	80 81       	ld	r24, Z
    1d32:	28 2f       	mov	r18, r24
    1d34:	30 e0       	ldi	r19, 0x00	; 0
    1d36:	8b 81       	ldd	r24, Y+3	; 0x03
    1d38:	88 2f       	mov	r24, r24
    1d3a:	90 e0       	ldi	r25, 0x00	; 0
    1d3c:	a9 01       	movw	r20, r18
    1d3e:	02 c0       	rjmp	.+4      	; 0x1d44 <DIO_enuGetPinValue+0x10a>
    1d40:	55 95       	asr	r21
    1d42:	47 95       	ror	r20
    1d44:	8a 95       	dec	r24
    1d46:	e2 f7       	brpl	.-8      	; 0x1d40 <DIO_enuGetPinValue+0x106>
    1d48:	ca 01       	movw	r24, r20
    1d4a:	81 70       	andi	r24, 0x01	; 1
    1d4c:	ec 81       	ldd	r30, Y+4	; 0x04
    1d4e:	fd 81       	ldd	r31, Y+5	; 0x05
    1d50:	80 83       	st	Z, r24
				break;
			}
			Local_enuErrorstate = ES_OK;
    1d52:	81 e0       	ldi	r24, 0x01	; 1
    1d54:	89 83       	std	Y+1, r24	; 0x01
    1d56:	05 c0       	rjmp	.+10     	; 0x1d62 <DIO_enuGetPinValue+0x128>
		}
		else
		{
			Local_enuErrorstate = ES_OUT_OF_RANGE;
    1d58:	83 e0       	ldi	r24, 0x03	; 3
    1d5a:	89 83       	std	Y+1, r24	; 0x01
    1d5c:	02 c0       	rjmp	.+4      	; 0x1d62 <DIO_enuGetPinValue+0x128>
		}
	}
	else
	{
		Local_enuErrorstate = ES_NULL_POINTER;
    1d5e:	82 e0       	ldi	r24, 0x02	; 2
    1d60:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_enuErrorstate;
    1d62:	89 81       	ldd	r24, Y+1	; 0x01
}
    1d64:	27 96       	adiw	r28, 0x07	; 7
    1d66:	0f b6       	in	r0, 0x3f	; 63
    1d68:	f8 94       	cli
    1d6a:	de bf       	out	0x3e, r29	; 62
    1d6c:	0f be       	out	0x3f, r0	; 63
    1d6e:	cd bf       	out	0x3d, r28	; 61
    1d70:	cf 91       	pop	r28
    1d72:	df 91       	pop	r29
    1d74:	08 95       	ret

00001d76 <EXINT_Init>:
void (*CallbackPtr_1)(void)=NULL;
void (*CallbackPtr_2)(void)=NULL;


ES_t EXINT_Init(void)
{
    1d76:	df 93       	push	r29
    1d78:	cf 93       	push	r28
    1d7a:	0f 92       	push	r0
    1d7c:	cd b7       	in	r28, 0x3d	; 61
    1d7e:	de b7       	in	r29, 0x3e	; 62
	ES_t Local_enuErrorState = ES_NOK;
    1d80:	19 82       	std	Y+1, r1	; 0x01
		MCUCR &=~(15<<0); //clear bit 0,1,2,3
    1d82:	a5 e5       	ldi	r26, 0x55	; 85
    1d84:	b0 e0       	ldi	r27, 0x00	; 0
    1d86:	e5 e5       	ldi	r30, 0x55	; 85
    1d88:	f0 e0       	ldi	r31, 0x00	; 0
    1d8a:	80 81       	ld	r24, Z
    1d8c:	80 7f       	andi	r24, 0xF0	; 240
    1d8e:	8c 93       	st	X, r24

		#if  EX_INT0_MODE == FALLING_EDGE
		MCUCR|=FALLING_EDGE;
    1d90:	a5 e5       	ldi	r26, 0x55	; 85
    1d92:	b0 e0       	ldi	r27, 0x00	; 0
    1d94:	e5 e5       	ldi	r30, 0x55	; 85
    1d96:	f0 e0       	ldi	r31, 0x00	; 0
    1d98:	80 81       	ld	r24, Z
    1d9a:	82 60       	ori	r24, 0x02	; 2
    1d9c:	8c 93       	st	X, r24
		#elif   EX_INT0_MODE == ANY_LOGIC
		MCUCR|=ANY_LOGIC;
		#endif

		#if  EX_INT1_MODE == FALLING_EDGE
		MCUCR|=(FALLING_EDGE<<2);
    1d9e:	a5 e5       	ldi	r26, 0x55	; 85
    1da0:	b0 e0       	ldi	r27, 0x00	; 0
    1da2:	e5 e5       	ldi	r30, 0x55	; 85
    1da4:	f0 e0       	ldi	r31, 0x00	; 0
    1da6:	80 81       	ld	r24, Z
    1da8:	88 60       	ori	r24, 0x08	; 8
    1daa:	8c 93       	st	X, r24
		#elif   EX_INT1_MODE == ANY_LOGIC
		MCUCR|=(ANY_LOGIC<<2);
		#endif

		#if  EX_INT2_MODE == FALLING_EDGE
		MCUCSR &= ~(1<<ISC2);
    1dac:	a4 e5       	ldi	r26, 0x54	; 84
    1dae:	b0 e0       	ldi	r27, 0x00	; 0
    1db0:	e4 e5       	ldi	r30, 0x54	; 84
    1db2:	f0 e0       	ldi	r31, 0x00	; 0
    1db4:	80 81       	ld	r24, Z
    1db6:	8f 7b       	andi	r24, 0xBF	; 191
    1db8:	8c 93       	st	X, r24
		MCUCSR |= (1<<ISC2);
		#endif


		#if EX_INT0_STATE == ACTIVE
		GICR |=(1<<6);
    1dba:	ab e5       	ldi	r26, 0x5B	; 91
    1dbc:	b0 e0       	ldi	r27, 0x00	; 0
    1dbe:	eb e5       	ldi	r30, 0x5B	; 91
    1dc0:	f0 e0       	ldi	r31, 0x00	; 0
    1dc2:	80 81       	ld	r24, Z
    1dc4:	80 64       	ori	r24, 0x40	; 64
    1dc6:	8c 93       	st	X, r24




		#if EX_INT1_STATE == ACTIVE
		GICR |=(1<<7);
    1dc8:	ab e5       	ldi	r26, 0x5B	; 91
    1dca:	b0 e0       	ldi	r27, 0x00	; 0
    1dcc:	eb e5       	ldi	r30, 0x5B	; 91
    1dce:	f0 e0       	ldi	r31, 0x00	; 0
    1dd0:	80 81       	ld	r24, Z
    1dd2:	80 68       	ori	r24, 0x80	; 128
    1dd4:	8c 93       	st	X, r24
		#endif

		#if EX_INT2_STATE == ACTIVE
		GICR |=(1<<5);
		#elif  EX_INT2_STATE == DEACTIVE
		GICR &=~(1<<5);
    1dd6:	ab e5       	ldi	r26, 0x5B	; 91
    1dd8:	b0 e0       	ldi	r27, 0x00	; 0
    1dda:	eb e5       	ldi	r30, 0x5B	; 91
    1ddc:	f0 e0       	ldi	r31, 0x00	; 0
    1dde:	80 81       	ld	r24, Z
    1de0:	8f 7d       	andi	r24, 0xDF	; 223
    1de2:	8c 93       	st	X, r24
		#endif

		GIFR|=(7<<5); // clear bits 5,6,7 to disable interrupt flags
    1de4:	aa e5       	ldi	r26, 0x5A	; 90
    1de6:	b0 e0       	ldi	r27, 0x00	; 0
    1de8:	ea e5       	ldi	r30, 0x5A	; 90
    1dea:	f0 e0       	ldi	r31, 0x00	; 0
    1dec:	80 81       	ld	r24, Z
    1dee:	80 6e       	ori	r24, 0xE0	; 224
    1df0:	8c 93       	st	X, r24

	  Local_enuErrorState = ES_OK;
    1df2:	81 e0       	ldi	r24, 0x01	; 1
    1df4:	89 83       	std	Y+1, r24	; 0x01
		return Local_enuErrorState ;
    1df6:	89 81       	ldd	r24, Y+1	; 0x01
}
    1df8:	0f 90       	pop	r0
    1dfa:	cf 91       	pop	r28
    1dfc:	df 91       	pop	r29
    1dfe:	08 95       	ret

00001e00 <EXINT_Enable>:
ES_t EXINT_Enable(u8 EXINT_ID)
{
    1e00:	df 93       	push	r29
    1e02:	cf 93       	push	r28
    1e04:	00 d0       	rcall	.+0      	; 0x1e06 <EXINT_Enable+0x6>
    1e06:	cd b7       	in	r28, 0x3d	; 61
    1e08:	de b7       	in	r29, 0x3e	; 62
    1e0a:	8a 83       	std	Y+2, r24	; 0x02
	ES_t Local_enuErrorState = ES_NOK;
    1e0c:	19 82       	std	Y+1, r1	; 0x01
	if (EXINT_ID ==0)
    1e0e:	8a 81       	ldd	r24, Y+2	; 0x02
    1e10:	88 23       	and	r24, r24
    1e12:	41 f4       	brne	.+16     	; 0x1e24 <EXINT_Enable+0x24>
	{
		GICR |= (1<<6);
    1e14:	ab e5       	ldi	r26, 0x5B	; 91
    1e16:	b0 e0       	ldi	r27, 0x00	; 0
    1e18:	eb e5       	ldi	r30, 0x5B	; 91
    1e1a:	f0 e0       	ldi	r31, 0x00	; 0
    1e1c:	80 81       	ld	r24, Z
    1e1e:	80 64       	ori	r24, 0x40	; 64
    1e20:	8c 93       	st	X, r24
    1e22:	15 c0       	rjmp	.+42     	; 0x1e4e <EXINT_Enable+0x4e>
	}
	else if (EXINT_ID ==1)
    1e24:	8a 81       	ldd	r24, Y+2	; 0x02
    1e26:	81 30       	cpi	r24, 0x01	; 1
    1e28:	41 f4       	brne	.+16     	; 0x1e3a <EXINT_Enable+0x3a>
	{
		GICR |= (1<<7);
    1e2a:	ab e5       	ldi	r26, 0x5B	; 91
    1e2c:	b0 e0       	ldi	r27, 0x00	; 0
    1e2e:	eb e5       	ldi	r30, 0x5B	; 91
    1e30:	f0 e0       	ldi	r31, 0x00	; 0
    1e32:	80 81       	ld	r24, Z
    1e34:	80 68       	ori	r24, 0x80	; 128
    1e36:	8c 93       	st	X, r24
    1e38:	0a c0       	rjmp	.+20     	; 0x1e4e <EXINT_Enable+0x4e>
	}
	else if (EXINT_ID ==2)
    1e3a:	8a 81       	ldd	r24, Y+2	; 0x02
    1e3c:	82 30       	cpi	r24, 0x02	; 2
    1e3e:	39 f4       	brne	.+14     	; 0x1e4e <EXINT_Enable+0x4e>
	{
		GICR |= (1<<5);
    1e40:	ab e5       	ldi	r26, 0x5B	; 91
    1e42:	b0 e0       	ldi	r27, 0x00	; 0
    1e44:	eb e5       	ldi	r30, 0x5B	; 91
    1e46:	f0 e0       	ldi	r31, 0x00	; 0
    1e48:	80 81       	ld	r24, Z
    1e4a:	80 62       	ori	r24, 0x20	; 32
    1e4c:	8c 93       	st	X, r24
	}
	  Local_enuErrorState = ES_OK;
    1e4e:	81 e0       	ldi	r24, 0x01	; 1
    1e50:	89 83       	std	Y+1, r24	; 0x01
	return Local_enuErrorState ;
    1e52:	89 81       	ldd	r24, Y+1	; 0x01
}
    1e54:	0f 90       	pop	r0
    1e56:	0f 90       	pop	r0
    1e58:	cf 91       	pop	r28
    1e5a:	df 91       	pop	r29
    1e5c:	08 95       	ret

00001e5e <EXINT_Disable>:

ES_t EXINT_Disable(u8 EXINT_ID)
{
    1e5e:	df 93       	push	r29
    1e60:	cf 93       	push	r28
    1e62:	00 d0       	rcall	.+0      	; 0x1e64 <EXINT_Disable+0x6>
    1e64:	cd b7       	in	r28, 0x3d	; 61
    1e66:	de b7       	in	r29, 0x3e	; 62
    1e68:	8a 83       	std	Y+2, r24	; 0x02
	ES_t Local_enuErrorState = ES_NOK;
    1e6a:	19 82       	std	Y+1, r1	; 0x01
	if (EXINT_ID ==0)
    1e6c:	8a 81       	ldd	r24, Y+2	; 0x02
    1e6e:	88 23       	and	r24, r24
    1e70:	41 f4       	brne	.+16     	; 0x1e82 <EXINT_Disable+0x24>
	{
		GICR &=~(1<<6);
    1e72:	ab e5       	ldi	r26, 0x5B	; 91
    1e74:	b0 e0       	ldi	r27, 0x00	; 0
    1e76:	eb e5       	ldi	r30, 0x5B	; 91
    1e78:	f0 e0       	ldi	r31, 0x00	; 0
    1e7a:	80 81       	ld	r24, Z
    1e7c:	8f 7b       	andi	r24, 0xBF	; 191
    1e7e:	8c 93       	st	X, r24
    1e80:	15 c0       	rjmp	.+42     	; 0x1eac <EXINT_Disable+0x4e>
	}
	else if (EXINT_ID==1)
    1e82:	8a 81       	ldd	r24, Y+2	; 0x02
    1e84:	81 30       	cpi	r24, 0x01	; 1
    1e86:	41 f4       	brne	.+16     	; 0x1e98 <EXINT_Disable+0x3a>
	{
		GICR &=~(1<<7);
    1e88:	ab e5       	ldi	r26, 0x5B	; 91
    1e8a:	b0 e0       	ldi	r27, 0x00	; 0
    1e8c:	eb e5       	ldi	r30, 0x5B	; 91
    1e8e:	f0 e0       	ldi	r31, 0x00	; 0
    1e90:	80 81       	ld	r24, Z
    1e92:	8f 77       	andi	r24, 0x7F	; 127
    1e94:	8c 93       	st	X, r24
    1e96:	0a c0       	rjmp	.+20     	; 0x1eac <EXINT_Disable+0x4e>
	}
	else if (EXINT_ID ==2)
    1e98:	8a 81       	ldd	r24, Y+2	; 0x02
    1e9a:	82 30       	cpi	r24, 0x02	; 2
    1e9c:	39 f4       	brne	.+14     	; 0x1eac <EXINT_Disable+0x4e>
	{
		GICR &=~(1<<5);
    1e9e:	ab e5       	ldi	r26, 0x5B	; 91
    1ea0:	b0 e0       	ldi	r27, 0x00	; 0
    1ea2:	eb e5       	ldi	r30, 0x5B	; 91
    1ea4:	f0 e0       	ldi	r31, 0x00	; 0
    1ea6:	80 81       	ld	r24, Z
    1ea8:	8f 7d       	andi	r24, 0xDF	; 223
    1eaa:	8c 93       	st	X, r24
	}

	 Local_enuErrorState = ES_OK;
    1eac:	81 e0       	ldi	r24, 0x01	; 1
    1eae:	89 83       	std	Y+1, r24	; 0x01
	return Local_enuErrorState ;
    1eb0:	89 81       	ldd	r24, Y+1	; 0x01

}
    1eb2:	0f 90       	pop	r0
    1eb4:	0f 90       	pop	r0
    1eb6:	cf 91       	pop	r28
    1eb8:	df 91       	pop	r29
    1eba:	08 95       	ret

00001ebc <EXINTGLOBAL_Enable>:

ES_t EXINTGLOBAL_Enable(void)
{
    1ebc:	df 93       	push	r29
    1ebe:	cf 93       	push	r28
    1ec0:	0f 92       	push	r0
    1ec2:	cd b7       	in	r28, 0x3d	; 61
    1ec4:	de b7       	in	r29, 0x3e	; 62
	ES_t Local_enuErrorState = ES_NOK;
    1ec6:	19 82       	std	Y+1, r1	; 0x01
	SREG |= (1<<7);
    1ec8:	af e5       	ldi	r26, 0x5F	; 95
    1eca:	b0 e0       	ldi	r27, 0x00	; 0
    1ecc:	ef e5       	ldi	r30, 0x5F	; 95
    1ece:	f0 e0       	ldi	r31, 0x00	; 0
    1ed0:	80 81       	ld	r24, Z
    1ed2:	80 68       	ori	r24, 0x80	; 128
    1ed4:	8c 93       	st	X, r24

	 Local_enuErrorState = ES_OK;
    1ed6:	81 e0       	ldi	r24, 0x01	; 1
    1ed8:	89 83       	std	Y+1, r24	; 0x01
	return Local_enuErrorState ;
    1eda:	89 81       	ldd	r24, Y+1	; 0x01
}
    1edc:	0f 90       	pop	r0
    1ede:	cf 91       	pop	r28
    1ee0:	df 91       	pop	r29
    1ee2:	08 95       	ret

00001ee4 <EXINTGLOBAL_Disable>:
ES_t EXINTGLOBAL_Disable(void)
{
    1ee4:	df 93       	push	r29
    1ee6:	cf 93       	push	r28
    1ee8:	0f 92       	push	r0
    1eea:	cd b7       	in	r28, 0x3d	; 61
    1eec:	de b7       	in	r29, 0x3e	; 62
	ES_t Local_enuErrorState = ES_NOK;
    1eee:	19 82       	std	Y+1, r1	; 0x01
	SREG &=~(1<<7);
    1ef0:	af e5       	ldi	r26, 0x5F	; 95
    1ef2:	b0 e0       	ldi	r27, 0x00	; 0
    1ef4:	ef e5       	ldi	r30, 0x5F	; 95
    1ef6:	f0 e0       	ldi	r31, 0x00	; 0
    1ef8:	80 81       	ld	r24, Z
    1efa:	8f 77       	andi	r24, 0x7F	; 127
    1efc:	8c 93       	st	X, r24
	 Local_enuErrorState = ES_OK;
    1efe:	81 e0       	ldi	r24, 0x01	; 1
    1f00:	89 83       	std	Y+1, r24	; 0x01
	return Local_enuErrorState ;
    1f02:	89 81       	ldd	r24, Y+1	; 0x01
}
    1f04:	0f 90       	pop	r0
    1f06:	cf 91       	pop	r28
    1f08:	df 91       	pop	r29
    1f0a:	08 95       	ret

00001f0c <EXINT_Callback>:

 ES_t EXINT_Callback(void (*Func_ptr) (void) , u8 EX_INT_ID )
 {
    1f0c:	df 93       	push	r29
    1f0e:	cf 93       	push	r28
    1f10:	00 d0       	rcall	.+0      	; 0x1f12 <EXINT_Callback+0x6>
    1f12:	00 d0       	rcall	.+0      	; 0x1f14 <EXINT_Callback+0x8>
    1f14:	00 d0       	rcall	.+0      	; 0x1f16 <EXINT_Callback+0xa>
    1f16:	cd b7       	in	r28, 0x3d	; 61
    1f18:	de b7       	in	r29, 0x3e	; 62
    1f1a:	9b 83       	std	Y+3, r25	; 0x03
    1f1c:	8a 83       	std	Y+2, r24	; 0x02
    1f1e:	6c 83       	std	Y+4, r22	; 0x04
	 ES_t Local_enuErrorState = ES_NOK;
    1f20:	19 82       	std	Y+1, r1	; 0x01
	 if(EX_INT_ID < 3)
    1f22:	8c 81       	ldd	r24, Y+4	; 0x04
    1f24:	83 30       	cpi	r24, 0x03	; 3
    1f26:	48 f5       	brcc	.+82     	; 0x1f7a <EXINT_Callback+0x6e>
	 {
	 switch(EX_INT_ID)
    1f28:	8c 81       	ldd	r24, Y+4	; 0x04
    1f2a:	28 2f       	mov	r18, r24
    1f2c:	30 e0       	ldi	r19, 0x00	; 0
    1f2e:	3e 83       	std	Y+6, r19	; 0x06
    1f30:	2d 83       	std	Y+5, r18	; 0x05
    1f32:	8d 81       	ldd	r24, Y+5	; 0x05
    1f34:	9e 81       	ldd	r25, Y+6	; 0x06
    1f36:	81 30       	cpi	r24, 0x01	; 1
    1f38:	91 05       	cpc	r25, r1
    1f3a:	81 f0       	breq	.+32     	; 0x1f5c <EXINT_Callback+0x50>
    1f3c:	2d 81       	ldd	r18, Y+5	; 0x05
    1f3e:	3e 81       	ldd	r19, Y+6	; 0x06
    1f40:	22 30       	cpi	r18, 0x02	; 2
    1f42:	31 05       	cpc	r19, r1
    1f44:	91 f0       	breq	.+36     	; 0x1f6a <EXINT_Callback+0x5e>
    1f46:	8d 81       	ldd	r24, Y+5	; 0x05
    1f48:	9e 81       	ldd	r25, Y+6	; 0x06
    1f4a:	00 97       	sbiw	r24, 0x00	; 0
    1f4c:	a1 f4       	brne	.+40     	; 0x1f76 <EXINT_Callback+0x6a>
	 {
	 case 0:
		   CallbackPtr_0=Func_ptr;
    1f4e:	8a 81       	ldd	r24, Y+2	; 0x02
    1f50:	9b 81       	ldd	r25, Y+3	; 0x03
    1f52:	90 93 9b 00 	sts	0x009B, r25
    1f56:	80 93 9a 00 	sts	0x009A, r24
    1f5a:	0d c0       	rjmp	.+26     	; 0x1f76 <EXINT_Callback+0x6a>
		    break;
	 case 1:
	 		 CallbackPtr_1=Func_ptr;
    1f5c:	8a 81       	ldd	r24, Y+2	; 0x02
    1f5e:	9b 81       	ldd	r25, Y+3	; 0x03
    1f60:	90 93 9d 00 	sts	0x009D, r25
    1f64:	80 93 9c 00 	sts	0x009C, r24
    1f68:	06 c0       	rjmp	.+12     	; 0x1f76 <EXINT_Callback+0x6a>
	 		 break;
	 case 2:
	 		 CallbackPtr_2=Func_ptr;
    1f6a:	8a 81       	ldd	r24, Y+2	; 0x02
    1f6c:	9b 81       	ldd	r25, Y+3	; 0x03
    1f6e:	90 93 9f 00 	sts	0x009F, r25
    1f72:	80 93 9e 00 	sts	0x009E, r24
	 		 break;

	 }
	 Local_enuErrorState = ES_OK;
    1f76:	81 e0       	ldi	r24, 0x01	; 1
    1f78:	89 83       	std	Y+1, r24	; 0x01
	 }

	 return Local_enuErrorState ;
    1f7a:	89 81       	ldd	r24, Y+1	; 0x01
 }
    1f7c:	26 96       	adiw	r28, 0x06	; 6
    1f7e:	0f b6       	in	r0, 0x3f	; 63
    1f80:	f8 94       	cli
    1f82:	de bf       	out	0x3e, r29	; 62
    1f84:	0f be       	out	0x3f, r0	; 63
    1f86:	cd bf       	out	0x3d, r28	; 61
    1f88:	cf 91       	pop	r28
    1f8a:	df 91       	pop	r29
    1f8c:	08 95       	ret

00001f8e <__vector_1>:

 ISR(VECT_INT0)
 {
    1f8e:	1f 92       	push	r1
    1f90:	0f 92       	push	r0
    1f92:	0f b6       	in	r0, 0x3f	; 63
    1f94:	0f 92       	push	r0
    1f96:	11 24       	eor	r1, r1
    1f98:	2f 93       	push	r18
    1f9a:	3f 93       	push	r19
    1f9c:	4f 93       	push	r20
    1f9e:	5f 93       	push	r21
    1fa0:	6f 93       	push	r22
    1fa2:	7f 93       	push	r23
    1fa4:	8f 93       	push	r24
    1fa6:	9f 93       	push	r25
    1fa8:	af 93       	push	r26
    1faa:	bf 93       	push	r27
    1fac:	ef 93       	push	r30
    1fae:	ff 93       	push	r31
    1fb0:	df 93       	push	r29
    1fb2:	cf 93       	push	r28
    1fb4:	cd b7       	in	r28, 0x3d	; 61
    1fb6:	de b7       	in	r29, 0x3e	; 62
	 if(  CallbackPtr_0 != NULL)
    1fb8:	80 91 9a 00 	lds	r24, 0x009A
    1fbc:	90 91 9b 00 	lds	r25, 0x009B
    1fc0:	00 97       	sbiw	r24, 0x00	; 0
    1fc2:	29 f0       	breq	.+10     	; 0x1fce <__vector_1+0x40>
	    CallbackPtr_0();
    1fc4:	e0 91 9a 00 	lds	r30, 0x009A
    1fc8:	f0 91 9b 00 	lds	r31, 0x009B
    1fcc:	09 95       	icall
 }
    1fce:	cf 91       	pop	r28
    1fd0:	df 91       	pop	r29
    1fd2:	ff 91       	pop	r31
    1fd4:	ef 91       	pop	r30
    1fd6:	bf 91       	pop	r27
    1fd8:	af 91       	pop	r26
    1fda:	9f 91       	pop	r25
    1fdc:	8f 91       	pop	r24
    1fde:	7f 91       	pop	r23
    1fe0:	6f 91       	pop	r22
    1fe2:	5f 91       	pop	r21
    1fe4:	4f 91       	pop	r20
    1fe6:	3f 91       	pop	r19
    1fe8:	2f 91       	pop	r18
    1fea:	0f 90       	pop	r0
    1fec:	0f be       	out	0x3f, r0	; 63
    1fee:	0f 90       	pop	r0
    1ff0:	1f 90       	pop	r1
    1ff2:	18 95       	reti

00001ff4 <__vector_2>:
 ISR(VECT_INT1)
 {
    1ff4:	1f 92       	push	r1
    1ff6:	0f 92       	push	r0
    1ff8:	0f b6       	in	r0, 0x3f	; 63
    1ffa:	0f 92       	push	r0
    1ffc:	11 24       	eor	r1, r1
    1ffe:	2f 93       	push	r18
    2000:	3f 93       	push	r19
    2002:	4f 93       	push	r20
    2004:	5f 93       	push	r21
    2006:	6f 93       	push	r22
    2008:	7f 93       	push	r23
    200a:	8f 93       	push	r24
    200c:	9f 93       	push	r25
    200e:	af 93       	push	r26
    2010:	bf 93       	push	r27
    2012:	ef 93       	push	r30
    2014:	ff 93       	push	r31
    2016:	df 93       	push	r29
    2018:	cf 93       	push	r28
    201a:	cd b7       	in	r28, 0x3d	; 61
    201c:	de b7       	in	r29, 0x3e	; 62
	 if(  CallbackPtr_1 != NULL)
    201e:	80 91 9c 00 	lds	r24, 0x009C
    2022:	90 91 9d 00 	lds	r25, 0x009D
    2026:	00 97       	sbiw	r24, 0x00	; 0
    2028:	29 f0       	breq	.+10     	; 0x2034 <__vector_2+0x40>
	    CallbackPtr_1();
    202a:	e0 91 9c 00 	lds	r30, 0x009C
    202e:	f0 91 9d 00 	lds	r31, 0x009D
    2032:	09 95       	icall
 }
    2034:	cf 91       	pop	r28
    2036:	df 91       	pop	r29
    2038:	ff 91       	pop	r31
    203a:	ef 91       	pop	r30
    203c:	bf 91       	pop	r27
    203e:	af 91       	pop	r26
    2040:	9f 91       	pop	r25
    2042:	8f 91       	pop	r24
    2044:	7f 91       	pop	r23
    2046:	6f 91       	pop	r22
    2048:	5f 91       	pop	r21
    204a:	4f 91       	pop	r20
    204c:	3f 91       	pop	r19
    204e:	2f 91       	pop	r18
    2050:	0f 90       	pop	r0
    2052:	0f be       	out	0x3f, r0	; 63
    2054:	0f 90       	pop	r0
    2056:	1f 90       	pop	r1
    2058:	18 95       	reti

0000205a <__vector_3>:
 ISR(VECT_INT2)
 {
    205a:	1f 92       	push	r1
    205c:	0f 92       	push	r0
    205e:	0f b6       	in	r0, 0x3f	; 63
    2060:	0f 92       	push	r0
    2062:	11 24       	eor	r1, r1
    2064:	2f 93       	push	r18
    2066:	3f 93       	push	r19
    2068:	4f 93       	push	r20
    206a:	5f 93       	push	r21
    206c:	6f 93       	push	r22
    206e:	7f 93       	push	r23
    2070:	8f 93       	push	r24
    2072:	9f 93       	push	r25
    2074:	af 93       	push	r26
    2076:	bf 93       	push	r27
    2078:	ef 93       	push	r30
    207a:	ff 93       	push	r31
    207c:	df 93       	push	r29
    207e:	cf 93       	push	r28
    2080:	cd b7       	in	r28, 0x3d	; 61
    2082:	de b7       	in	r29, 0x3e	; 62
	 if(  CallbackPtr_2 != NULL)
    2084:	80 91 9e 00 	lds	r24, 0x009E
    2088:	90 91 9f 00 	lds	r25, 0x009F
    208c:	00 97       	sbiw	r24, 0x00	; 0
    208e:	29 f0       	breq	.+10     	; 0x209a <__vector_3+0x40>
	    CallbackPtr_2();
    2090:	e0 91 9e 00 	lds	r30, 0x009E
    2094:	f0 91 9f 00 	lds	r31, 0x009F
    2098:	09 95       	icall
 }
    209a:	cf 91       	pop	r28
    209c:	df 91       	pop	r29
    209e:	ff 91       	pop	r31
    20a0:	ef 91       	pop	r30
    20a2:	bf 91       	pop	r27
    20a4:	af 91       	pop	r26
    20a6:	9f 91       	pop	r25
    20a8:	8f 91       	pop	r24
    20aa:	7f 91       	pop	r23
    20ac:	6f 91       	pop	r22
    20ae:	5f 91       	pop	r21
    20b0:	4f 91       	pop	r20
    20b2:	3f 91       	pop	r19
    20b4:	2f 91       	pop	r18
    20b6:	0f 90       	pop	r0
    20b8:	0f be       	out	0x3f, r0	; 63
    20ba:	0f 90       	pop	r0
    20bc:	1f 90       	pop	r1
    20be:	18 95       	reti

000020c0 <LCD_enuInit>:
#include "LCD_priv.h"

#include "util/delay.h"

ES_t LCD_enuInit(void)
{
    20c0:	df 93       	push	r29
    20c2:	cf 93       	push	r28
    20c4:	cd b7       	in	r28, 0x3d	; 61
    20c6:	de b7       	in	r29, 0x3e	; 62
    20c8:	e9 97       	sbiw	r28, 0x39	; 57
    20ca:	0f b6       	in	r0, 0x3f	; 63
    20cc:	f8 94       	cli
    20ce:	de bf       	out	0x3e, r29	; 62
    20d0:	0f be       	out	0x3f, r0	; 63
    20d2:	cd bf       	out	0x3d, r28	; 61
	ES_t Local_enuErrorState = ES_NOK;
    20d4:	19 ae       	std	Y+57, r1	; 0x39

	DIO_enuSetPinDirection(RS_PORT, RS_PIN, DIO_u8OUTPUT);
    20d6:	80 e0       	ldi	r24, 0x00	; 0
    20d8:	60 e0       	ldi	r22, 0x00	; 0
    20da:	41 e0       	ldi	r20, 0x01	; 1
    20dc:	0e 94 b7 0b 	call	0x176e	; 0x176e <DIO_enuSetPinDirection>
	DIO_enuSetPinDirection(RW_PORT, RW_PIN, DIO_u8OUTPUT);
    20e0:	80 e0       	ldi	r24, 0x00	; 0
    20e2:	61 e0       	ldi	r22, 0x01	; 1
    20e4:	41 e0       	ldi	r20, 0x01	; 1
    20e6:	0e 94 b7 0b 	call	0x176e	; 0x176e <DIO_enuSetPinDirection>
	DIO_enuSetPinDirection(EN_PORT, EN_PIN, DIO_u8OUTPUT);
    20ea:	80 e0       	ldi	r24, 0x00	; 0
    20ec:	62 e0       	ldi	r22, 0x02	; 2
    20ee:	41 e0       	ldi	r20, 0x01	; 1
    20f0:	0e 94 b7 0b 	call	0x176e	; 0x176e <DIO_enuSetPinDirection>

	DIO_enuSetPinDirection(D7_PORT, D7_PIN, DIO_u8OUTPUT);
    20f4:	81 e0       	ldi	r24, 0x01	; 1
    20f6:	60 e0       	ldi	r22, 0x00	; 0
    20f8:	41 e0       	ldi	r20, 0x01	; 1
    20fa:	0e 94 b7 0b 	call	0x176e	; 0x176e <DIO_enuSetPinDirection>
	DIO_enuSetPinDirection(D6_PORT, D6_PIN, DIO_u8OUTPUT);
    20fe:	81 e0       	ldi	r24, 0x01	; 1
    2100:	61 e0       	ldi	r22, 0x01	; 1
    2102:	41 e0       	ldi	r20, 0x01	; 1
    2104:	0e 94 b7 0b 	call	0x176e	; 0x176e <DIO_enuSetPinDirection>
	DIO_enuSetPinDirection(D5_PORT, D5_PIN, DIO_u8OUTPUT);
    2108:	81 e0       	ldi	r24, 0x01	; 1
    210a:	62 e0       	ldi	r22, 0x02	; 2
    210c:	41 e0       	ldi	r20, 0x01	; 1
    210e:	0e 94 b7 0b 	call	0x176e	; 0x176e <DIO_enuSetPinDirection>
	DIO_enuSetPinDirection(D4_PORT, D4_PIN, DIO_u8OUTPUT);
    2112:	81 e0       	ldi	r24, 0x01	; 1
    2114:	63 e0       	ldi	r22, 0x03	; 3
    2116:	41 e0       	ldi	r20, 0x01	; 1
    2118:	0e 94 b7 0b 	call	0x176e	; 0x176e <DIO_enuSetPinDirection>
    211c:	80 e0       	ldi	r24, 0x00	; 0
    211e:	90 e0       	ldi	r25, 0x00	; 0
    2120:	ac e0       	ldi	r26, 0x0C	; 12
    2122:	b2 e4       	ldi	r27, 0x42	; 66
    2124:	8d ab       	std	Y+53, r24	; 0x35
    2126:	9e ab       	std	Y+54, r25	; 0x36
    2128:	af ab       	std	Y+55, r26	; 0x37
    212a:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    212c:	6d a9       	ldd	r22, Y+53	; 0x35
    212e:	7e a9       	ldd	r23, Y+54	; 0x36
    2130:	8f a9       	ldd	r24, Y+55	; 0x37
    2132:	98 ad       	ldd	r25, Y+56	; 0x38
    2134:	20 e0       	ldi	r18, 0x00	; 0
    2136:	30 e0       	ldi	r19, 0x00	; 0
    2138:	4a e7       	ldi	r20, 0x7A	; 122
    213a:	53 e4       	ldi	r21, 0x43	; 67
    213c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2140:	dc 01       	movw	r26, r24
    2142:	cb 01       	movw	r24, r22
    2144:	89 ab       	std	Y+49, r24	; 0x31
    2146:	9a ab       	std	Y+50, r25	; 0x32
    2148:	ab ab       	std	Y+51, r26	; 0x33
    214a:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    214c:	69 a9       	ldd	r22, Y+49	; 0x31
    214e:	7a a9       	ldd	r23, Y+50	; 0x32
    2150:	8b a9       	ldd	r24, Y+51	; 0x33
    2152:	9c a9       	ldd	r25, Y+52	; 0x34
    2154:	20 e0       	ldi	r18, 0x00	; 0
    2156:	30 e0       	ldi	r19, 0x00	; 0
    2158:	40 e8       	ldi	r20, 0x80	; 128
    215a:	5f e3       	ldi	r21, 0x3F	; 63
    215c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2160:	88 23       	and	r24, r24
    2162:	2c f4       	brge	.+10     	; 0x216e <LCD_enuInit+0xae>
		__ticks = 1;
    2164:	81 e0       	ldi	r24, 0x01	; 1
    2166:	90 e0       	ldi	r25, 0x00	; 0
    2168:	98 ab       	std	Y+48, r25	; 0x30
    216a:	8f a7       	std	Y+47, r24	; 0x2f
    216c:	3f c0       	rjmp	.+126    	; 0x21ec <LCD_enuInit+0x12c>
	else if (__tmp > 65535)
    216e:	69 a9       	ldd	r22, Y+49	; 0x31
    2170:	7a a9       	ldd	r23, Y+50	; 0x32
    2172:	8b a9       	ldd	r24, Y+51	; 0x33
    2174:	9c a9       	ldd	r25, Y+52	; 0x34
    2176:	20 e0       	ldi	r18, 0x00	; 0
    2178:	3f ef       	ldi	r19, 0xFF	; 255
    217a:	4f e7       	ldi	r20, 0x7F	; 127
    217c:	57 e4       	ldi	r21, 0x47	; 71
    217e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2182:	18 16       	cp	r1, r24
    2184:	4c f5       	brge	.+82     	; 0x21d8 <LCD_enuInit+0x118>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2186:	6d a9       	ldd	r22, Y+53	; 0x35
    2188:	7e a9       	ldd	r23, Y+54	; 0x36
    218a:	8f a9       	ldd	r24, Y+55	; 0x37
    218c:	98 ad       	ldd	r25, Y+56	; 0x38
    218e:	20 e0       	ldi	r18, 0x00	; 0
    2190:	30 e0       	ldi	r19, 0x00	; 0
    2192:	40 e2       	ldi	r20, 0x20	; 32
    2194:	51 e4       	ldi	r21, 0x41	; 65
    2196:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    219a:	dc 01       	movw	r26, r24
    219c:	cb 01       	movw	r24, r22
    219e:	bc 01       	movw	r22, r24
    21a0:	cd 01       	movw	r24, r26
    21a2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    21a6:	dc 01       	movw	r26, r24
    21a8:	cb 01       	movw	r24, r22
    21aa:	98 ab       	std	Y+48, r25	; 0x30
    21ac:	8f a7       	std	Y+47, r24	; 0x2f
    21ae:	0f c0       	rjmp	.+30     	; 0x21ce <LCD_enuInit+0x10e>
    21b0:	89 e1       	ldi	r24, 0x19	; 25
    21b2:	90 e0       	ldi	r25, 0x00	; 0
    21b4:	9e a7       	std	Y+46, r25	; 0x2e
    21b6:	8d a7       	std	Y+45, r24	; 0x2d
    21b8:	8d a5       	ldd	r24, Y+45	; 0x2d
    21ba:	9e a5       	ldd	r25, Y+46	; 0x2e
    21bc:	01 97       	sbiw	r24, 0x01	; 1
    21be:	f1 f7       	brne	.-4      	; 0x21bc <LCD_enuInit+0xfc>
    21c0:	9e a7       	std	Y+46, r25	; 0x2e
    21c2:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    21c4:	8f a5       	ldd	r24, Y+47	; 0x2f
    21c6:	98 a9       	ldd	r25, Y+48	; 0x30
    21c8:	01 97       	sbiw	r24, 0x01	; 1
    21ca:	98 ab       	std	Y+48, r25	; 0x30
    21cc:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    21ce:	8f a5       	ldd	r24, Y+47	; 0x2f
    21d0:	98 a9       	ldd	r25, Y+48	; 0x30
    21d2:	00 97       	sbiw	r24, 0x00	; 0
    21d4:	69 f7       	brne	.-38     	; 0x21b0 <LCD_enuInit+0xf0>
    21d6:	14 c0       	rjmp	.+40     	; 0x2200 <LCD_enuInit+0x140>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    21d8:	69 a9       	ldd	r22, Y+49	; 0x31
    21da:	7a a9       	ldd	r23, Y+50	; 0x32
    21dc:	8b a9       	ldd	r24, Y+51	; 0x33
    21de:	9c a9       	ldd	r25, Y+52	; 0x34
    21e0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    21e4:	dc 01       	movw	r26, r24
    21e6:	cb 01       	movw	r24, r22
    21e8:	98 ab       	std	Y+48, r25	; 0x30
    21ea:	8f a7       	std	Y+47, r24	; 0x2f
    21ec:	8f a5       	ldd	r24, Y+47	; 0x2f
    21ee:	98 a9       	ldd	r25, Y+48	; 0x30
    21f0:	9c a7       	std	Y+44, r25	; 0x2c
    21f2:	8b a7       	std	Y+43, r24	; 0x2b
    21f4:	8b a5       	ldd	r24, Y+43	; 0x2b
    21f6:	9c a5       	ldd	r25, Y+44	; 0x2c
    21f8:	01 97       	sbiw	r24, 0x01	; 1
    21fa:	f1 f7       	brne	.-4      	; 0x21f8 <LCD_enuInit+0x138>
    21fc:	9c a7       	std	Y+44, r25	; 0x2c
    21fe:	8b a7       	std	Y+43, r24	; 0x2b

	_delay_ms(35);

#if LCD_MODE == EIGHT_BIT

	DIO_enuSetPinDirection(D3_PORT, D3_PIN, DIO_u8OUTPUT);
    2200:	81 e0       	ldi	r24, 0x01	; 1
    2202:	64 e0       	ldi	r22, 0x04	; 4
    2204:	41 e0       	ldi	r20, 0x01	; 1
    2206:	0e 94 b7 0b 	call	0x176e	; 0x176e <DIO_enuSetPinDirection>
	DIO_enuSetPinDirection(D2_PORT, D2_PIN, DIO_u8OUTPUT);
    220a:	81 e0       	ldi	r24, 0x01	; 1
    220c:	65 e0       	ldi	r22, 0x05	; 5
    220e:	41 e0       	ldi	r20, 0x01	; 1
    2210:	0e 94 b7 0b 	call	0x176e	; 0x176e <DIO_enuSetPinDirection>
	DIO_enuSetPinDirection(D1_PORT, D1_PIN, DIO_u8OUTPUT);
    2214:	81 e0       	ldi	r24, 0x01	; 1
    2216:	66 e0       	ldi	r22, 0x06	; 6
    2218:	41 e0       	ldi	r20, 0x01	; 1
    221a:	0e 94 b7 0b 	call	0x176e	; 0x176e <DIO_enuSetPinDirection>
	DIO_enuSetPinDirection(D0_PORT, D0_PIN, DIO_u8OUTPUT);
    221e:	81 e0       	ldi	r24, 0x01	; 1
    2220:	67 e0       	ldi	r22, 0x07	; 7
    2222:	41 e0       	ldi	r20, 0x01	; 1
    2224:	0e 94 b7 0b 	call	0x176e	; 0x176e <DIO_enuSetPinDirection>

	//function set
	LCD_invidSendCommend(0x38);
    2228:	88 e3       	ldi	r24, 0x38	; 56
    222a:	0e 94 cf 14 	call	0x299e	; 0x299e <LCD_invidSendCommend>
    222e:	80 e0       	ldi	r24, 0x00	; 0
    2230:	90 e0       	ldi	r25, 0x00	; 0
    2232:	a0 e8       	ldi	r26, 0x80	; 128
    2234:	bf e3       	ldi	r27, 0x3F	; 63
    2236:	8f a3       	std	Y+39, r24	; 0x27
    2238:	98 a7       	std	Y+40, r25	; 0x28
    223a:	a9 a7       	std	Y+41, r26	; 0x29
    223c:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    223e:	6f a1       	ldd	r22, Y+39	; 0x27
    2240:	78 a5       	ldd	r23, Y+40	; 0x28
    2242:	89 a5       	ldd	r24, Y+41	; 0x29
    2244:	9a a5       	ldd	r25, Y+42	; 0x2a
    2246:	20 e0       	ldi	r18, 0x00	; 0
    2248:	30 e0       	ldi	r19, 0x00	; 0
    224a:	4a e7       	ldi	r20, 0x7A	; 122
    224c:	53 e4       	ldi	r21, 0x43	; 67
    224e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2252:	dc 01       	movw	r26, r24
    2254:	cb 01       	movw	r24, r22
    2256:	8b a3       	std	Y+35, r24	; 0x23
    2258:	9c a3       	std	Y+36, r25	; 0x24
    225a:	ad a3       	std	Y+37, r26	; 0x25
    225c:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    225e:	6b a1       	ldd	r22, Y+35	; 0x23
    2260:	7c a1       	ldd	r23, Y+36	; 0x24
    2262:	8d a1       	ldd	r24, Y+37	; 0x25
    2264:	9e a1       	ldd	r25, Y+38	; 0x26
    2266:	20 e0       	ldi	r18, 0x00	; 0
    2268:	30 e0       	ldi	r19, 0x00	; 0
    226a:	40 e8       	ldi	r20, 0x80	; 128
    226c:	5f e3       	ldi	r21, 0x3F	; 63
    226e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2272:	88 23       	and	r24, r24
    2274:	2c f4       	brge	.+10     	; 0x2280 <LCD_enuInit+0x1c0>
		__ticks = 1;
    2276:	81 e0       	ldi	r24, 0x01	; 1
    2278:	90 e0       	ldi	r25, 0x00	; 0
    227a:	9a a3       	std	Y+34, r25	; 0x22
    227c:	89 a3       	std	Y+33, r24	; 0x21
    227e:	3f c0       	rjmp	.+126    	; 0x22fe <LCD_enuInit+0x23e>
	else if (__tmp > 65535)
    2280:	6b a1       	ldd	r22, Y+35	; 0x23
    2282:	7c a1       	ldd	r23, Y+36	; 0x24
    2284:	8d a1       	ldd	r24, Y+37	; 0x25
    2286:	9e a1       	ldd	r25, Y+38	; 0x26
    2288:	20 e0       	ldi	r18, 0x00	; 0
    228a:	3f ef       	ldi	r19, 0xFF	; 255
    228c:	4f e7       	ldi	r20, 0x7F	; 127
    228e:	57 e4       	ldi	r21, 0x47	; 71
    2290:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2294:	18 16       	cp	r1, r24
    2296:	4c f5       	brge	.+82     	; 0x22ea <LCD_enuInit+0x22a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2298:	6f a1       	ldd	r22, Y+39	; 0x27
    229a:	78 a5       	ldd	r23, Y+40	; 0x28
    229c:	89 a5       	ldd	r24, Y+41	; 0x29
    229e:	9a a5       	ldd	r25, Y+42	; 0x2a
    22a0:	20 e0       	ldi	r18, 0x00	; 0
    22a2:	30 e0       	ldi	r19, 0x00	; 0
    22a4:	40 e2       	ldi	r20, 0x20	; 32
    22a6:	51 e4       	ldi	r21, 0x41	; 65
    22a8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    22ac:	dc 01       	movw	r26, r24
    22ae:	cb 01       	movw	r24, r22
    22b0:	bc 01       	movw	r22, r24
    22b2:	cd 01       	movw	r24, r26
    22b4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    22b8:	dc 01       	movw	r26, r24
    22ba:	cb 01       	movw	r24, r22
    22bc:	9a a3       	std	Y+34, r25	; 0x22
    22be:	89 a3       	std	Y+33, r24	; 0x21
    22c0:	0f c0       	rjmp	.+30     	; 0x22e0 <LCD_enuInit+0x220>
    22c2:	89 e1       	ldi	r24, 0x19	; 25
    22c4:	90 e0       	ldi	r25, 0x00	; 0
    22c6:	98 a3       	std	Y+32, r25	; 0x20
    22c8:	8f 8f       	std	Y+31, r24	; 0x1f
    22ca:	8f 8d       	ldd	r24, Y+31	; 0x1f
    22cc:	98 a1       	ldd	r25, Y+32	; 0x20
    22ce:	01 97       	sbiw	r24, 0x01	; 1
    22d0:	f1 f7       	brne	.-4      	; 0x22ce <LCD_enuInit+0x20e>
    22d2:	98 a3       	std	Y+32, r25	; 0x20
    22d4:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    22d6:	89 a1       	ldd	r24, Y+33	; 0x21
    22d8:	9a a1       	ldd	r25, Y+34	; 0x22
    22da:	01 97       	sbiw	r24, 0x01	; 1
    22dc:	9a a3       	std	Y+34, r25	; 0x22
    22de:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    22e0:	89 a1       	ldd	r24, Y+33	; 0x21
    22e2:	9a a1       	ldd	r25, Y+34	; 0x22
    22e4:	00 97       	sbiw	r24, 0x00	; 0
    22e6:	69 f7       	brne	.-38     	; 0x22c2 <LCD_enuInit+0x202>
    22e8:	14 c0       	rjmp	.+40     	; 0x2312 <LCD_enuInit+0x252>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    22ea:	6b a1       	ldd	r22, Y+35	; 0x23
    22ec:	7c a1       	ldd	r23, Y+36	; 0x24
    22ee:	8d a1       	ldd	r24, Y+37	; 0x25
    22f0:	9e a1       	ldd	r25, Y+38	; 0x26
    22f2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    22f6:	dc 01       	movw	r26, r24
    22f8:	cb 01       	movw	r24, r22
    22fa:	9a a3       	std	Y+34, r25	; 0x22
    22fc:	89 a3       	std	Y+33, r24	; 0x21
    22fe:	89 a1       	ldd	r24, Y+33	; 0x21
    2300:	9a a1       	ldd	r25, Y+34	; 0x22
    2302:	9e 8f       	std	Y+30, r25	; 0x1e
    2304:	8d 8f       	std	Y+29, r24	; 0x1d
    2306:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2308:	9e 8d       	ldd	r25, Y+30	; 0x1e
    230a:	01 97       	sbiw	r24, 0x01	; 1
    230c:	f1 f7       	brne	.-4      	; 0x230a <LCD_enuInit+0x24a>
    230e:	9e 8f       	std	Y+30, r25	; 0x1e
    2310:	8d 8f       	std	Y+29, r24	; 0x1d
#elif LCD_MODE == FOUR_BIT
	LCD_invidSendCommend(0x28);
#endif
	_delay_ms(1);
	LCD_invidSendCommend(0x0f);
    2312:	8f e0       	ldi	r24, 0x0F	; 15
    2314:	0e 94 cf 14 	call	0x299e	; 0x299e <LCD_invidSendCommend>
    2318:	80 e0       	ldi	r24, 0x00	; 0
    231a:	90 e0       	ldi	r25, 0x00	; 0
    231c:	a0 e8       	ldi	r26, 0x80	; 128
    231e:	bf e3       	ldi	r27, 0x3F	; 63
    2320:	89 8f       	std	Y+25, r24	; 0x19
    2322:	9a 8f       	std	Y+26, r25	; 0x1a
    2324:	ab 8f       	std	Y+27, r26	; 0x1b
    2326:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2328:	69 8d       	ldd	r22, Y+25	; 0x19
    232a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    232c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    232e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2330:	20 e0       	ldi	r18, 0x00	; 0
    2332:	30 e0       	ldi	r19, 0x00	; 0
    2334:	4a e7       	ldi	r20, 0x7A	; 122
    2336:	53 e4       	ldi	r21, 0x43	; 67
    2338:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    233c:	dc 01       	movw	r26, r24
    233e:	cb 01       	movw	r24, r22
    2340:	8d 8b       	std	Y+21, r24	; 0x15
    2342:	9e 8b       	std	Y+22, r25	; 0x16
    2344:	af 8b       	std	Y+23, r26	; 0x17
    2346:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2348:	6d 89       	ldd	r22, Y+21	; 0x15
    234a:	7e 89       	ldd	r23, Y+22	; 0x16
    234c:	8f 89       	ldd	r24, Y+23	; 0x17
    234e:	98 8d       	ldd	r25, Y+24	; 0x18
    2350:	20 e0       	ldi	r18, 0x00	; 0
    2352:	30 e0       	ldi	r19, 0x00	; 0
    2354:	40 e8       	ldi	r20, 0x80	; 128
    2356:	5f e3       	ldi	r21, 0x3F	; 63
    2358:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    235c:	88 23       	and	r24, r24
    235e:	2c f4       	brge	.+10     	; 0x236a <LCD_enuInit+0x2aa>
		__ticks = 1;
    2360:	81 e0       	ldi	r24, 0x01	; 1
    2362:	90 e0       	ldi	r25, 0x00	; 0
    2364:	9c 8b       	std	Y+20, r25	; 0x14
    2366:	8b 8b       	std	Y+19, r24	; 0x13
    2368:	3f c0       	rjmp	.+126    	; 0x23e8 <LCD_enuInit+0x328>
	else if (__tmp > 65535)
    236a:	6d 89       	ldd	r22, Y+21	; 0x15
    236c:	7e 89       	ldd	r23, Y+22	; 0x16
    236e:	8f 89       	ldd	r24, Y+23	; 0x17
    2370:	98 8d       	ldd	r25, Y+24	; 0x18
    2372:	20 e0       	ldi	r18, 0x00	; 0
    2374:	3f ef       	ldi	r19, 0xFF	; 255
    2376:	4f e7       	ldi	r20, 0x7F	; 127
    2378:	57 e4       	ldi	r21, 0x47	; 71
    237a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    237e:	18 16       	cp	r1, r24
    2380:	4c f5       	brge	.+82     	; 0x23d4 <LCD_enuInit+0x314>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2382:	69 8d       	ldd	r22, Y+25	; 0x19
    2384:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2386:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2388:	9c 8d       	ldd	r25, Y+28	; 0x1c
    238a:	20 e0       	ldi	r18, 0x00	; 0
    238c:	30 e0       	ldi	r19, 0x00	; 0
    238e:	40 e2       	ldi	r20, 0x20	; 32
    2390:	51 e4       	ldi	r21, 0x41	; 65
    2392:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2396:	dc 01       	movw	r26, r24
    2398:	cb 01       	movw	r24, r22
    239a:	bc 01       	movw	r22, r24
    239c:	cd 01       	movw	r24, r26
    239e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    23a2:	dc 01       	movw	r26, r24
    23a4:	cb 01       	movw	r24, r22
    23a6:	9c 8b       	std	Y+20, r25	; 0x14
    23a8:	8b 8b       	std	Y+19, r24	; 0x13
    23aa:	0f c0       	rjmp	.+30     	; 0x23ca <LCD_enuInit+0x30a>
    23ac:	89 e1       	ldi	r24, 0x19	; 25
    23ae:	90 e0       	ldi	r25, 0x00	; 0
    23b0:	9a 8b       	std	Y+18, r25	; 0x12
    23b2:	89 8b       	std	Y+17, r24	; 0x11
    23b4:	89 89       	ldd	r24, Y+17	; 0x11
    23b6:	9a 89       	ldd	r25, Y+18	; 0x12
    23b8:	01 97       	sbiw	r24, 0x01	; 1
    23ba:	f1 f7       	brne	.-4      	; 0x23b8 <LCD_enuInit+0x2f8>
    23bc:	9a 8b       	std	Y+18, r25	; 0x12
    23be:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    23c0:	8b 89       	ldd	r24, Y+19	; 0x13
    23c2:	9c 89       	ldd	r25, Y+20	; 0x14
    23c4:	01 97       	sbiw	r24, 0x01	; 1
    23c6:	9c 8b       	std	Y+20, r25	; 0x14
    23c8:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    23ca:	8b 89       	ldd	r24, Y+19	; 0x13
    23cc:	9c 89       	ldd	r25, Y+20	; 0x14
    23ce:	00 97       	sbiw	r24, 0x00	; 0
    23d0:	69 f7       	brne	.-38     	; 0x23ac <LCD_enuInit+0x2ec>
    23d2:	14 c0       	rjmp	.+40     	; 0x23fc <LCD_enuInit+0x33c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    23d4:	6d 89       	ldd	r22, Y+21	; 0x15
    23d6:	7e 89       	ldd	r23, Y+22	; 0x16
    23d8:	8f 89       	ldd	r24, Y+23	; 0x17
    23da:	98 8d       	ldd	r25, Y+24	; 0x18
    23dc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    23e0:	dc 01       	movw	r26, r24
    23e2:	cb 01       	movw	r24, r22
    23e4:	9c 8b       	std	Y+20, r25	; 0x14
    23e6:	8b 8b       	std	Y+19, r24	; 0x13
    23e8:	8b 89       	ldd	r24, Y+19	; 0x13
    23ea:	9c 89       	ldd	r25, Y+20	; 0x14
    23ec:	98 8b       	std	Y+16, r25	; 0x10
    23ee:	8f 87       	std	Y+15, r24	; 0x0f
    23f0:	8f 85       	ldd	r24, Y+15	; 0x0f
    23f2:	98 89       	ldd	r25, Y+16	; 0x10
    23f4:	01 97       	sbiw	r24, 0x01	; 1
    23f6:	f1 f7       	brne	.-4      	; 0x23f4 <LCD_enuInit+0x334>
    23f8:	98 8b       	std	Y+16, r25	; 0x10
    23fa:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1);
	LCD_invidSendCommend(0x01);
    23fc:	81 e0       	ldi	r24, 0x01	; 1
    23fe:	0e 94 cf 14 	call	0x299e	; 0x299e <LCD_invidSendCommend>
    2402:	80 e0       	ldi	r24, 0x00	; 0
    2404:	90 e0       	ldi	r25, 0x00	; 0
    2406:	a0 e0       	ldi	r26, 0x00	; 0
    2408:	b0 e4       	ldi	r27, 0x40	; 64
    240a:	8b 87       	std	Y+11, r24	; 0x0b
    240c:	9c 87       	std	Y+12, r25	; 0x0c
    240e:	ad 87       	std	Y+13, r26	; 0x0d
    2410:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2412:	6b 85       	ldd	r22, Y+11	; 0x0b
    2414:	7c 85       	ldd	r23, Y+12	; 0x0c
    2416:	8d 85       	ldd	r24, Y+13	; 0x0d
    2418:	9e 85       	ldd	r25, Y+14	; 0x0e
    241a:	20 e0       	ldi	r18, 0x00	; 0
    241c:	30 e0       	ldi	r19, 0x00	; 0
    241e:	4a e7       	ldi	r20, 0x7A	; 122
    2420:	53 e4       	ldi	r21, 0x43	; 67
    2422:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2426:	dc 01       	movw	r26, r24
    2428:	cb 01       	movw	r24, r22
    242a:	8f 83       	std	Y+7, r24	; 0x07
    242c:	98 87       	std	Y+8, r25	; 0x08
    242e:	a9 87       	std	Y+9, r26	; 0x09
    2430:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2432:	6f 81       	ldd	r22, Y+7	; 0x07
    2434:	78 85       	ldd	r23, Y+8	; 0x08
    2436:	89 85       	ldd	r24, Y+9	; 0x09
    2438:	9a 85       	ldd	r25, Y+10	; 0x0a
    243a:	20 e0       	ldi	r18, 0x00	; 0
    243c:	30 e0       	ldi	r19, 0x00	; 0
    243e:	40 e8       	ldi	r20, 0x80	; 128
    2440:	5f e3       	ldi	r21, 0x3F	; 63
    2442:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2446:	88 23       	and	r24, r24
    2448:	2c f4       	brge	.+10     	; 0x2454 <LCD_enuInit+0x394>
		__ticks = 1;
    244a:	81 e0       	ldi	r24, 0x01	; 1
    244c:	90 e0       	ldi	r25, 0x00	; 0
    244e:	9e 83       	std	Y+6, r25	; 0x06
    2450:	8d 83       	std	Y+5, r24	; 0x05
    2452:	3f c0       	rjmp	.+126    	; 0x24d2 <LCD_enuInit+0x412>
	else if (__tmp > 65535)
    2454:	6f 81       	ldd	r22, Y+7	; 0x07
    2456:	78 85       	ldd	r23, Y+8	; 0x08
    2458:	89 85       	ldd	r24, Y+9	; 0x09
    245a:	9a 85       	ldd	r25, Y+10	; 0x0a
    245c:	20 e0       	ldi	r18, 0x00	; 0
    245e:	3f ef       	ldi	r19, 0xFF	; 255
    2460:	4f e7       	ldi	r20, 0x7F	; 127
    2462:	57 e4       	ldi	r21, 0x47	; 71
    2464:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2468:	18 16       	cp	r1, r24
    246a:	4c f5       	brge	.+82     	; 0x24be <LCD_enuInit+0x3fe>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    246c:	6b 85       	ldd	r22, Y+11	; 0x0b
    246e:	7c 85       	ldd	r23, Y+12	; 0x0c
    2470:	8d 85       	ldd	r24, Y+13	; 0x0d
    2472:	9e 85       	ldd	r25, Y+14	; 0x0e
    2474:	20 e0       	ldi	r18, 0x00	; 0
    2476:	30 e0       	ldi	r19, 0x00	; 0
    2478:	40 e2       	ldi	r20, 0x20	; 32
    247a:	51 e4       	ldi	r21, 0x41	; 65
    247c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2480:	dc 01       	movw	r26, r24
    2482:	cb 01       	movw	r24, r22
    2484:	bc 01       	movw	r22, r24
    2486:	cd 01       	movw	r24, r26
    2488:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    248c:	dc 01       	movw	r26, r24
    248e:	cb 01       	movw	r24, r22
    2490:	9e 83       	std	Y+6, r25	; 0x06
    2492:	8d 83       	std	Y+5, r24	; 0x05
    2494:	0f c0       	rjmp	.+30     	; 0x24b4 <LCD_enuInit+0x3f4>
    2496:	89 e1       	ldi	r24, 0x19	; 25
    2498:	90 e0       	ldi	r25, 0x00	; 0
    249a:	9c 83       	std	Y+4, r25	; 0x04
    249c:	8b 83       	std	Y+3, r24	; 0x03
    249e:	8b 81       	ldd	r24, Y+3	; 0x03
    24a0:	9c 81       	ldd	r25, Y+4	; 0x04
    24a2:	01 97       	sbiw	r24, 0x01	; 1
    24a4:	f1 f7       	brne	.-4      	; 0x24a2 <LCD_enuInit+0x3e2>
    24a6:	9c 83       	std	Y+4, r25	; 0x04
    24a8:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    24aa:	8d 81       	ldd	r24, Y+5	; 0x05
    24ac:	9e 81       	ldd	r25, Y+6	; 0x06
    24ae:	01 97       	sbiw	r24, 0x01	; 1
    24b0:	9e 83       	std	Y+6, r25	; 0x06
    24b2:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    24b4:	8d 81       	ldd	r24, Y+5	; 0x05
    24b6:	9e 81       	ldd	r25, Y+6	; 0x06
    24b8:	00 97       	sbiw	r24, 0x00	; 0
    24ba:	69 f7       	brne	.-38     	; 0x2496 <LCD_enuInit+0x3d6>
    24bc:	14 c0       	rjmp	.+40     	; 0x24e6 <LCD_enuInit+0x426>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    24be:	6f 81       	ldd	r22, Y+7	; 0x07
    24c0:	78 85       	ldd	r23, Y+8	; 0x08
    24c2:	89 85       	ldd	r24, Y+9	; 0x09
    24c4:	9a 85       	ldd	r25, Y+10	; 0x0a
    24c6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    24ca:	dc 01       	movw	r26, r24
    24cc:	cb 01       	movw	r24, r22
    24ce:	9e 83       	std	Y+6, r25	; 0x06
    24d0:	8d 83       	std	Y+5, r24	; 0x05
    24d2:	8d 81       	ldd	r24, Y+5	; 0x05
    24d4:	9e 81       	ldd	r25, Y+6	; 0x06
    24d6:	9a 83       	std	Y+2, r25	; 0x02
    24d8:	89 83       	std	Y+1, r24	; 0x01
    24da:	89 81       	ldd	r24, Y+1	; 0x01
    24dc:	9a 81       	ldd	r25, Y+2	; 0x02
    24de:	01 97       	sbiw	r24, 0x01	; 1
    24e0:	f1 f7       	brne	.-4      	; 0x24de <LCD_enuInit+0x41e>
    24e2:	9a 83       	std	Y+2, r25	; 0x02
    24e4:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
	LCD_invidSendCommend(0x06);
    24e6:	86 e0       	ldi	r24, 0x06	; 6
    24e8:	0e 94 cf 14 	call	0x299e	; 0x299e <LCD_invidSendCommend>

	return Local_enuErrorState;
    24ec:	89 ad       	ldd	r24, Y+57	; 0x39
}
    24ee:	e9 96       	adiw	r28, 0x39	; 57
    24f0:	0f b6       	in	r0, 0x3f	; 63
    24f2:	f8 94       	cli
    24f4:	de bf       	out	0x3e, r29	; 62
    24f6:	0f be       	out	0x3f, r0	; 63
    24f8:	cd bf       	out	0x3d, r28	; 61
    24fa:	cf 91       	pop	r28
    24fc:	df 91       	pop	r29
    24fe:	08 95       	ret

00002500 <LCD_enuDisplayChar>:

ES_t LCD_enuDisplayChar(u8 Copy_u8Data)
{
    2500:	df 93       	push	r29
    2502:	cf 93       	push	r28
    2504:	00 d0       	rcall	.+0      	; 0x2506 <LCD_enuDisplayChar+0x6>
    2506:	cd b7       	in	r28, 0x3d	; 61
    2508:	de b7       	in	r29, 0x3e	; 62
    250a:	8a 83       	std	Y+2, r24	; 0x02
	ES_t Local_enuErrorState = ES_NOK;
    250c:	19 82       	std	Y+1, r1	; 0x01

	DIO_enuSetPinValue(RS_PORT , RS_PIN , DIO_u8HIGH);
    250e:	80 e0       	ldi	r24, 0x00	; 0
    2510:	60 e0       	ldi	r22, 0x00	; 0
    2512:	41 e0       	ldi	r20, 0x01	; 1
    2514:	0e 94 a3 0c 	call	0x1946	; 0x1946 <DIO_enuSetPinValue>

	LCD_vidLatch(Copy_u8Data);
    2518:	8a 81       	ldd	r24, Y+2	; 0x02
    251a:	0e 94 72 13 	call	0x26e4	; 0x26e4 <LCD_vidLatch>

	return Local_enuErrorState;
    251e:	89 81       	ldd	r24, Y+1	; 0x01
}
    2520:	0f 90       	pop	r0
    2522:	0f 90       	pop	r0
    2524:	cf 91       	pop	r28
    2526:	df 91       	pop	r29
    2528:	08 95       	ret

0000252a <LCD_enuSendCommand>:

ES_t LCD_enuSendCommand(u8 Copy_u8Command)
{
    252a:	df 93       	push	r29
    252c:	cf 93       	push	r28
    252e:	00 d0       	rcall	.+0      	; 0x2530 <LCD_enuSendCommand+0x6>
    2530:	cd b7       	in	r28, 0x3d	; 61
    2532:	de b7       	in	r29, 0x3e	; 62
    2534:	8a 83       	std	Y+2, r24	; 0x02
	ES_t Local_enuErrorState = ES_NOK;
    2536:	19 82       	std	Y+1, r1	; 0x01

	// set rs as command
	DIO_enuSetPinValue(RS_PORT , RS_PIN , DIO_u8LOW);
    2538:	80 e0       	ldi	r24, 0x00	; 0
    253a:	60 e0       	ldi	r22, 0x00	; 0
    253c:	40 e0       	ldi	r20, 0x00	; 0
    253e:	0e 94 a3 0c 	call	0x1946	; 0x1946 <DIO_enuSetPinValue>

	LCD_vidLatch(Copy_u8Command);
    2542:	8a 81       	ldd	r24, Y+2	; 0x02
    2544:	0e 94 72 13 	call	0x26e4	; 0x26e4 <LCD_vidLatch>


	return Local_enuErrorState;
    2548:	89 81       	ldd	r24, Y+1	; 0x01
}
    254a:	0f 90       	pop	r0
    254c:	0f 90       	pop	r0
    254e:	cf 91       	pop	r28
    2550:	df 91       	pop	r29
    2552:	08 95       	ret

00002554 <LCD_enuDisplayIntegerNum>:


ES_t LCD_enuDisplayIntegerNum(s32 Copy_s32Num)
{
    2554:	df 93       	push	r29
    2556:	cf 93       	push	r28
    2558:	cd b7       	in	r28, 0x3d	; 61
    255a:	de b7       	in	r29, 0x3e	; 62
    255c:	2b 97       	sbiw	r28, 0x0b	; 11
    255e:	0f b6       	in	r0, 0x3f	; 63
    2560:	f8 94       	cli
    2562:	de bf       	out	0x3e, r29	; 62
    2564:	0f be       	out	0x3f, r0	; 63
    2566:	cd bf       	out	0x3d, r28	; 61
    2568:	68 87       	std	Y+8, r22	; 0x08
    256a:	79 87       	std	Y+9, r23	; 0x09
    256c:	8a 87       	std	Y+10, r24	; 0x0a
    256e:	9b 87       	std	Y+11, r25	; 0x0b
	ES_t Local_enuErrorState = ES_NOK;
    2570:	1f 82       	std	Y+7, r1	; 0x07

	s32 Local_s32Reverse=0;
    2572:	1b 82       	std	Y+3, r1	; 0x03
    2574:	1c 82       	std	Y+4, r1	; 0x04
    2576:	1d 82       	std	Y+5, r1	; 0x05
    2578:	1e 82       	std	Y+6, r1	; 0x06
	u8 Local_u8Remainder=0 , Local_u8NumDigit=0;
    257a:	1a 82       	std	Y+2, r1	; 0x02
    257c:	19 82       	std	Y+1, r1	; 0x01

	if(Copy_s32Num==0)
    257e:	88 85       	ldd	r24, Y+8	; 0x08
    2580:	99 85       	ldd	r25, Y+9	; 0x09
    2582:	aa 85       	ldd	r26, Y+10	; 0x0a
    2584:	bb 85       	ldd	r27, Y+11	; 0x0b
    2586:	00 97       	sbiw	r24, 0x00	; 0
    2588:	a1 05       	cpc	r26, r1
    258a:	b1 05       	cpc	r27, r1
    258c:	49 f4       	brne	.+18     	; 0x25a0 <LCD_enuDisplayIntegerNum+0x4c>
	{
		DIO_enuSetPinValue(RS_PORT , RS_PIN , DIO_u8HIGH);
    258e:	80 e0       	ldi	r24, 0x00	; 0
    2590:	60 e0       	ldi	r22, 0x00	; 0
    2592:	41 e0       	ldi	r20, 0x01	; 1
    2594:	0e 94 a3 0c 	call	0x1946	; 0x1946 <DIO_enuSetPinValue>
				LCD_vidLatch('0');
    2598:	80 e3       	ldi	r24, 0x30	; 48
    259a:	0e 94 72 13 	call	0x26e4	; 0x26e4 <LCD_vidLatch>
    259e:	98 c0       	rjmp	.+304    	; 0x26d0 <LCD_enuDisplayIntegerNum+0x17c>
	}
	else
	{


	if(Copy_s32Num <0)
    25a0:	88 85       	ldd	r24, Y+8	; 0x08
    25a2:	99 85       	ldd	r25, Y+9	; 0x09
    25a4:	aa 85       	ldd	r26, Y+10	; 0x0a
    25a6:	bb 85       	ldd	r27, Y+11	; 0x0b
    25a8:	bb 23       	and	r27, r27
    25aa:	0c f0       	brlt	.+2      	; 0x25ae <LCD_enuDisplayIntegerNum+0x5a>
    25ac:	57 c0       	rjmp	.+174    	; 0x265c <LCD_enuDisplayIntegerNum+0x108>
	{
		DIO_enuSetPinValue(RS_PORT , RS_PIN , DIO_u8HIGH);
    25ae:	80 e0       	ldi	r24, 0x00	; 0
    25b0:	60 e0       	ldi	r22, 0x00	; 0
    25b2:	41 e0       	ldi	r20, 0x01	; 1
    25b4:	0e 94 a3 0c 	call	0x1946	; 0x1946 <DIO_enuSetPinValue>
		LCD_vidLatch('-');
    25b8:	8d e2       	ldi	r24, 0x2D	; 45
    25ba:	0e 94 72 13 	call	0x26e4	; 0x26e4 <LCD_vidLatch>
		Copy_s32Num *= -1 ;
    25be:	88 85       	ldd	r24, Y+8	; 0x08
    25c0:	99 85       	ldd	r25, Y+9	; 0x09
    25c2:	aa 85       	ldd	r26, Y+10	; 0x0a
    25c4:	bb 85       	ldd	r27, Y+11	; 0x0b
    25c6:	b0 95       	com	r27
    25c8:	a0 95       	com	r26
    25ca:	90 95       	com	r25
    25cc:	81 95       	neg	r24
    25ce:	9f 4f       	sbci	r25, 0xFF	; 255
    25d0:	af 4f       	sbci	r26, 0xFF	; 255
    25d2:	bf 4f       	sbci	r27, 0xFF	; 255
    25d4:	88 87       	std	Y+8, r24	; 0x08
    25d6:	99 87       	std	Y+9, r25	; 0x09
    25d8:	aa 87       	std	Y+10, r26	; 0x0a
    25da:	bb 87       	std	Y+11, r27	; 0x0b
    25dc:	3f c0       	rjmp	.+126    	; 0x265c <LCD_enuDisplayIntegerNum+0x108>
	}
	while (Copy_s32Num)
	{
		Local_u8Remainder = Copy_s32Num % 10;
    25de:	88 85       	ldd	r24, Y+8	; 0x08
    25e0:	99 85       	ldd	r25, Y+9	; 0x09
    25e2:	aa 85       	ldd	r26, Y+10	; 0x0a
    25e4:	bb 85       	ldd	r27, Y+11	; 0x0b
    25e6:	2a e0       	ldi	r18, 0x0A	; 10
    25e8:	30 e0       	ldi	r19, 0x00	; 0
    25ea:	40 e0       	ldi	r20, 0x00	; 0
    25ec:	50 e0       	ldi	r21, 0x00	; 0
    25ee:	bc 01       	movw	r22, r24
    25f0:	cd 01       	movw	r24, r26
    25f2:	0e 94 da 16 	call	0x2db4	; 0x2db4 <__divmodsi4>
    25f6:	dc 01       	movw	r26, r24
    25f8:	cb 01       	movw	r24, r22
    25fa:	8a 83       	std	Y+2, r24	; 0x02
		Local_s32Reverse = Local_s32Reverse * 10 + Local_u8Remainder;
    25fc:	8b 81       	ldd	r24, Y+3	; 0x03
    25fe:	9c 81       	ldd	r25, Y+4	; 0x04
    2600:	ad 81       	ldd	r26, Y+5	; 0x05
    2602:	be 81       	ldd	r27, Y+6	; 0x06
    2604:	2a e0       	ldi	r18, 0x0A	; 10
    2606:	30 e0       	ldi	r19, 0x00	; 0
    2608:	40 e0       	ldi	r20, 0x00	; 0
    260a:	50 e0       	ldi	r21, 0x00	; 0
    260c:	bc 01       	movw	r22, r24
    260e:	cd 01       	movw	r24, r26
    2610:	0e 94 bb 16 	call	0x2d76	; 0x2d76 <__mulsi3>
    2614:	9b 01       	movw	r18, r22
    2616:	ac 01       	movw	r20, r24
    2618:	8a 81       	ldd	r24, Y+2	; 0x02
    261a:	88 2f       	mov	r24, r24
    261c:	90 e0       	ldi	r25, 0x00	; 0
    261e:	a0 e0       	ldi	r26, 0x00	; 0
    2620:	b0 e0       	ldi	r27, 0x00	; 0
    2622:	82 0f       	add	r24, r18
    2624:	93 1f       	adc	r25, r19
    2626:	a4 1f       	adc	r26, r20
    2628:	b5 1f       	adc	r27, r21
    262a:	8b 83       	std	Y+3, r24	; 0x03
    262c:	9c 83       	std	Y+4, r25	; 0x04
    262e:	ad 83       	std	Y+5, r26	; 0x05
    2630:	be 83       	std	Y+6, r27	; 0x06
		Copy_s32Num /=10;
    2632:	88 85       	ldd	r24, Y+8	; 0x08
    2634:	99 85       	ldd	r25, Y+9	; 0x09
    2636:	aa 85       	ldd	r26, Y+10	; 0x0a
    2638:	bb 85       	ldd	r27, Y+11	; 0x0b
    263a:	2a e0       	ldi	r18, 0x0A	; 10
    263c:	30 e0       	ldi	r19, 0x00	; 0
    263e:	40 e0       	ldi	r20, 0x00	; 0
    2640:	50 e0       	ldi	r21, 0x00	; 0
    2642:	bc 01       	movw	r22, r24
    2644:	cd 01       	movw	r24, r26
    2646:	0e 94 da 16 	call	0x2db4	; 0x2db4 <__divmodsi4>
    264a:	da 01       	movw	r26, r20
    264c:	c9 01       	movw	r24, r18
    264e:	88 87       	std	Y+8, r24	; 0x08
    2650:	99 87       	std	Y+9, r25	; 0x09
    2652:	aa 87       	std	Y+10, r26	; 0x0a
    2654:	bb 87       	std	Y+11, r27	; 0x0b
		Local_u8NumDigit ++;
    2656:	89 81       	ldd	r24, Y+1	; 0x01
    2658:	8f 5f       	subi	r24, 0xFF	; 255
    265a:	89 83       	std	Y+1, r24	; 0x01
	{
		DIO_enuSetPinValue(RS_PORT , RS_PIN , DIO_u8HIGH);
		LCD_vidLatch('-');
		Copy_s32Num *= -1 ;
	}
	while (Copy_s32Num)
    265c:	88 85       	ldd	r24, Y+8	; 0x08
    265e:	99 85       	ldd	r25, Y+9	; 0x09
    2660:	aa 85       	ldd	r26, Y+10	; 0x0a
    2662:	bb 85       	ldd	r27, Y+11	; 0x0b
    2664:	00 97       	sbiw	r24, 0x00	; 0
    2666:	a1 05       	cpc	r26, r1
    2668:	b1 05       	cpc	r27, r1
    266a:	09 f0       	breq	.+2      	; 0x266e <LCD_enuDisplayIntegerNum+0x11a>
    266c:	b8 cf       	rjmp	.-144    	; 0x25de <LCD_enuDisplayIntegerNum+0x8a>
    266e:	2d c0       	rjmp	.+90     	; 0x26ca <LCD_enuDisplayIntegerNum+0x176>
		Local_u8NumDigit ++;
	}

	while (Local_u8NumDigit)
	{
		Local_u8Remainder = Local_s32Reverse % 10;
    2670:	8b 81       	ldd	r24, Y+3	; 0x03
    2672:	9c 81       	ldd	r25, Y+4	; 0x04
    2674:	ad 81       	ldd	r26, Y+5	; 0x05
    2676:	be 81       	ldd	r27, Y+6	; 0x06
    2678:	2a e0       	ldi	r18, 0x0A	; 10
    267a:	30 e0       	ldi	r19, 0x00	; 0
    267c:	40 e0       	ldi	r20, 0x00	; 0
    267e:	50 e0       	ldi	r21, 0x00	; 0
    2680:	bc 01       	movw	r22, r24
    2682:	cd 01       	movw	r24, r26
    2684:	0e 94 da 16 	call	0x2db4	; 0x2db4 <__divmodsi4>
    2688:	dc 01       	movw	r26, r24
    268a:	cb 01       	movw	r24, r22
    268c:	8a 83       	std	Y+2, r24	; 0x02
		DIO_enuSetPinValue(RS_PORT , RS_PIN , DIO_u8HIGH);
    268e:	80 e0       	ldi	r24, 0x00	; 0
    2690:	60 e0       	ldi	r22, 0x00	; 0
    2692:	41 e0       	ldi	r20, 0x01	; 1
    2694:	0e 94 a3 0c 	call	0x1946	; 0x1946 <DIO_enuSetPinValue>
		LCD_vidLatch(Local_u8Remainder + '0');
    2698:	8a 81       	ldd	r24, Y+2	; 0x02
    269a:	80 5d       	subi	r24, 0xD0	; 208
    269c:	0e 94 72 13 	call	0x26e4	; 0x26e4 <LCD_vidLatch>
		Local_s32Reverse /= 10;
    26a0:	8b 81       	ldd	r24, Y+3	; 0x03
    26a2:	9c 81       	ldd	r25, Y+4	; 0x04
    26a4:	ad 81       	ldd	r26, Y+5	; 0x05
    26a6:	be 81       	ldd	r27, Y+6	; 0x06
    26a8:	2a e0       	ldi	r18, 0x0A	; 10
    26aa:	30 e0       	ldi	r19, 0x00	; 0
    26ac:	40 e0       	ldi	r20, 0x00	; 0
    26ae:	50 e0       	ldi	r21, 0x00	; 0
    26b0:	bc 01       	movw	r22, r24
    26b2:	cd 01       	movw	r24, r26
    26b4:	0e 94 da 16 	call	0x2db4	; 0x2db4 <__divmodsi4>
    26b8:	da 01       	movw	r26, r20
    26ba:	c9 01       	movw	r24, r18
    26bc:	8b 83       	std	Y+3, r24	; 0x03
    26be:	9c 83       	std	Y+4, r25	; 0x04
    26c0:	ad 83       	std	Y+5, r26	; 0x05
    26c2:	be 83       	std	Y+6, r27	; 0x06
		Local_u8NumDigit --;
    26c4:	89 81       	ldd	r24, Y+1	; 0x01
    26c6:	81 50       	subi	r24, 0x01	; 1
    26c8:	89 83       	std	Y+1, r24	; 0x01
		Local_s32Reverse = Local_s32Reverse * 10 + Local_u8Remainder;
		Copy_s32Num /=10;
		Local_u8NumDigit ++;
	}

	while (Local_u8NumDigit)
    26ca:	89 81       	ldd	r24, Y+1	; 0x01
    26cc:	88 23       	and	r24, r24
    26ce:	81 f6       	brne	.-96     	; 0x2670 <LCD_enuDisplayIntegerNum+0x11c>
		Local_u8NumDigit --;
	}

	}

	return Local_enuErrorState;
    26d0:	8f 81       	ldd	r24, Y+7	; 0x07
}
    26d2:	2b 96       	adiw	r28, 0x0b	; 11
    26d4:	0f b6       	in	r0, 0x3f	; 63
    26d6:	f8 94       	cli
    26d8:	de bf       	out	0x3e, r29	; 62
    26da:	0f be       	out	0x3f, r0	; 63
    26dc:	cd bf       	out	0x3d, r28	; 61
    26de:	cf 91       	pop	r28
    26e0:	df 91       	pop	r29
    26e2:	08 95       	ret

000026e4 <LCD_vidLatch>:




static void LCD_vidLatch(u8 Copy_u8Data)
{
    26e4:	df 93       	push	r29
    26e6:	cf 93       	push	r28
    26e8:	cd b7       	in	r28, 0x3d	; 61
    26ea:	de b7       	in	r29, 0x3e	; 62
    26ec:	6d 97       	sbiw	r28, 0x1d	; 29
    26ee:	0f b6       	in	r0, 0x3f	; 63
    26f0:	f8 94       	cli
    26f2:	de bf       	out	0x3e, r29	; 62
    26f4:	0f be       	out	0x3f, r0	; 63
    26f6:	cd bf       	out	0x3d, r28	; 61
    26f8:	8d 8f       	std	Y+29, r24	; 0x1d
	// set rw as write operation , EN is low
	DIO_enuSetPinValue(RW_PORT , RW_PIN , DIO_u8LOW);
    26fa:	80 e0       	ldi	r24, 0x00	; 0
    26fc:	61 e0       	ldi	r22, 0x01	; 1
    26fe:	40 e0       	ldi	r20, 0x00	; 0
    2700:	0e 94 a3 0c 	call	0x1946	; 0x1946 <DIO_enuSetPinValue>
	DIO_enuSetPinValue(EN_PORT , EN_PIN , DIO_u8LOW);
    2704:	80 e0       	ldi	r24, 0x00	; 0
    2706:	62 e0       	ldi	r22, 0x02	; 2
    2708:	40 e0       	ldi	r20, 0x00	; 0
    270a:	0e 94 a3 0c 	call	0x1946	; 0x1946 <DIO_enuSetPinValue>
	//write Data
	DIO_enuSetPinValue(D7_PORT , D7_PIN , ((Copy_u8Data>>7)&1));
    270e:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2710:	98 2f       	mov	r25, r24
    2712:	99 1f       	adc	r25, r25
    2714:	99 27       	eor	r25, r25
    2716:	99 1f       	adc	r25, r25
    2718:	81 e0       	ldi	r24, 0x01	; 1
    271a:	60 e0       	ldi	r22, 0x00	; 0
    271c:	49 2f       	mov	r20, r25
    271e:	0e 94 a3 0c 	call	0x1946	; 0x1946 <DIO_enuSetPinValue>
	DIO_enuSetPinValue(D6_PORT , D6_PIN , ((Copy_u8Data>>6)&1));
    2722:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2724:	82 95       	swap	r24
    2726:	86 95       	lsr	r24
    2728:	86 95       	lsr	r24
    272a:	83 70       	andi	r24, 0x03	; 3
    272c:	98 2f       	mov	r25, r24
    272e:	91 70       	andi	r25, 0x01	; 1
    2730:	81 e0       	ldi	r24, 0x01	; 1
    2732:	61 e0       	ldi	r22, 0x01	; 1
    2734:	49 2f       	mov	r20, r25
    2736:	0e 94 a3 0c 	call	0x1946	; 0x1946 <DIO_enuSetPinValue>
	DIO_enuSetPinValue(D5_PORT , D5_PIN , ((Copy_u8Data>>5)&1));
    273a:	8d 8d       	ldd	r24, Y+29	; 0x1d
    273c:	82 95       	swap	r24
    273e:	86 95       	lsr	r24
    2740:	87 70       	andi	r24, 0x07	; 7
    2742:	98 2f       	mov	r25, r24
    2744:	91 70       	andi	r25, 0x01	; 1
    2746:	81 e0       	ldi	r24, 0x01	; 1
    2748:	62 e0       	ldi	r22, 0x02	; 2
    274a:	49 2f       	mov	r20, r25
    274c:	0e 94 a3 0c 	call	0x1946	; 0x1946 <DIO_enuSetPinValue>
	DIO_enuSetPinValue(D4_PORT , D4_PIN , ((Copy_u8Data>>4)&1));
    2750:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2752:	82 95       	swap	r24
    2754:	8f 70       	andi	r24, 0x0F	; 15
    2756:	98 2f       	mov	r25, r24
    2758:	91 70       	andi	r25, 0x01	; 1
    275a:	81 e0       	ldi	r24, 0x01	; 1
    275c:	63 e0       	ldi	r22, 0x03	; 3
    275e:	49 2f       	mov	r20, r25
    2760:	0e 94 a3 0c 	call	0x1946	; 0x1946 <DIO_enuSetPinValue>

#if LCD_MODE == EIGHT_BIT

	DIO_enuSetPinValue(D3_PORT , D3_PIN , ((Copy_u8Data>>3)&1));
    2764:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2766:	86 95       	lsr	r24
    2768:	86 95       	lsr	r24
    276a:	86 95       	lsr	r24
    276c:	98 2f       	mov	r25, r24
    276e:	91 70       	andi	r25, 0x01	; 1
    2770:	81 e0       	ldi	r24, 0x01	; 1
    2772:	64 e0       	ldi	r22, 0x04	; 4
    2774:	49 2f       	mov	r20, r25
    2776:	0e 94 a3 0c 	call	0x1946	; 0x1946 <DIO_enuSetPinValue>
	DIO_enuSetPinValue(D2_PORT , D2_PIN , ((Copy_u8Data>>2)&1));
    277a:	8d 8d       	ldd	r24, Y+29	; 0x1d
    277c:	86 95       	lsr	r24
    277e:	86 95       	lsr	r24
    2780:	98 2f       	mov	r25, r24
    2782:	91 70       	andi	r25, 0x01	; 1
    2784:	81 e0       	ldi	r24, 0x01	; 1
    2786:	65 e0       	ldi	r22, 0x05	; 5
    2788:	49 2f       	mov	r20, r25
    278a:	0e 94 a3 0c 	call	0x1946	; 0x1946 <DIO_enuSetPinValue>
	DIO_enuSetPinValue(D1_PORT , D1_PIN , ((Copy_u8Data>>1)&1));
    278e:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2790:	86 95       	lsr	r24
    2792:	98 2f       	mov	r25, r24
    2794:	91 70       	andi	r25, 0x01	; 1
    2796:	81 e0       	ldi	r24, 0x01	; 1
    2798:	66 e0       	ldi	r22, 0x06	; 6
    279a:	49 2f       	mov	r20, r25
    279c:	0e 94 a3 0c 	call	0x1946	; 0x1946 <DIO_enuSetPinValue>
	DIO_enuSetPinValue(D0_PORT , D0_PIN , ((Copy_u8Data>>0)&1));
    27a0:	8d 8d       	ldd	r24, Y+29	; 0x1d
    27a2:	98 2f       	mov	r25, r24
    27a4:	91 70       	andi	r25, 0x01	; 1
    27a6:	81 e0       	ldi	r24, 0x01	; 1
    27a8:	67 e0       	ldi	r22, 0x07	; 7
    27aa:	49 2f       	mov	r20, r25
    27ac:	0e 94 a3 0c 	call	0x1946	; 0x1946 <DIO_enuSetPinValue>
	DIO_enuSetPinValue(D5_PORT , D5_PIN , ((Copy_u8Data>>1)&1));
	DIO_enuSetPinValue(D4_PORT , D4_PIN , ((Copy_u8Data>>0)&1));
#endif

	// Enable latch
	DIO_enuSetPinValue(EN_PORT , EN_PIN , DIO_u8HIGH);
    27b0:	80 e0       	ldi	r24, 0x00	; 0
    27b2:	62 e0       	ldi	r22, 0x02	; 2
    27b4:	41 e0       	ldi	r20, 0x01	; 1
    27b6:	0e 94 a3 0c 	call	0x1946	; 0x1946 <DIO_enuSetPinValue>
    27ba:	80 e0       	ldi	r24, 0x00	; 0
    27bc:	90 e0       	ldi	r25, 0x00	; 0
    27be:	a0 e2       	ldi	r26, 0x20	; 32
    27c0:	b1 e4       	ldi	r27, 0x41	; 65
    27c2:	89 8f       	std	Y+25, r24	; 0x19
    27c4:	9a 8f       	std	Y+26, r25	; 0x1a
    27c6:	ab 8f       	std	Y+27, r26	; 0x1b
    27c8:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    27ca:	69 8d       	ldd	r22, Y+25	; 0x19
    27cc:	7a 8d       	ldd	r23, Y+26	; 0x1a
    27ce:	8b 8d       	ldd	r24, Y+27	; 0x1b
    27d0:	9c 8d       	ldd	r25, Y+28	; 0x1c
    27d2:	20 e0       	ldi	r18, 0x00	; 0
    27d4:	30 e0       	ldi	r19, 0x00	; 0
    27d6:	4a e7       	ldi	r20, 0x7A	; 122
    27d8:	53 e4       	ldi	r21, 0x43	; 67
    27da:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    27de:	dc 01       	movw	r26, r24
    27e0:	cb 01       	movw	r24, r22
    27e2:	8d 8b       	std	Y+21, r24	; 0x15
    27e4:	9e 8b       	std	Y+22, r25	; 0x16
    27e6:	af 8b       	std	Y+23, r26	; 0x17
    27e8:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    27ea:	6d 89       	ldd	r22, Y+21	; 0x15
    27ec:	7e 89       	ldd	r23, Y+22	; 0x16
    27ee:	8f 89       	ldd	r24, Y+23	; 0x17
    27f0:	98 8d       	ldd	r25, Y+24	; 0x18
    27f2:	20 e0       	ldi	r18, 0x00	; 0
    27f4:	30 e0       	ldi	r19, 0x00	; 0
    27f6:	40 e8       	ldi	r20, 0x80	; 128
    27f8:	5f e3       	ldi	r21, 0x3F	; 63
    27fa:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    27fe:	88 23       	and	r24, r24
    2800:	2c f4       	brge	.+10     	; 0x280c <LCD_vidLatch+0x128>
		__ticks = 1;
    2802:	81 e0       	ldi	r24, 0x01	; 1
    2804:	90 e0       	ldi	r25, 0x00	; 0
    2806:	9c 8b       	std	Y+20, r25	; 0x14
    2808:	8b 8b       	std	Y+19, r24	; 0x13
    280a:	3f c0       	rjmp	.+126    	; 0x288a <LCD_vidLatch+0x1a6>
	else if (__tmp > 65535)
    280c:	6d 89       	ldd	r22, Y+21	; 0x15
    280e:	7e 89       	ldd	r23, Y+22	; 0x16
    2810:	8f 89       	ldd	r24, Y+23	; 0x17
    2812:	98 8d       	ldd	r25, Y+24	; 0x18
    2814:	20 e0       	ldi	r18, 0x00	; 0
    2816:	3f ef       	ldi	r19, 0xFF	; 255
    2818:	4f e7       	ldi	r20, 0x7F	; 127
    281a:	57 e4       	ldi	r21, 0x47	; 71
    281c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2820:	18 16       	cp	r1, r24
    2822:	4c f5       	brge	.+82     	; 0x2876 <LCD_vidLatch+0x192>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2824:	69 8d       	ldd	r22, Y+25	; 0x19
    2826:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2828:	8b 8d       	ldd	r24, Y+27	; 0x1b
    282a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    282c:	20 e0       	ldi	r18, 0x00	; 0
    282e:	30 e0       	ldi	r19, 0x00	; 0
    2830:	40 e2       	ldi	r20, 0x20	; 32
    2832:	51 e4       	ldi	r21, 0x41	; 65
    2834:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2838:	dc 01       	movw	r26, r24
    283a:	cb 01       	movw	r24, r22
    283c:	bc 01       	movw	r22, r24
    283e:	cd 01       	movw	r24, r26
    2840:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2844:	dc 01       	movw	r26, r24
    2846:	cb 01       	movw	r24, r22
    2848:	9c 8b       	std	Y+20, r25	; 0x14
    284a:	8b 8b       	std	Y+19, r24	; 0x13
    284c:	0f c0       	rjmp	.+30     	; 0x286c <LCD_vidLatch+0x188>
    284e:	89 e1       	ldi	r24, 0x19	; 25
    2850:	90 e0       	ldi	r25, 0x00	; 0
    2852:	9a 8b       	std	Y+18, r25	; 0x12
    2854:	89 8b       	std	Y+17, r24	; 0x11
    2856:	89 89       	ldd	r24, Y+17	; 0x11
    2858:	9a 89       	ldd	r25, Y+18	; 0x12
    285a:	01 97       	sbiw	r24, 0x01	; 1
    285c:	f1 f7       	brne	.-4      	; 0x285a <LCD_vidLatch+0x176>
    285e:	9a 8b       	std	Y+18, r25	; 0x12
    2860:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2862:	8b 89       	ldd	r24, Y+19	; 0x13
    2864:	9c 89       	ldd	r25, Y+20	; 0x14
    2866:	01 97       	sbiw	r24, 0x01	; 1
    2868:	9c 8b       	std	Y+20, r25	; 0x14
    286a:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    286c:	8b 89       	ldd	r24, Y+19	; 0x13
    286e:	9c 89       	ldd	r25, Y+20	; 0x14
    2870:	00 97       	sbiw	r24, 0x00	; 0
    2872:	69 f7       	brne	.-38     	; 0x284e <LCD_vidLatch+0x16a>
    2874:	14 c0       	rjmp	.+40     	; 0x289e <LCD_vidLatch+0x1ba>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2876:	6d 89       	ldd	r22, Y+21	; 0x15
    2878:	7e 89       	ldd	r23, Y+22	; 0x16
    287a:	8f 89       	ldd	r24, Y+23	; 0x17
    287c:	98 8d       	ldd	r25, Y+24	; 0x18
    287e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2882:	dc 01       	movw	r26, r24
    2884:	cb 01       	movw	r24, r22
    2886:	9c 8b       	std	Y+20, r25	; 0x14
    2888:	8b 8b       	std	Y+19, r24	; 0x13
    288a:	8b 89       	ldd	r24, Y+19	; 0x13
    288c:	9c 89       	ldd	r25, Y+20	; 0x14
    288e:	98 8b       	std	Y+16, r25	; 0x10
    2890:	8f 87       	std	Y+15, r24	; 0x0f
    2892:	8f 85       	ldd	r24, Y+15	; 0x0f
    2894:	98 89       	ldd	r25, Y+16	; 0x10
    2896:	01 97       	sbiw	r24, 0x01	; 1
    2898:	f1 f7       	brne	.-4      	; 0x2896 <LCD_vidLatch+0x1b2>
    289a:	98 8b       	std	Y+16, r25	; 0x10
    289c:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(10);
	DIO_enuSetPinValue(EN_PORT , EN_PIN , DIO_u8LOW);
    289e:	80 e0       	ldi	r24, 0x00	; 0
    28a0:	62 e0       	ldi	r22, 0x02	; 2
    28a2:	40 e0       	ldi	r20, 0x00	; 0
    28a4:	0e 94 a3 0c 	call	0x1946	; 0x1946 <DIO_enuSetPinValue>
    28a8:	80 e0       	ldi	r24, 0x00	; 0
    28aa:	90 e0       	ldi	r25, 0x00	; 0
    28ac:	a0 e2       	ldi	r26, 0x20	; 32
    28ae:	b1 e4       	ldi	r27, 0x41	; 65
    28b0:	8b 87       	std	Y+11, r24	; 0x0b
    28b2:	9c 87       	std	Y+12, r25	; 0x0c
    28b4:	ad 87       	std	Y+13, r26	; 0x0d
    28b6:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    28b8:	6b 85       	ldd	r22, Y+11	; 0x0b
    28ba:	7c 85       	ldd	r23, Y+12	; 0x0c
    28bc:	8d 85       	ldd	r24, Y+13	; 0x0d
    28be:	9e 85       	ldd	r25, Y+14	; 0x0e
    28c0:	20 e0       	ldi	r18, 0x00	; 0
    28c2:	30 e0       	ldi	r19, 0x00	; 0
    28c4:	4a e7       	ldi	r20, 0x7A	; 122
    28c6:	53 e4       	ldi	r21, 0x43	; 67
    28c8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    28cc:	dc 01       	movw	r26, r24
    28ce:	cb 01       	movw	r24, r22
    28d0:	8f 83       	std	Y+7, r24	; 0x07
    28d2:	98 87       	std	Y+8, r25	; 0x08
    28d4:	a9 87       	std	Y+9, r26	; 0x09
    28d6:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    28d8:	6f 81       	ldd	r22, Y+7	; 0x07
    28da:	78 85       	ldd	r23, Y+8	; 0x08
    28dc:	89 85       	ldd	r24, Y+9	; 0x09
    28de:	9a 85       	ldd	r25, Y+10	; 0x0a
    28e0:	20 e0       	ldi	r18, 0x00	; 0
    28e2:	30 e0       	ldi	r19, 0x00	; 0
    28e4:	40 e8       	ldi	r20, 0x80	; 128
    28e6:	5f e3       	ldi	r21, 0x3F	; 63
    28e8:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    28ec:	88 23       	and	r24, r24
    28ee:	2c f4       	brge	.+10     	; 0x28fa <LCD_vidLatch+0x216>
		__ticks = 1;
    28f0:	81 e0       	ldi	r24, 0x01	; 1
    28f2:	90 e0       	ldi	r25, 0x00	; 0
    28f4:	9e 83       	std	Y+6, r25	; 0x06
    28f6:	8d 83       	std	Y+5, r24	; 0x05
    28f8:	3f c0       	rjmp	.+126    	; 0x2978 <LCD_vidLatch+0x294>
	else if (__tmp > 65535)
    28fa:	6f 81       	ldd	r22, Y+7	; 0x07
    28fc:	78 85       	ldd	r23, Y+8	; 0x08
    28fe:	89 85       	ldd	r24, Y+9	; 0x09
    2900:	9a 85       	ldd	r25, Y+10	; 0x0a
    2902:	20 e0       	ldi	r18, 0x00	; 0
    2904:	3f ef       	ldi	r19, 0xFF	; 255
    2906:	4f e7       	ldi	r20, 0x7F	; 127
    2908:	57 e4       	ldi	r21, 0x47	; 71
    290a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    290e:	18 16       	cp	r1, r24
    2910:	4c f5       	brge	.+82     	; 0x2964 <LCD_vidLatch+0x280>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2912:	6b 85       	ldd	r22, Y+11	; 0x0b
    2914:	7c 85       	ldd	r23, Y+12	; 0x0c
    2916:	8d 85       	ldd	r24, Y+13	; 0x0d
    2918:	9e 85       	ldd	r25, Y+14	; 0x0e
    291a:	20 e0       	ldi	r18, 0x00	; 0
    291c:	30 e0       	ldi	r19, 0x00	; 0
    291e:	40 e2       	ldi	r20, 0x20	; 32
    2920:	51 e4       	ldi	r21, 0x41	; 65
    2922:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2926:	dc 01       	movw	r26, r24
    2928:	cb 01       	movw	r24, r22
    292a:	bc 01       	movw	r22, r24
    292c:	cd 01       	movw	r24, r26
    292e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2932:	dc 01       	movw	r26, r24
    2934:	cb 01       	movw	r24, r22
    2936:	9e 83       	std	Y+6, r25	; 0x06
    2938:	8d 83       	std	Y+5, r24	; 0x05
    293a:	0f c0       	rjmp	.+30     	; 0x295a <LCD_vidLatch+0x276>
    293c:	89 e1       	ldi	r24, 0x19	; 25
    293e:	90 e0       	ldi	r25, 0x00	; 0
    2940:	9c 83       	std	Y+4, r25	; 0x04
    2942:	8b 83       	std	Y+3, r24	; 0x03
    2944:	8b 81       	ldd	r24, Y+3	; 0x03
    2946:	9c 81       	ldd	r25, Y+4	; 0x04
    2948:	01 97       	sbiw	r24, 0x01	; 1
    294a:	f1 f7       	brne	.-4      	; 0x2948 <LCD_vidLatch+0x264>
    294c:	9c 83       	std	Y+4, r25	; 0x04
    294e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2950:	8d 81       	ldd	r24, Y+5	; 0x05
    2952:	9e 81       	ldd	r25, Y+6	; 0x06
    2954:	01 97       	sbiw	r24, 0x01	; 1
    2956:	9e 83       	std	Y+6, r25	; 0x06
    2958:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    295a:	8d 81       	ldd	r24, Y+5	; 0x05
    295c:	9e 81       	ldd	r25, Y+6	; 0x06
    295e:	00 97       	sbiw	r24, 0x00	; 0
    2960:	69 f7       	brne	.-38     	; 0x293c <LCD_vidLatch+0x258>
    2962:	14 c0       	rjmp	.+40     	; 0x298c <LCD_vidLatch+0x2a8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2964:	6f 81       	ldd	r22, Y+7	; 0x07
    2966:	78 85       	ldd	r23, Y+8	; 0x08
    2968:	89 85       	ldd	r24, Y+9	; 0x09
    296a:	9a 85       	ldd	r25, Y+10	; 0x0a
    296c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2970:	dc 01       	movw	r26, r24
    2972:	cb 01       	movw	r24, r22
    2974:	9e 83       	std	Y+6, r25	; 0x06
    2976:	8d 83       	std	Y+5, r24	; 0x05
    2978:	8d 81       	ldd	r24, Y+5	; 0x05
    297a:	9e 81       	ldd	r25, Y+6	; 0x06
    297c:	9a 83       	std	Y+2, r25	; 0x02
    297e:	89 83       	std	Y+1, r24	; 0x01
    2980:	89 81       	ldd	r24, Y+1	; 0x01
    2982:	9a 81       	ldd	r25, Y+2	; 0x02
    2984:	01 97       	sbiw	r24, 0x01	; 1
    2986:	f1 f7       	brne	.-4      	; 0x2984 <LCD_vidLatch+0x2a0>
    2988:	9a 83       	std	Y+2, r25	; 0x02
    298a:	89 83       	std	Y+1, r24	; 0x01


	_delay_ms(10);
}
    298c:	6d 96       	adiw	r28, 0x1d	; 29
    298e:	0f b6       	in	r0, 0x3f	; 63
    2990:	f8 94       	cli
    2992:	de bf       	out	0x3e, r29	; 62
    2994:	0f be       	out	0x3f, r0	; 63
    2996:	cd bf       	out	0x3d, r28	; 61
    2998:	cf 91       	pop	r28
    299a:	df 91       	pop	r29
    299c:	08 95       	ret

0000299e <LCD_invidSendCommend>:


static inline void LCD_invidSendCommend(u8 Copy_u8Command)
{
    299e:	df 93       	push	r29
    29a0:	cf 93       	push	r28
    29a2:	cd b7       	in	r28, 0x3d	; 61
    29a4:	de b7       	in	r29, 0x3e	; 62
    29a6:	2f 97       	sbiw	r28, 0x0f	; 15
    29a8:	0f b6       	in	r0, 0x3f	; 63
    29aa:	f8 94       	cli
    29ac:	de bf       	out	0x3e, r29	; 62
    29ae:	0f be       	out	0x3f, r0	; 63
    29b0:	cd bf       	out	0x3d, r28	; 61
    29b2:	8f 87       	std	Y+15, r24	; 0x0f
	// set rs as command
	DIO_enuSetPinValue(RS_PORT , RS_PIN , DIO_u8LOW);
    29b4:	80 e0       	ldi	r24, 0x00	; 0
    29b6:	60 e0       	ldi	r22, 0x00	; 0
    29b8:	40 e0       	ldi	r20, 0x00	; 0
    29ba:	0e 94 a3 0c 	call	0x1946	; 0x1946 <DIO_enuSetPinValue>
	// set rw as write operation , EN is low
	DIO_enuSetPinValue(RW_PORT , RW_PIN , DIO_u8LOW);
    29be:	80 e0       	ldi	r24, 0x00	; 0
    29c0:	61 e0       	ldi	r22, 0x01	; 1
    29c2:	40 e0       	ldi	r20, 0x00	; 0
    29c4:	0e 94 a3 0c 	call	0x1946	; 0x1946 <DIO_enuSetPinValue>
	DIO_enuSetPinValue(EN_PORT , EN_PIN , DIO_u8LOW);
    29c8:	80 e0       	ldi	r24, 0x00	; 0
    29ca:	62 e0       	ldi	r22, 0x02	; 2
    29cc:	40 e0       	ldi	r20, 0x00	; 0
    29ce:	0e 94 a3 0c 	call	0x1946	; 0x1946 <DIO_enuSetPinValue>
	//write Data
	DIO_enuSetPinValue(D7_PORT , D7_PIN , ((Copy_u8Command>>7)&1));
    29d2:	8f 85       	ldd	r24, Y+15	; 0x0f
    29d4:	98 2f       	mov	r25, r24
    29d6:	99 1f       	adc	r25, r25
    29d8:	99 27       	eor	r25, r25
    29da:	99 1f       	adc	r25, r25
    29dc:	81 e0       	ldi	r24, 0x01	; 1
    29de:	60 e0       	ldi	r22, 0x00	; 0
    29e0:	49 2f       	mov	r20, r25
    29e2:	0e 94 a3 0c 	call	0x1946	; 0x1946 <DIO_enuSetPinValue>
	DIO_enuSetPinValue(D6_PORT , D6_PIN , ((Copy_u8Command>>6)&1));
    29e6:	8f 85       	ldd	r24, Y+15	; 0x0f
    29e8:	82 95       	swap	r24
    29ea:	86 95       	lsr	r24
    29ec:	86 95       	lsr	r24
    29ee:	83 70       	andi	r24, 0x03	; 3
    29f0:	98 2f       	mov	r25, r24
    29f2:	91 70       	andi	r25, 0x01	; 1
    29f4:	81 e0       	ldi	r24, 0x01	; 1
    29f6:	61 e0       	ldi	r22, 0x01	; 1
    29f8:	49 2f       	mov	r20, r25
    29fa:	0e 94 a3 0c 	call	0x1946	; 0x1946 <DIO_enuSetPinValue>
	DIO_enuSetPinValue(D5_PORT , D5_PIN , ((Copy_u8Command>>5)&1));
    29fe:	8f 85       	ldd	r24, Y+15	; 0x0f
    2a00:	82 95       	swap	r24
    2a02:	86 95       	lsr	r24
    2a04:	87 70       	andi	r24, 0x07	; 7
    2a06:	98 2f       	mov	r25, r24
    2a08:	91 70       	andi	r25, 0x01	; 1
    2a0a:	81 e0       	ldi	r24, 0x01	; 1
    2a0c:	62 e0       	ldi	r22, 0x02	; 2
    2a0e:	49 2f       	mov	r20, r25
    2a10:	0e 94 a3 0c 	call	0x1946	; 0x1946 <DIO_enuSetPinValue>
	DIO_enuSetPinValue(D4_PORT , D4_PIN , ((Copy_u8Command>>4)&1));
    2a14:	8f 85       	ldd	r24, Y+15	; 0x0f
    2a16:	82 95       	swap	r24
    2a18:	8f 70       	andi	r24, 0x0F	; 15
    2a1a:	98 2f       	mov	r25, r24
    2a1c:	91 70       	andi	r25, 0x01	; 1
    2a1e:	81 e0       	ldi	r24, 0x01	; 1
    2a20:	63 e0       	ldi	r22, 0x03	; 3
    2a22:	49 2f       	mov	r20, r25
    2a24:	0e 94 a3 0c 	call	0x1946	; 0x1946 <DIO_enuSetPinValue>
#if LCD_MODE == EIGHT_BIT
	DIO_enuSetPinValue(D3_PORT , D3_PIN , ((Copy_u8Command>>3)&1));
    2a28:	8f 85       	ldd	r24, Y+15	; 0x0f
    2a2a:	86 95       	lsr	r24
    2a2c:	86 95       	lsr	r24
    2a2e:	86 95       	lsr	r24
    2a30:	98 2f       	mov	r25, r24
    2a32:	91 70       	andi	r25, 0x01	; 1
    2a34:	81 e0       	ldi	r24, 0x01	; 1
    2a36:	64 e0       	ldi	r22, 0x04	; 4
    2a38:	49 2f       	mov	r20, r25
    2a3a:	0e 94 a3 0c 	call	0x1946	; 0x1946 <DIO_enuSetPinValue>
	DIO_enuSetPinValue(D2_PORT , D2_PIN , ((Copy_u8Command>>2)&1));
    2a3e:	8f 85       	ldd	r24, Y+15	; 0x0f
    2a40:	86 95       	lsr	r24
    2a42:	86 95       	lsr	r24
    2a44:	98 2f       	mov	r25, r24
    2a46:	91 70       	andi	r25, 0x01	; 1
    2a48:	81 e0       	ldi	r24, 0x01	; 1
    2a4a:	65 e0       	ldi	r22, 0x05	; 5
    2a4c:	49 2f       	mov	r20, r25
    2a4e:	0e 94 a3 0c 	call	0x1946	; 0x1946 <DIO_enuSetPinValue>
	DIO_enuSetPinValue(D1_PORT , D1_PIN , ((Copy_u8Command>>1)&1));
    2a52:	8f 85       	ldd	r24, Y+15	; 0x0f
    2a54:	86 95       	lsr	r24
    2a56:	98 2f       	mov	r25, r24
    2a58:	91 70       	andi	r25, 0x01	; 1
    2a5a:	81 e0       	ldi	r24, 0x01	; 1
    2a5c:	66 e0       	ldi	r22, 0x06	; 6
    2a5e:	49 2f       	mov	r20, r25
    2a60:	0e 94 a3 0c 	call	0x1946	; 0x1946 <DIO_enuSetPinValue>
	DIO_enuSetPinValue(D0_PORT , D0_PIN , ((Copy_u8Command>>0)&1));
    2a64:	8f 85       	ldd	r24, Y+15	; 0x0f
    2a66:	98 2f       	mov	r25, r24
    2a68:	91 70       	andi	r25, 0x01	; 1
    2a6a:	81 e0       	ldi	r24, 0x01	; 1
    2a6c:	67 e0       	ldi	r22, 0x07	; 7
    2a6e:	49 2f       	mov	r20, r25
    2a70:	0e 94 a3 0c 	call	0x1946	; 0x1946 <DIO_enuSetPinValue>
	DIO_enuSetPinValue(D6_PORT , D6_PIN , ((Copy_u8Command>>2)&1));
	DIO_enuSetPinValue(D5_PORT , D5_PIN , ((Copy_u8Command>>1)&1));
	DIO_enuSetPinValue(D4_PORT , D4_PIN , ((Copy_u8Command>>0)&1));

#endif
	DIO_enuSetPinValue(EN_PORT , EN_PIN , DIO_u8HIGH);
    2a74:	80 e0       	ldi	r24, 0x00	; 0
    2a76:	62 e0       	ldi	r22, 0x02	; 2
    2a78:	41 e0       	ldi	r20, 0x01	; 1
    2a7a:	0e 94 a3 0c 	call	0x1946	; 0x1946 <DIO_enuSetPinValue>
    2a7e:	80 e0       	ldi	r24, 0x00	; 0
    2a80:	90 e0       	ldi	r25, 0x00	; 0
    2a82:	a0 e2       	ldi	r26, 0x20	; 32
    2a84:	b1 e4       	ldi	r27, 0x41	; 65
    2a86:	8b 87       	std	Y+11, r24	; 0x0b
    2a88:	9c 87       	std	Y+12, r25	; 0x0c
    2a8a:	ad 87       	std	Y+13, r26	; 0x0d
    2a8c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2a8e:	6b 85       	ldd	r22, Y+11	; 0x0b
    2a90:	7c 85       	ldd	r23, Y+12	; 0x0c
    2a92:	8d 85       	ldd	r24, Y+13	; 0x0d
    2a94:	9e 85       	ldd	r25, Y+14	; 0x0e
    2a96:	20 e0       	ldi	r18, 0x00	; 0
    2a98:	30 e0       	ldi	r19, 0x00	; 0
    2a9a:	4a e7       	ldi	r20, 0x7A	; 122
    2a9c:	53 e4       	ldi	r21, 0x43	; 67
    2a9e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2aa2:	dc 01       	movw	r26, r24
    2aa4:	cb 01       	movw	r24, r22
    2aa6:	8f 83       	std	Y+7, r24	; 0x07
    2aa8:	98 87       	std	Y+8, r25	; 0x08
    2aaa:	a9 87       	std	Y+9, r26	; 0x09
    2aac:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2aae:	6f 81       	ldd	r22, Y+7	; 0x07
    2ab0:	78 85       	ldd	r23, Y+8	; 0x08
    2ab2:	89 85       	ldd	r24, Y+9	; 0x09
    2ab4:	9a 85       	ldd	r25, Y+10	; 0x0a
    2ab6:	20 e0       	ldi	r18, 0x00	; 0
    2ab8:	30 e0       	ldi	r19, 0x00	; 0
    2aba:	40 e8       	ldi	r20, 0x80	; 128
    2abc:	5f e3       	ldi	r21, 0x3F	; 63
    2abe:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2ac2:	88 23       	and	r24, r24
    2ac4:	2c f4       	brge	.+10     	; 0x2ad0 <LCD_invidSendCommend+0x132>
		__ticks = 1;
    2ac6:	81 e0       	ldi	r24, 0x01	; 1
    2ac8:	90 e0       	ldi	r25, 0x00	; 0
    2aca:	9e 83       	std	Y+6, r25	; 0x06
    2acc:	8d 83       	std	Y+5, r24	; 0x05
    2ace:	3f c0       	rjmp	.+126    	; 0x2b4e <LCD_invidSendCommend+0x1b0>
	else if (__tmp > 65535)
    2ad0:	6f 81       	ldd	r22, Y+7	; 0x07
    2ad2:	78 85       	ldd	r23, Y+8	; 0x08
    2ad4:	89 85       	ldd	r24, Y+9	; 0x09
    2ad6:	9a 85       	ldd	r25, Y+10	; 0x0a
    2ad8:	20 e0       	ldi	r18, 0x00	; 0
    2ada:	3f ef       	ldi	r19, 0xFF	; 255
    2adc:	4f e7       	ldi	r20, 0x7F	; 127
    2ade:	57 e4       	ldi	r21, 0x47	; 71
    2ae0:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2ae4:	18 16       	cp	r1, r24
    2ae6:	4c f5       	brge	.+82     	; 0x2b3a <LCD_invidSendCommend+0x19c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2ae8:	6b 85       	ldd	r22, Y+11	; 0x0b
    2aea:	7c 85       	ldd	r23, Y+12	; 0x0c
    2aec:	8d 85       	ldd	r24, Y+13	; 0x0d
    2aee:	9e 85       	ldd	r25, Y+14	; 0x0e
    2af0:	20 e0       	ldi	r18, 0x00	; 0
    2af2:	30 e0       	ldi	r19, 0x00	; 0
    2af4:	40 e2       	ldi	r20, 0x20	; 32
    2af6:	51 e4       	ldi	r21, 0x41	; 65
    2af8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2afc:	dc 01       	movw	r26, r24
    2afe:	cb 01       	movw	r24, r22
    2b00:	bc 01       	movw	r22, r24
    2b02:	cd 01       	movw	r24, r26
    2b04:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2b08:	dc 01       	movw	r26, r24
    2b0a:	cb 01       	movw	r24, r22
    2b0c:	9e 83       	std	Y+6, r25	; 0x06
    2b0e:	8d 83       	std	Y+5, r24	; 0x05
    2b10:	0f c0       	rjmp	.+30     	; 0x2b30 <LCD_invidSendCommend+0x192>
    2b12:	89 e1       	ldi	r24, 0x19	; 25
    2b14:	90 e0       	ldi	r25, 0x00	; 0
    2b16:	9c 83       	std	Y+4, r25	; 0x04
    2b18:	8b 83       	std	Y+3, r24	; 0x03
    2b1a:	8b 81       	ldd	r24, Y+3	; 0x03
    2b1c:	9c 81       	ldd	r25, Y+4	; 0x04
    2b1e:	01 97       	sbiw	r24, 0x01	; 1
    2b20:	f1 f7       	brne	.-4      	; 0x2b1e <LCD_invidSendCommend+0x180>
    2b22:	9c 83       	std	Y+4, r25	; 0x04
    2b24:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2b26:	8d 81       	ldd	r24, Y+5	; 0x05
    2b28:	9e 81       	ldd	r25, Y+6	; 0x06
    2b2a:	01 97       	sbiw	r24, 0x01	; 1
    2b2c:	9e 83       	std	Y+6, r25	; 0x06
    2b2e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2b30:	8d 81       	ldd	r24, Y+5	; 0x05
    2b32:	9e 81       	ldd	r25, Y+6	; 0x06
    2b34:	00 97       	sbiw	r24, 0x00	; 0
    2b36:	69 f7       	brne	.-38     	; 0x2b12 <LCD_invidSendCommend+0x174>
    2b38:	14 c0       	rjmp	.+40     	; 0x2b62 <LCD_invidSendCommend+0x1c4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2b3a:	6f 81       	ldd	r22, Y+7	; 0x07
    2b3c:	78 85       	ldd	r23, Y+8	; 0x08
    2b3e:	89 85       	ldd	r24, Y+9	; 0x09
    2b40:	9a 85       	ldd	r25, Y+10	; 0x0a
    2b42:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2b46:	dc 01       	movw	r26, r24
    2b48:	cb 01       	movw	r24, r22
    2b4a:	9e 83       	std	Y+6, r25	; 0x06
    2b4c:	8d 83       	std	Y+5, r24	; 0x05
    2b4e:	8d 81       	ldd	r24, Y+5	; 0x05
    2b50:	9e 81       	ldd	r25, Y+6	; 0x06
    2b52:	9a 83       	std	Y+2, r25	; 0x02
    2b54:	89 83       	std	Y+1, r24	; 0x01
    2b56:	89 81       	ldd	r24, Y+1	; 0x01
    2b58:	9a 81       	ldd	r25, Y+2	; 0x02
    2b5a:	01 97       	sbiw	r24, 0x01	; 1
    2b5c:	f1 f7       	brne	.-4      	; 0x2b5a <LCD_invidSendCommend+0x1bc>
    2b5e:	9a 83       	std	Y+2, r25	; 0x02
    2b60:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(10);
	DIO_enuSetPinValue(EN_PORT , EN_PIN , DIO_u8LOW);
    2b62:	80 e0       	ldi	r24, 0x00	; 0
    2b64:	62 e0       	ldi	r22, 0x02	; 2
    2b66:	40 e0       	ldi	r20, 0x00	; 0
    2b68:	0e 94 a3 0c 	call	0x1946	; 0x1946 <DIO_enuSetPinValue>
}
    2b6c:	2f 96       	adiw	r28, 0x0f	; 15
    2b6e:	0f b6       	in	r0, 0x3f	; 63
    2b70:	f8 94       	cli
    2b72:	de bf       	out	0x3e, r29	; 62
    2b74:	0f be       	out	0x3f, r0	; 63
    2b76:	cd bf       	out	0x3d, r28	; 61
    2b78:	cf 91       	pop	r28
    2b7a:	df 91       	pop	r29
    2b7c:	08 95       	ret

00002b7e <LCD_enuDisplayString>:

ES_t LCD_enuDisplayString(u8 Copy_au8Data[])
{
    2b7e:	df 93       	push	r29
    2b80:	cf 93       	push	r28
    2b82:	00 d0       	rcall	.+0      	; 0x2b84 <LCD_enuDisplayString+0x6>
    2b84:	00 d0       	rcall	.+0      	; 0x2b86 <LCD_enuDisplayString+0x8>
    2b86:	cd b7       	in	r28, 0x3d	; 61
    2b88:	de b7       	in	r29, 0x3e	; 62
    2b8a:	9c 83       	std	Y+4, r25	; 0x04
    2b8c:	8b 83       	std	Y+3, r24	; 0x03
	ES_t Local_enuErrorState = ES_NOK;
    2b8e:	1a 82       	std	Y+2, r1	; 0x02

		DIO_enuSetPinValue(RS_PORT , RS_PIN , DIO_u8HIGH);
    2b90:	80 e0       	ldi	r24, 0x00	; 0
    2b92:	60 e0       	ldi	r22, 0x00	; 0
    2b94:	41 e0       	ldi	r20, 0x01	; 1
    2b96:	0e 94 a3 0c 	call	0x1946	; 0x1946 <DIO_enuSetPinValue>
		for(u8 i=0;Copy_au8Data[i] != '\0';i++)
    2b9a:	19 82       	std	Y+1, r1	; 0x01
    2b9c:	0e c0       	rjmp	.+28     	; 0x2bba <LCD_enuDisplayString+0x3c>

		LCD_vidLatch(Copy_au8Data[i]);
    2b9e:	89 81       	ldd	r24, Y+1	; 0x01
    2ba0:	28 2f       	mov	r18, r24
    2ba2:	30 e0       	ldi	r19, 0x00	; 0
    2ba4:	8b 81       	ldd	r24, Y+3	; 0x03
    2ba6:	9c 81       	ldd	r25, Y+4	; 0x04
    2ba8:	fc 01       	movw	r30, r24
    2baa:	e2 0f       	add	r30, r18
    2bac:	f3 1f       	adc	r31, r19
    2bae:	80 81       	ld	r24, Z
    2bb0:	0e 94 72 13 	call	0x26e4	; 0x26e4 <LCD_vidLatch>
ES_t LCD_enuDisplayString(u8 Copy_au8Data[])
{
	ES_t Local_enuErrorState = ES_NOK;

		DIO_enuSetPinValue(RS_PORT , RS_PIN , DIO_u8HIGH);
		for(u8 i=0;Copy_au8Data[i] != '\0';i++)
    2bb4:	89 81       	ldd	r24, Y+1	; 0x01
    2bb6:	8f 5f       	subi	r24, 0xFF	; 255
    2bb8:	89 83       	std	Y+1, r24	; 0x01
    2bba:	89 81       	ldd	r24, Y+1	; 0x01
    2bbc:	28 2f       	mov	r18, r24
    2bbe:	30 e0       	ldi	r19, 0x00	; 0
    2bc0:	8b 81       	ldd	r24, Y+3	; 0x03
    2bc2:	9c 81       	ldd	r25, Y+4	; 0x04
    2bc4:	fc 01       	movw	r30, r24
    2bc6:	e2 0f       	add	r30, r18
    2bc8:	f3 1f       	adc	r31, r19
    2bca:	80 81       	ld	r24, Z
    2bcc:	88 23       	and	r24, r24
    2bce:	39 f7       	brne	.-50     	; 0x2b9e <LCD_enuDisplayString+0x20>

		LCD_vidLatch(Copy_au8Data[i]);

		return Local_enuErrorState;
    2bd0:	8a 81       	ldd	r24, Y+2	; 0x02

}
    2bd2:	0f 90       	pop	r0
    2bd4:	0f 90       	pop	r0
    2bd6:	0f 90       	pop	r0
    2bd8:	0f 90       	pop	r0
    2bda:	cf 91       	pop	r28
    2bdc:	df 91       	pop	r29
    2bde:	08 95       	ret

00002be0 <LCD_MOVE_CURSOR>:

ES_t LCD_MOVE_CURSOR(u8 row , u8 column)
{
    2be0:	df 93       	push	r29
    2be2:	cf 93       	push	r28
    2be4:	cd b7       	in	r28, 0x3d	; 61
    2be6:	de b7       	in	r29, 0x3e	; 62
    2be8:	62 97       	sbiw	r28, 0x12	; 18
    2bea:	0f b6       	in	r0, 0x3f	; 63
    2bec:	f8 94       	cli
    2bee:	de bf       	out	0x3e, r29	; 62
    2bf0:	0f be       	out	0x3f, r0	; 63
    2bf2:	cd bf       	out	0x3d, r28	; 61
    2bf4:	89 8b       	std	Y+17, r24	; 0x11
    2bf6:	6a 8b       	std	Y+18, r22	; 0x12
	ES_t Local_enuErrorState = ES_NOK;
    2bf8:	18 8a       	std	Y+16, r1	; 0x10




	u8 data = 0x80;
    2bfa:	80 e8       	ldi	r24, 0x80	; 128
    2bfc:	8f 87       	std	Y+15, r24	; 0x0f
	if(row>2||row<1||column>16||column<1)
    2bfe:	89 89       	ldd	r24, Y+17	; 0x11
    2c00:	83 30       	cpi	r24, 0x03	; 3
    2c02:	48 f4       	brcc	.+18     	; 0x2c16 <LCD_MOVE_CURSOR+0x36>
    2c04:	89 89       	ldd	r24, Y+17	; 0x11
    2c06:	88 23       	and	r24, r24
    2c08:	31 f0       	breq	.+12     	; 0x2c16 <LCD_MOVE_CURSOR+0x36>
    2c0a:	8a 89       	ldd	r24, Y+18	; 0x12
    2c0c:	81 31       	cpi	r24, 0x11	; 17
    2c0e:	18 f4       	brcc	.+6      	; 0x2c16 <LCD_MOVE_CURSOR+0x36>
    2c10:	8a 89       	ldd	r24, Y+18	; 0x12
    2c12:	88 23       	and	r24, r24
    2c14:	19 f4       	brne	.+6      	; 0x2c1c <LCD_MOVE_CURSOR+0x3c>
	{
		data=0x80;                       //Upper Left Location on Screen
    2c16:	80 e8       	ldi	r24, 0x80	; 128
    2c18:	8f 87       	std	Y+15, r24	; 0x0f
    2c1a:	0d c0       	rjmp	.+26     	; 0x2c36 <LCD_MOVE_CURSOR+0x56>
	}
	else if(row==1)
    2c1c:	89 89       	ldd	r24, Y+17	; 0x11
    2c1e:	81 30       	cpi	r24, 0x01	; 1
    2c20:	21 f4       	brne	.+8      	; 0x2c2a <LCD_MOVE_CURSOR+0x4a>
	{
		data=0x80+column-1 ;
    2c22:	8a 89       	ldd	r24, Y+18	; 0x12
    2c24:	81 58       	subi	r24, 0x81	; 129
    2c26:	8f 87       	std	Y+15, r24	; 0x0f
    2c28:	06 c0       	rjmp	.+12     	; 0x2c36 <LCD_MOVE_CURSOR+0x56>
	}
	else if (row==2)
    2c2a:	89 89       	ldd	r24, Y+17	; 0x11
    2c2c:	82 30       	cpi	r24, 0x02	; 2
    2c2e:	19 f4       	brne	.+6      	; 0x2c36 <LCD_MOVE_CURSOR+0x56>
	{
		data=0xc0+column-1;
    2c30:	8a 89       	ldd	r24, Y+18	; 0x12
    2c32:	81 54       	subi	r24, 0x41	; 65
    2c34:	8f 87       	std	Y+15, r24	; 0x0f
	}

	LCD_invidSendCommend(data);
    2c36:	8f 85       	ldd	r24, Y+15	; 0x0f
    2c38:	0e 94 cf 14 	call	0x299e	; 0x299e <LCD_invidSendCommend>
    2c3c:	80 e0       	ldi	r24, 0x00	; 0
    2c3e:	90 e0       	ldi	r25, 0x00	; 0
    2c40:	a0 e8       	ldi	r26, 0x80	; 128
    2c42:	bf e3       	ldi	r27, 0x3F	; 63
    2c44:	8b 87       	std	Y+11, r24	; 0x0b
    2c46:	9c 87       	std	Y+12, r25	; 0x0c
    2c48:	ad 87       	std	Y+13, r26	; 0x0d
    2c4a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2c4c:	6b 85       	ldd	r22, Y+11	; 0x0b
    2c4e:	7c 85       	ldd	r23, Y+12	; 0x0c
    2c50:	8d 85       	ldd	r24, Y+13	; 0x0d
    2c52:	9e 85       	ldd	r25, Y+14	; 0x0e
    2c54:	20 e0       	ldi	r18, 0x00	; 0
    2c56:	30 e0       	ldi	r19, 0x00	; 0
    2c58:	4a e7       	ldi	r20, 0x7A	; 122
    2c5a:	53 e4       	ldi	r21, 0x43	; 67
    2c5c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2c60:	dc 01       	movw	r26, r24
    2c62:	cb 01       	movw	r24, r22
    2c64:	8f 83       	std	Y+7, r24	; 0x07
    2c66:	98 87       	std	Y+8, r25	; 0x08
    2c68:	a9 87       	std	Y+9, r26	; 0x09
    2c6a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2c6c:	6f 81       	ldd	r22, Y+7	; 0x07
    2c6e:	78 85       	ldd	r23, Y+8	; 0x08
    2c70:	89 85       	ldd	r24, Y+9	; 0x09
    2c72:	9a 85       	ldd	r25, Y+10	; 0x0a
    2c74:	20 e0       	ldi	r18, 0x00	; 0
    2c76:	30 e0       	ldi	r19, 0x00	; 0
    2c78:	40 e8       	ldi	r20, 0x80	; 128
    2c7a:	5f e3       	ldi	r21, 0x3F	; 63
    2c7c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2c80:	88 23       	and	r24, r24
    2c82:	2c f4       	brge	.+10     	; 0x2c8e <LCD_MOVE_CURSOR+0xae>
		__ticks = 1;
    2c84:	81 e0       	ldi	r24, 0x01	; 1
    2c86:	90 e0       	ldi	r25, 0x00	; 0
    2c88:	9e 83       	std	Y+6, r25	; 0x06
    2c8a:	8d 83       	std	Y+5, r24	; 0x05
    2c8c:	3f c0       	rjmp	.+126    	; 0x2d0c <LCD_MOVE_CURSOR+0x12c>
	else if (__tmp > 65535)
    2c8e:	6f 81       	ldd	r22, Y+7	; 0x07
    2c90:	78 85       	ldd	r23, Y+8	; 0x08
    2c92:	89 85       	ldd	r24, Y+9	; 0x09
    2c94:	9a 85       	ldd	r25, Y+10	; 0x0a
    2c96:	20 e0       	ldi	r18, 0x00	; 0
    2c98:	3f ef       	ldi	r19, 0xFF	; 255
    2c9a:	4f e7       	ldi	r20, 0x7F	; 127
    2c9c:	57 e4       	ldi	r21, 0x47	; 71
    2c9e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2ca2:	18 16       	cp	r1, r24
    2ca4:	4c f5       	brge	.+82     	; 0x2cf8 <LCD_MOVE_CURSOR+0x118>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2ca6:	6b 85       	ldd	r22, Y+11	; 0x0b
    2ca8:	7c 85       	ldd	r23, Y+12	; 0x0c
    2caa:	8d 85       	ldd	r24, Y+13	; 0x0d
    2cac:	9e 85       	ldd	r25, Y+14	; 0x0e
    2cae:	20 e0       	ldi	r18, 0x00	; 0
    2cb0:	30 e0       	ldi	r19, 0x00	; 0
    2cb2:	40 e2       	ldi	r20, 0x20	; 32
    2cb4:	51 e4       	ldi	r21, 0x41	; 65
    2cb6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2cba:	dc 01       	movw	r26, r24
    2cbc:	cb 01       	movw	r24, r22
    2cbe:	bc 01       	movw	r22, r24
    2cc0:	cd 01       	movw	r24, r26
    2cc2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2cc6:	dc 01       	movw	r26, r24
    2cc8:	cb 01       	movw	r24, r22
    2cca:	9e 83       	std	Y+6, r25	; 0x06
    2ccc:	8d 83       	std	Y+5, r24	; 0x05
    2cce:	0f c0       	rjmp	.+30     	; 0x2cee <LCD_MOVE_CURSOR+0x10e>
    2cd0:	89 e1       	ldi	r24, 0x19	; 25
    2cd2:	90 e0       	ldi	r25, 0x00	; 0
    2cd4:	9c 83       	std	Y+4, r25	; 0x04
    2cd6:	8b 83       	std	Y+3, r24	; 0x03
    2cd8:	8b 81       	ldd	r24, Y+3	; 0x03
    2cda:	9c 81       	ldd	r25, Y+4	; 0x04
    2cdc:	01 97       	sbiw	r24, 0x01	; 1
    2cde:	f1 f7       	brne	.-4      	; 0x2cdc <LCD_MOVE_CURSOR+0xfc>
    2ce0:	9c 83       	std	Y+4, r25	; 0x04
    2ce2:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2ce4:	8d 81       	ldd	r24, Y+5	; 0x05
    2ce6:	9e 81       	ldd	r25, Y+6	; 0x06
    2ce8:	01 97       	sbiw	r24, 0x01	; 1
    2cea:	9e 83       	std	Y+6, r25	; 0x06
    2cec:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2cee:	8d 81       	ldd	r24, Y+5	; 0x05
    2cf0:	9e 81       	ldd	r25, Y+6	; 0x06
    2cf2:	00 97       	sbiw	r24, 0x00	; 0
    2cf4:	69 f7       	brne	.-38     	; 0x2cd0 <LCD_MOVE_CURSOR+0xf0>
    2cf6:	14 c0       	rjmp	.+40     	; 0x2d20 <LCD_MOVE_CURSOR+0x140>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2cf8:	6f 81       	ldd	r22, Y+7	; 0x07
    2cfa:	78 85       	ldd	r23, Y+8	; 0x08
    2cfc:	89 85       	ldd	r24, Y+9	; 0x09
    2cfe:	9a 85       	ldd	r25, Y+10	; 0x0a
    2d00:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2d04:	dc 01       	movw	r26, r24
    2d06:	cb 01       	movw	r24, r22
    2d08:	9e 83       	std	Y+6, r25	; 0x06
    2d0a:	8d 83       	std	Y+5, r24	; 0x05
    2d0c:	8d 81       	ldd	r24, Y+5	; 0x05
    2d0e:	9e 81       	ldd	r25, Y+6	; 0x06
    2d10:	9a 83       	std	Y+2, r25	; 0x02
    2d12:	89 83       	std	Y+1, r24	; 0x01
    2d14:	89 81       	ldd	r24, Y+1	; 0x01
    2d16:	9a 81       	ldd	r25, Y+2	; 0x02
    2d18:	01 97       	sbiw	r24, 0x01	; 1
    2d1a:	f1 f7       	brne	.-4      	; 0x2d18 <LCD_MOVE_CURSOR+0x138>
    2d1c:	9a 83       	std	Y+2, r25	; 0x02
    2d1e:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1);

	return Local_enuErrorState;
    2d20:	88 89       	ldd	r24, Y+16	; 0x10
}
    2d22:	62 96       	adiw	r28, 0x12	; 18
    2d24:	0f b6       	in	r0, 0x3f	; 63
    2d26:	f8 94       	cli
    2d28:	de bf       	out	0x3e, r29	; 62
    2d2a:	0f be       	out	0x3f, r0	; 63
    2d2c:	cd bf       	out	0x3d, r28	; 61
    2d2e:	cf 91       	pop	r28
    2d30:	df 91       	pop	r29
    2d32:	08 95       	ret

00002d34 <main>:
#include "App.h"
#include "util/delay.h"


int main(void)
{
    2d34:	df 93       	push	r29
    2d36:	cf 93       	push	r28
    2d38:	cd b7       	in	r28, 0x3d	; 61
    2d3a:	de b7       	in	r29, 0x3e	; 62
	DIO_enuInit();
    2d3c:	0e 94 47 0a 	call	0x148e	; 0x148e <DIO_enuInit>
	EXINT_Init();
    2d40:	0e 94 bb 0e 	call	0x1d76	; 0x1d76 <EXINT_Init>
	LCD_enuInit();
    2d44:	0e 94 60 10 	call	0x20c0	; 0x20c0 <LCD_enuInit>


	EXINTGLOBAL_Enable();
    2d48:	0e 94 5e 0f 	call	0x1ebc	; 0x1ebc <EXINTGLOBAL_Enable>
	EXINT_Enable(0);
    2d4c:	80 e0       	ldi	r24, 0x00	; 0
    2d4e:	0e 94 00 0f 	call	0x1e00	; 0x1e00 <EXINT_Enable>
	EXINT_Enable(1);
    2d52:	81 e0       	ldi	r24, 0x01	; 1
    2d54:	0e 94 00 0f 	call	0x1e00	; 0x1e00 <EXINT_Enable>
	EXINT_Callback(EXINT0,0);
    2d58:	88 ec       	ldi	r24, 0xC8	; 200
    2d5a:	97 e0       	ldi	r25, 0x07	; 7
    2d5c:	60 e0       	ldi	r22, 0x00	; 0
    2d5e:	0e 94 86 0f 	call	0x1f0c	; 0x1f0c <EXINT_Callback>
	EXINT_Callback(EXINT1,1);
    2d62:	8b e0       	ldi	r24, 0x0B	; 11
    2d64:	99 e0       	ldi	r25, 0x09	; 9
    2d66:	61 e0       	ldi	r22, 0x01	; 1
    2d68:	0e 94 86 0f 	call	0x1f0c	; 0x1f0c <EXINT_Callback>

	Game_Init();
    2d6c:	0e 94 a3 05 	call	0xb46	; 0xb46 <Game_Init>


	while(1)
	{
	  Game();
    2d70:	0e 94 88 06 	call	0xd10	; 0xd10 <Game>
    2d74:	fd cf       	rjmp	.-6      	; 0x2d70 <main+0x3c>

00002d76 <__mulsi3>:
    2d76:	62 9f       	mul	r22, r18
    2d78:	d0 01       	movw	r26, r0
    2d7a:	73 9f       	mul	r23, r19
    2d7c:	f0 01       	movw	r30, r0
    2d7e:	82 9f       	mul	r24, r18
    2d80:	e0 0d       	add	r30, r0
    2d82:	f1 1d       	adc	r31, r1
    2d84:	64 9f       	mul	r22, r20
    2d86:	e0 0d       	add	r30, r0
    2d88:	f1 1d       	adc	r31, r1
    2d8a:	92 9f       	mul	r25, r18
    2d8c:	f0 0d       	add	r31, r0
    2d8e:	83 9f       	mul	r24, r19
    2d90:	f0 0d       	add	r31, r0
    2d92:	74 9f       	mul	r23, r20
    2d94:	f0 0d       	add	r31, r0
    2d96:	65 9f       	mul	r22, r21
    2d98:	f0 0d       	add	r31, r0
    2d9a:	99 27       	eor	r25, r25
    2d9c:	72 9f       	mul	r23, r18
    2d9e:	b0 0d       	add	r27, r0
    2da0:	e1 1d       	adc	r30, r1
    2da2:	f9 1f       	adc	r31, r25
    2da4:	63 9f       	mul	r22, r19
    2da6:	b0 0d       	add	r27, r0
    2da8:	e1 1d       	adc	r30, r1
    2daa:	f9 1f       	adc	r31, r25
    2dac:	bd 01       	movw	r22, r26
    2dae:	cf 01       	movw	r24, r30
    2db0:	11 24       	eor	r1, r1
    2db2:	08 95       	ret

00002db4 <__divmodsi4>:
    2db4:	97 fb       	bst	r25, 7
    2db6:	09 2e       	mov	r0, r25
    2db8:	05 26       	eor	r0, r21
    2dba:	0e d0       	rcall	.+28     	; 0x2dd8 <__divmodsi4_neg1>
    2dbc:	57 fd       	sbrc	r21, 7
    2dbe:	04 d0       	rcall	.+8      	; 0x2dc8 <__divmodsi4_neg2>
    2dc0:	14 d0       	rcall	.+40     	; 0x2dea <__udivmodsi4>
    2dc2:	0a d0       	rcall	.+20     	; 0x2dd8 <__divmodsi4_neg1>
    2dc4:	00 1c       	adc	r0, r0
    2dc6:	38 f4       	brcc	.+14     	; 0x2dd6 <__divmodsi4_exit>

00002dc8 <__divmodsi4_neg2>:
    2dc8:	50 95       	com	r21
    2dca:	40 95       	com	r20
    2dcc:	30 95       	com	r19
    2dce:	21 95       	neg	r18
    2dd0:	3f 4f       	sbci	r19, 0xFF	; 255
    2dd2:	4f 4f       	sbci	r20, 0xFF	; 255
    2dd4:	5f 4f       	sbci	r21, 0xFF	; 255

00002dd6 <__divmodsi4_exit>:
    2dd6:	08 95       	ret

00002dd8 <__divmodsi4_neg1>:
    2dd8:	f6 f7       	brtc	.-4      	; 0x2dd6 <__divmodsi4_exit>
    2dda:	90 95       	com	r25
    2ddc:	80 95       	com	r24
    2dde:	70 95       	com	r23
    2de0:	61 95       	neg	r22
    2de2:	7f 4f       	sbci	r23, 0xFF	; 255
    2de4:	8f 4f       	sbci	r24, 0xFF	; 255
    2de6:	9f 4f       	sbci	r25, 0xFF	; 255
    2de8:	08 95       	ret

00002dea <__udivmodsi4>:
    2dea:	a1 e2       	ldi	r26, 0x21	; 33
    2dec:	1a 2e       	mov	r1, r26
    2dee:	aa 1b       	sub	r26, r26
    2df0:	bb 1b       	sub	r27, r27
    2df2:	fd 01       	movw	r30, r26
    2df4:	0d c0       	rjmp	.+26     	; 0x2e10 <__udivmodsi4_ep>

00002df6 <__udivmodsi4_loop>:
    2df6:	aa 1f       	adc	r26, r26
    2df8:	bb 1f       	adc	r27, r27
    2dfa:	ee 1f       	adc	r30, r30
    2dfc:	ff 1f       	adc	r31, r31
    2dfe:	a2 17       	cp	r26, r18
    2e00:	b3 07       	cpc	r27, r19
    2e02:	e4 07       	cpc	r30, r20
    2e04:	f5 07       	cpc	r31, r21
    2e06:	20 f0       	brcs	.+8      	; 0x2e10 <__udivmodsi4_ep>
    2e08:	a2 1b       	sub	r26, r18
    2e0a:	b3 0b       	sbc	r27, r19
    2e0c:	e4 0b       	sbc	r30, r20
    2e0e:	f5 0b       	sbc	r31, r21

00002e10 <__udivmodsi4_ep>:
    2e10:	66 1f       	adc	r22, r22
    2e12:	77 1f       	adc	r23, r23
    2e14:	88 1f       	adc	r24, r24
    2e16:	99 1f       	adc	r25, r25
    2e18:	1a 94       	dec	r1
    2e1a:	69 f7       	brne	.-38     	; 0x2df6 <__udivmodsi4_loop>
    2e1c:	60 95       	com	r22
    2e1e:	70 95       	com	r23
    2e20:	80 95       	com	r24
    2e22:	90 95       	com	r25
    2e24:	9b 01       	movw	r18, r22
    2e26:	ac 01       	movw	r20, r24
    2e28:	bd 01       	movw	r22, r26
    2e2a:	cf 01       	movw	r24, r30
    2e2c:	08 95       	ret

00002e2e <__prologue_saves__>:
    2e2e:	2f 92       	push	r2
    2e30:	3f 92       	push	r3
    2e32:	4f 92       	push	r4
    2e34:	5f 92       	push	r5
    2e36:	6f 92       	push	r6
    2e38:	7f 92       	push	r7
    2e3a:	8f 92       	push	r8
    2e3c:	9f 92       	push	r9
    2e3e:	af 92       	push	r10
    2e40:	bf 92       	push	r11
    2e42:	cf 92       	push	r12
    2e44:	df 92       	push	r13
    2e46:	ef 92       	push	r14
    2e48:	ff 92       	push	r15
    2e4a:	0f 93       	push	r16
    2e4c:	1f 93       	push	r17
    2e4e:	cf 93       	push	r28
    2e50:	df 93       	push	r29
    2e52:	cd b7       	in	r28, 0x3d	; 61
    2e54:	de b7       	in	r29, 0x3e	; 62
    2e56:	ca 1b       	sub	r28, r26
    2e58:	db 0b       	sbc	r29, r27
    2e5a:	0f b6       	in	r0, 0x3f	; 63
    2e5c:	f8 94       	cli
    2e5e:	de bf       	out	0x3e, r29	; 62
    2e60:	0f be       	out	0x3f, r0	; 63
    2e62:	cd bf       	out	0x3d, r28	; 61
    2e64:	09 94       	ijmp

00002e66 <__epilogue_restores__>:
    2e66:	2a 88       	ldd	r2, Y+18	; 0x12
    2e68:	39 88       	ldd	r3, Y+17	; 0x11
    2e6a:	48 88       	ldd	r4, Y+16	; 0x10
    2e6c:	5f 84       	ldd	r5, Y+15	; 0x0f
    2e6e:	6e 84       	ldd	r6, Y+14	; 0x0e
    2e70:	7d 84       	ldd	r7, Y+13	; 0x0d
    2e72:	8c 84       	ldd	r8, Y+12	; 0x0c
    2e74:	9b 84       	ldd	r9, Y+11	; 0x0b
    2e76:	aa 84       	ldd	r10, Y+10	; 0x0a
    2e78:	b9 84       	ldd	r11, Y+9	; 0x09
    2e7a:	c8 84       	ldd	r12, Y+8	; 0x08
    2e7c:	df 80       	ldd	r13, Y+7	; 0x07
    2e7e:	ee 80       	ldd	r14, Y+6	; 0x06
    2e80:	fd 80       	ldd	r15, Y+5	; 0x05
    2e82:	0c 81       	ldd	r16, Y+4	; 0x04
    2e84:	1b 81       	ldd	r17, Y+3	; 0x03
    2e86:	aa 81       	ldd	r26, Y+2	; 0x02
    2e88:	b9 81       	ldd	r27, Y+1	; 0x01
    2e8a:	ce 0f       	add	r28, r30
    2e8c:	d1 1d       	adc	r29, r1
    2e8e:	0f b6       	in	r0, 0x3f	; 63
    2e90:	f8 94       	cli
    2e92:	de bf       	out	0x3e, r29	; 62
    2e94:	0f be       	out	0x3f, r0	; 63
    2e96:	cd bf       	out	0x3d, r28	; 61
    2e98:	ed 01       	movw	r28, r26
    2e9a:	08 95       	ret

00002e9c <_exit>:
    2e9c:	f8 94       	cli

00002e9e <__stop_program>:
    2e9e:	ff cf       	rjmp	.-2      	; 0x2e9e <__stop_program>
