
Timer0.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000023b8  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000010a  00800060  000023b8  0000244c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000013  0080016a  0080016a  00002556  2**0
                  ALLOC
  3 .stab         000022f8  00000000  00000000  00002558  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000eba  00000000  00000000  00004850  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000180  00000000  00000000  0000570a  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 000001d4  00000000  00000000  0000588a  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0000218c  00000000  00000000  00005a5e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 0000122c  00000000  00000000  00007bea  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00001103  00000000  00000000  00008e16  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000001a0  00000000  00000000  00009f1c  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000002ee  00000000  00000000  0000a0bc  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00000932  00000000  00000000  0000a3aa  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000acdc  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 01 0a 	jmp	0x1402	; 0x1402 <__vector_11>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e8 eb       	ldi	r30, 0xB8	; 184
      68:	f3 e2       	ldi	r31, 0x23	; 35
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	aa 36       	cpi	r26, 0x6A	; 106
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	aa e6       	ldi	r26, 0x6A	; 106
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	ad 37       	cpi	r26, 0x7D	; 125
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 cd 10 	call	0x219a	; 0x219a <main>
      8a:	0c 94 da 11 	jmp	0x23b4	; 0x23b4 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 25 04 	call	0x84a	; 0x84a <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 25 04 	call	0x84a	; 0x84a <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 a3 11 	jmp	0x2346	; 0x2346 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a0 e6       	ldi	r26, 0x60	; 96
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 bf 11 	jmp	0x237e	; 0x237e <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 af 11 	jmp	0x235e	; 0x235e <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 16 06 	call	0xc2c	; 0xc2c <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 16 06 	call	0xc2c	; 0xc2c <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 41 05 	call	0xa82	; 0xa82 <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 cb 11 	jmp	0x2396	; 0x2396 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 af 11 	jmp	0x235e	; 0x235e <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 16 06 	call	0xc2c	; 0xc2c <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 16 06 	call	0xc2c	; 0xc2c <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 41 05 	call	0xa82	; 0xa82 <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 cb 11 	jmp	0x2396	; 0x2396 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 a3 11 	jmp	0x2346	; 0x2346 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 16 06 	call	0xc2c	; 0xc2c <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 16 06 	call	0xc2c	; 0xc2c <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	80 e6       	ldi	r24, 0x60	; 96
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 41 05 	call	0xa82	; 0xa82 <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 bf 11 	jmp	0x237e	; 0x237e <__epilogue_restores__>

00000632 <__divsf3>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 ab 11 	jmp	0x2356	; 0x2356 <__prologue_saves__+0x10>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	b9 e0       	ldi	r27, 0x09	; 9
     650:	eb 2e       	mov	r14, r27
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 16 06 	call	0xc2c	; 0xc2c <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 16 06 	call	0xc2c	; 0xc2c <__unpack_f>
     672:	29 85       	ldd	r18, Y+9	; 0x09
     674:	22 30       	cpi	r18, 0x02	; 2
     676:	08 f4       	brcc	.+2      	; 0x67a <__divsf3+0x48>
     678:	7e c0       	rjmp	.+252    	; 0x776 <__divsf3+0x144>
     67a:	39 89       	ldd	r19, Y+17	; 0x11
     67c:	32 30       	cpi	r19, 0x02	; 2
     67e:	10 f4       	brcc	.+4      	; 0x684 <__divsf3+0x52>
     680:	b8 01       	movw	r22, r16
     682:	7c c0       	rjmp	.+248    	; 0x77c <__divsf3+0x14a>
     684:	8a 85       	ldd	r24, Y+10	; 0x0a
     686:	9a 89       	ldd	r25, Y+18	; 0x12
     688:	89 27       	eor	r24, r25
     68a:	8a 87       	std	Y+10, r24	; 0x0a
     68c:	24 30       	cpi	r18, 0x04	; 4
     68e:	11 f0       	breq	.+4      	; 0x694 <__divsf3+0x62>
     690:	22 30       	cpi	r18, 0x02	; 2
     692:	31 f4       	brne	.+12     	; 0x6a0 <__divsf3+0x6e>
     694:	23 17       	cp	r18, r19
     696:	09 f0       	breq	.+2      	; 0x69a <__divsf3+0x68>
     698:	6e c0       	rjmp	.+220    	; 0x776 <__divsf3+0x144>
     69a:	60 e6       	ldi	r22, 0x60	; 96
     69c:	70 e0       	ldi	r23, 0x00	; 0
     69e:	6e c0       	rjmp	.+220    	; 0x77c <__divsf3+0x14a>
     6a0:	34 30       	cpi	r19, 0x04	; 4
     6a2:	39 f4       	brne	.+14     	; 0x6b2 <__divsf3+0x80>
     6a4:	1d 86       	std	Y+13, r1	; 0x0d
     6a6:	1e 86       	std	Y+14, r1	; 0x0e
     6a8:	1f 86       	std	Y+15, r1	; 0x0f
     6aa:	18 8a       	std	Y+16, r1	; 0x10
     6ac:	1c 86       	std	Y+12, r1	; 0x0c
     6ae:	1b 86       	std	Y+11, r1	; 0x0b
     6b0:	04 c0       	rjmp	.+8      	; 0x6ba <__divsf3+0x88>
     6b2:	32 30       	cpi	r19, 0x02	; 2
     6b4:	21 f4       	brne	.+8      	; 0x6be <__divsf3+0x8c>
     6b6:	84 e0       	ldi	r24, 0x04	; 4
     6b8:	89 87       	std	Y+9, r24	; 0x09
     6ba:	b7 01       	movw	r22, r14
     6bc:	5f c0       	rjmp	.+190    	; 0x77c <__divsf3+0x14a>
     6be:	2b 85       	ldd	r18, Y+11	; 0x0b
     6c0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6c2:	8b 89       	ldd	r24, Y+19	; 0x13
     6c4:	9c 89       	ldd	r25, Y+20	; 0x14
     6c6:	28 1b       	sub	r18, r24
     6c8:	39 0b       	sbc	r19, r25
     6ca:	3c 87       	std	Y+12, r19	; 0x0c
     6cc:	2b 87       	std	Y+11, r18	; 0x0b
     6ce:	ed 84       	ldd	r14, Y+13	; 0x0d
     6d0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6d2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6d4:	18 89       	ldd	r17, Y+16	; 0x10
     6d6:	ad 88       	ldd	r10, Y+21	; 0x15
     6d8:	be 88       	ldd	r11, Y+22	; 0x16
     6da:	cf 88       	ldd	r12, Y+23	; 0x17
     6dc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6de:	ea 14       	cp	r14, r10
     6e0:	fb 04       	cpc	r15, r11
     6e2:	0c 05       	cpc	r16, r12
     6e4:	1d 05       	cpc	r17, r13
     6e6:	40 f4       	brcc	.+16     	; 0x6f8 <__divsf3+0xc6>
     6e8:	ee 0c       	add	r14, r14
     6ea:	ff 1c       	adc	r15, r15
     6ec:	00 1f       	adc	r16, r16
     6ee:	11 1f       	adc	r17, r17
     6f0:	21 50       	subi	r18, 0x01	; 1
     6f2:	30 40       	sbci	r19, 0x00	; 0
     6f4:	3c 87       	std	Y+12, r19	; 0x0c
     6f6:	2b 87       	std	Y+11, r18	; 0x0b
     6f8:	20 e0       	ldi	r18, 0x00	; 0
     6fa:	30 e0       	ldi	r19, 0x00	; 0
     6fc:	40 e0       	ldi	r20, 0x00	; 0
     6fe:	50 e0       	ldi	r21, 0x00	; 0
     700:	80 e0       	ldi	r24, 0x00	; 0
     702:	90 e0       	ldi	r25, 0x00	; 0
     704:	a0 e0       	ldi	r26, 0x00	; 0
     706:	b0 e4       	ldi	r27, 0x40	; 64
     708:	60 e0       	ldi	r22, 0x00	; 0
     70a:	70 e0       	ldi	r23, 0x00	; 0
     70c:	ea 14       	cp	r14, r10
     70e:	fb 04       	cpc	r15, r11
     710:	0c 05       	cpc	r16, r12
     712:	1d 05       	cpc	r17, r13
     714:	40 f0       	brcs	.+16     	; 0x726 <__divsf3+0xf4>
     716:	28 2b       	or	r18, r24
     718:	39 2b       	or	r19, r25
     71a:	4a 2b       	or	r20, r26
     71c:	5b 2b       	or	r21, r27
     71e:	ea 18       	sub	r14, r10
     720:	fb 08       	sbc	r15, r11
     722:	0c 09       	sbc	r16, r12
     724:	1d 09       	sbc	r17, r13
     726:	b6 95       	lsr	r27
     728:	a7 95       	ror	r26
     72a:	97 95       	ror	r25
     72c:	87 95       	ror	r24
     72e:	ee 0c       	add	r14, r14
     730:	ff 1c       	adc	r15, r15
     732:	00 1f       	adc	r16, r16
     734:	11 1f       	adc	r17, r17
     736:	6f 5f       	subi	r22, 0xFF	; 255
     738:	7f 4f       	sbci	r23, 0xFF	; 255
     73a:	6f 31       	cpi	r22, 0x1F	; 31
     73c:	71 05       	cpc	r23, r1
     73e:	31 f7       	brne	.-52     	; 0x70c <__divsf3+0xda>
     740:	da 01       	movw	r26, r20
     742:	c9 01       	movw	r24, r18
     744:	8f 77       	andi	r24, 0x7F	; 127
     746:	90 70       	andi	r25, 0x00	; 0
     748:	a0 70       	andi	r26, 0x00	; 0
     74a:	b0 70       	andi	r27, 0x00	; 0
     74c:	80 34       	cpi	r24, 0x40	; 64
     74e:	91 05       	cpc	r25, r1
     750:	a1 05       	cpc	r26, r1
     752:	b1 05       	cpc	r27, r1
     754:	61 f4       	brne	.+24     	; 0x76e <__divsf3+0x13c>
     756:	27 fd       	sbrc	r18, 7
     758:	0a c0       	rjmp	.+20     	; 0x76e <__divsf3+0x13c>
     75a:	e1 14       	cp	r14, r1
     75c:	f1 04       	cpc	r15, r1
     75e:	01 05       	cpc	r16, r1
     760:	11 05       	cpc	r17, r1
     762:	29 f0       	breq	.+10     	; 0x76e <__divsf3+0x13c>
     764:	20 5c       	subi	r18, 0xC0	; 192
     766:	3f 4f       	sbci	r19, 0xFF	; 255
     768:	4f 4f       	sbci	r20, 0xFF	; 255
     76a:	5f 4f       	sbci	r21, 0xFF	; 255
     76c:	20 78       	andi	r18, 0x80	; 128
     76e:	2d 87       	std	Y+13, r18	; 0x0d
     770:	3e 87       	std	Y+14, r19	; 0x0e
     772:	4f 87       	std	Y+15, r20	; 0x0f
     774:	58 8b       	std	Y+16, r21	; 0x10
     776:	be 01       	movw	r22, r28
     778:	67 5f       	subi	r22, 0xF7	; 247
     77a:	7f 4f       	sbci	r23, 0xFF	; 255
     77c:	cb 01       	movw	r24, r22
     77e:	0e 94 41 05 	call	0xa82	; 0xa82 <__pack_f>
     782:	68 96       	adiw	r28, 0x18	; 24
     784:	ea e0       	ldi	r30, 0x0A	; 10
     786:	0c 94 c7 11 	jmp	0x238e	; 0x238e <__epilogue_restores__+0x10>

0000078a <__nesf2>:
     78a:	a8 e1       	ldi	r26, 0x18	; 24
     78c:	b0 e0       	ldi	r27, 0x00	; 0
     78e:	eb ec       	ldi	r30, 0xCB	; 203
     790:	f3 e0       	ldi	r31, 0x03	; 3
     792:	0c 94 af 11 	jmp	0x235e	; 0x235e <__prologue_saves__+0x18>
     796:	69 83       	std	Y+1, r22	; 0x01
     798:	7a 83       	std	Y+2, r23	; 0x02
     79a:	8b 83       	std	Y+3, r24	; 0x03
     79c:	9c 83       	std	Y+4, r25	; 0x04
     79e:	2d 83       	std	Y+5, r18	; 0x05
     7a0:	3e 83       	std	Y+6, r19	; 0x06
     7a2:	4f 83       	std	Y+7, r20	; 0x07
     7a4:	58 87       	std	Y+8, r21	; 0x08
     7a6:	89 e0       	ldi	r24, 0x09	; 9
     7a8:	e8 2e       	mov	r14, r24
     7aa:	f1 2c       	mov	r15, r1
     7ac:	ec 0e       	add	r14, r28
     7ae:	fd 1e       	adc	r15, r29
     7b0:	ce 01       	movw	r24, r28
     7b2:	01 96       	adiw	r24, 0x01	; 1
     7b4:	b7 01       	movw	r22, r14
     7b6:	0e 94 16 06 	call	0xc2c	; 0xc2c <__unpack_f>
     7ba:	8e 01       	movw	r16, r28
     7bc:	0f 5e       	subi	r16, 0xEF	; 239
     7be:	1f 4f       	sbci	r17, 0xFF	; 255
     7c0:	ce 01       	movw	r24, r28
     7c2:	05 96       	adiw	r24, 0x05	; 5
     7c4:	b8 01       	movw	r22, r16
     7c6:	0e 94 16 06 	call	0xc2c	; 0xc2c <__unpack_f>
     7ca:	89 85       	ldd	r24, Y+9	; 0x09
     7cc:	82 30       	cpi	r24, 0x02	; 2
     7ce:	40 f0       	brcs	.+16     	; 0x7e0 <__nesf2+0x56>
     7d0:	89 89       	ldd	r24, Y+17	; 0x11
     7d2:	82 30       	cpi	r24, 0x02	; 2
     7d4:	28 f0       	brcs	.+10     	; 0x7e0 <__nesf2+0x56>
     7d6:	c7 01       	movw	r24, r14
     7d8:	b8 01       	movw	r22, r16
     7da:	0e 94 8e 06 	call	0xd1c	; 0xd1c <__fpcmp_parts_f>
     7de:	01 c0       	rjmp	.+2      	; 0x7e2 <__nesf2+0x58>
     7e0:	81 e0       	ldi	r24, 0x01	; 1
     7e2:	68 96       	adiw	r28, 0x18	; 24
     7e4:	e6 e0       	ldi	r30, 0x06	; 6
     7e6:	0c 94 cb 11 	jmp	0x2396	; 0x2396 <__epilogue_restores__+0x18>

000007ea <__gesf2>:
     7ea:	a8 e1       	ldi	r26, 0x18	; 24
     7ec:	b0 e0       	ldi	r27, 0x00	; 0
     7ee:	eb ef       	ldi	r30, 0xFB	; 251
     7f0:	f3 e0       	ldi	r31, 0x03	; 3
     7f2:	0c 94 af 11 	jmp	0x235e	; 0x235e <__prologue_saves__+0x18>
     7f6:	69 83       	std	Y+1, r22	; 0x01
     7f8:	7a 83       	std	Y+2, r23	; 0x02
     7fa:	8b 83       	std	Y+3, r24	; 0x03
     7fc:	9c 83       	std	Y+4, r25	; 0x04
     7fe:	2d 83       	std	Y+5, r18	; 0x05
     800:	3e 83       	std	Y+6, r19	; 0x06
     802:	4f 83       	std	Y+7, r20	; 0x07
     804:	58 87       	std	Y+8, r21	; 0x08
     806:	89 e0       	ldi	r24, 0x09	; 9
     808:	e8 2e       	mov	r14, r24
     80a:	f1 2c       	mov	r15, r1
     80c:	ec 0e       	add	r14, r28
     80e:	fd 1e       	adc	r15, r29
     810:	ce 01       	movw	r24, r28
     812:	01 96       	adiw	r24, 0x01	; 1
     814:	b7 01       	movw	r22, r14
     816:	0e 94 16 06 	call	0xc2c	; 0xc2c <__unpack_f>
     81a:	8e 01       	movw	r16, r28
     81c:	0f 5e       	subi	r16, 0xEF	; 239
     81e:	1f 4f       	sbci	r17, 0xFF	; 255
     820:	ce 01       	movw	r24, r28
     822:	05 96       	adiw	r24, 0x05	; 5
     824:	b8 01       	movw	r22, r16
     826:	0e 94 16 06 	call	0xc2c	; 0xc2c <__unpack_f>
     82a:	89 85       	ldd	r24, Y+9	; 0x09
     82c:	82 30       	cpi	r24, 0x02	; 2
     82e:	40 f0       	brcs	.+16     	; 0x840 <__gesf2+0x56>
     830:	89 89       	ldd	r24, Y+17	; 0x11
     832:	82 30       	cpi	r24, 0x02	; 2
     834:	28 f0       	brcs	.+10     	; 0x840 <__gesf2+0x56>
     836:	c7 01       	movw	r24, r14
     838:	b8 01       	movw	r22, r16
     83a:	0e 94 8e 06 	call	0xd1c	; 0xd1c <__fpcmp_parts_f>
     83e:	01 c0       	rjmp	.+2      	; 0x842 <__gesf2+0x58>
     840:	8f ef       	ldi	r24, 0xFF	; 255
     842:	68 96       	adiw	r28, 0x18	; 24
     844:	e6 e0       	ldi	r30, 0x06	; 6
     846:	0c 94 cb 11 	jmp	0x2396	; 0x2396 <__epilogue_restores__+0x18>

0000084a <__fixsfsi>:
     84a:	ac e0       	ldi	r26, 0x0C	; 12
     84c:	b0 e0       	ldi	r27, 0x00	; 0
     84e:	eb e2       	ldi	r30, 0x2B	; 43
     850:	f4 e0       	ldi	r31, 0x04	; 4
     852:	0c 94 b3 11 	jmp	0x2366	; 0x2366 <__prologue_saves__+0x20>
     856:	69 83       	std	Y+1, r22	; 0x01
     858:	7a 83       	std	Y+2, r23	; 0x02
     85a:	8b 83       	std	Y+3, r24	; 0x03
     85c:	9c 83       	std	Y+4, r25	; 0x04
     85e:	ce 01       	movw	r24, r28
     860:	01 96       	adiw	r24, 0x01	; 1
     862:	be 01       	movw	r22, r28
     864:	6b 5f       	subi	r22, 0xFB	; 251
     866:	7f 4f       	sbci	r23, 0xFF	; 255
     868:	0e 94 16 06 	call	0xc2c	; 0xc2c <__unpack_f>
     86c:	8d 81       	ldd	r24, Y+5	; 0x05
     86e:	82 30       	cpi	r24, 0x02	; 2
     870:	61 f1       	breq	.+88     	; 0x8ca <__stack+0x6b>
     872:	82 30       	cpi	r24, 0x02	; 2
     874:	50 f1       	brcs	.+84     	; 0x8ca <__stack+0x6b>
     876:	84 30       	cpi	r24, 0x04	; 4
     878:	21 f4       	brne	.+8      	; 0x882 <__stack+0x23>
     87a:	8e 81       	ldd	r24, Y+6	; 0x06
     87c:	88 23       	and	r24, r24
     87e:	51 f1       	breq	.+84     	; 0x8d4 <__stack+0x75>
     880:	2e c0       	rjmp	.+92     	; 0x8de <__stack+0x7f>
     882:	2f 81       	ldd	r18, Y+7	; 0x07
     884:	38 85       	ldd	r19, Y+8	; 0x08
     886:	37 fd       	sbrc	r19, 7
     888:	20 c0       	rjmp	.+64     	; 0x8ca <__stack+0x6b>
     88a:	6e 81       	ldd	r22, Y+6	; 0x06
     88c:	2f 31       	cpi	r18, 0x1F	; 31
     88e:	31 05       	cpc	r19, r1
     890:	1c f0       	brlt	.+6      	; 0x898 <__stack+0x39>
     892:	66 23       	and	r22, r22
     894:	f9 f0       	breq	.+62     	; 0x8d4 <__stack+0x75>
     896:	23 c0       	rjmp	.+70     	; 0x8de <__stack+0x7f>
     898:	8e e1       	ldi	r24, 0x1E	; 30
     89a:	90 e0       	ldi	r25, 0x00	; 0
     89c:	82 1b       	sub	r24, r18
     89e:	93 0b       	sbc	r25, r19
     8a0:	29 85       	ldd	r18, Y+9	; 0x09
     8a2:	3a 85       	ldd	r19, Y+10	; 0x0a
     8a4:	4b 85       	ldd	r20, Y+11	; 0x0b
     8a6:	5c 85       	ldd	r21, Y+12	; 0x0c
     8a8:	04 c0       	rjmp	.+8      	; 0x8b2 <__stack+0x53>
     8aa:	56 95       	lsr	r21
     8ac:	47 95       	ror	r20
     8ae:	37 95       	ror	r19
     8b0:	27 95       	ror	r18
     8b2:	8a 95       	dec	r24
     8b4:	d2 f7       	brpl	.-12     	; 0x8aa <__stack+0x4b>
     8b6:	66 23       	and	r22, r22
     8b8:	b1 f0       	breq	.+44     	; 0x8e6 <__stack+0x87>
     8ba:	50 95       	com	r21
     8bc:	40 95       	com	r20
     8be:	30 95       	com	r19
     8c0:	21 95       	neg	r18
     8c2:	3f 4f       	sbci	r19, 0xFF	; 255
     8c4:	4f 4f       	sbci	r20, 0xFF	; 255
     8c6:	5f 4f       	sbci	r21, 0xFF	; 255
     8c8:	0e c0       	rjmp	.+28     	; 0x8e6 <__stack+0x87>
     8ca:	20 e0       	ldi	r18, 0x00	; 0
     8cc:	30 e0       	ldi	r19, 0x00	; 0
     8ce:	40 e0       	ldi	r20, 0x00	; 0
     8d0:	50 e0       	ldi	r21, 0x00	; 0
     8d2:	09 c0       	rjmp	.+18     	; 0x8e6 <__stack+0x87>
     8d4:	2f ef       	ldi	r18, 0xFF	; 255
     8d6:	3f ef       	ldi	r19, 0xFF	; 255
     8d8:	4f ef       	ldi	r20, 0xFF	; 255
     8da:	5f e7       	ldi	r21, 0x7F	; 127
     8dc:	04 c0       	rjmp	.+8      	; 0x8e6 <__stack+0x87>
     8de:	20 e0       	ldi	r18, 0x00	; 0
     8e0:	30 e0       	ldi	r19, 0x00	; 0
     8e2:	40 e0       	ldi	r20, 0x00	; 0
     8e4:	50 e8       	ldi	r21, 0x80	; 128
     8e6:	b9 01       	movw	r22, r18
     8e8:	ca 01       	movw	r24, r20
     8ea:	2c 96       	adiw	r28, 0x0c	; 12
     8ec:	e2 e0       	ldi	r30, 0x02	; 2
     8ee:	0c 94 cf 11 	jmp	0x239e	; 0x239e <__epilogue_restores__+0x20>

000008f2 <__floatunsisf>:
     8f2:	a8 e0       	ldi	r26, 0x08	; 8
     8f4:	b0 e0       	ldi	r27, 0x00	; 0
     8f6:	ef e7       	ldi	r30, 0x7F	; 127
     8f8:	f4 e0       	ldi	r31, 0x04	; 4
     8fa:	0c 94 ab 11 	jmp	0x2356	; 0x2356 <__prologue_saves__+0x10>
     8fe:	7b 01       	movw	r14, r22
     900:	8c 01       	movw	r16, r24
     902:	61 15       	cp	r22, r1
     904:	71 05       	cpc	r23, r1
     906:	81 05       	cpc	r24, r1
     908:	91 05       	cpc	r25, r1
     90a:	19 f4       	brne	.+6      	; 0x912 <__floatunsisf+0x20>
     90c:	82 e0       	ldi	r24, 0x02	; 2
     90e:	89 83       	std	Y+1, r24	; 0x01
     910:	60 c0       	rjmp	.+192    	; 0x9d2 <__floatunsisf+0xe0>
     912:	83 e0       	ldi	r24, 0x03	; 3
     914:	89 83       	std	Y+1, r24	; 0x01
     916:	8e e1       	ldi	r24, 0x1E	; 30
     918:	c8 2e       	mov	r12, r24
     91a:	d1 2c       	mov	r13, r1
     91c:	dc 82       	std	Y+4, r13	; 0x04
     91e:	cb 82       	std	Y+3, r12	; 0x03
     920:	ed 82       	std	Y+5, r14	; 0x05
     922:	fe 82       	std	Y+6, r15	; 0x06
     924:	0f 83       	std	Y+7, r16	; 0x07
     926:	18 87       	std	Y+8, r17	; 0x08
     928:	c8 01       	movw	r24, r16
     92a:	b7 01       	movw	r22, r14
     92c:	0e 94 f2 04 	call	0x9e4	; 0x9e4 <__clzsi2>
     930:	fc 01       	movw	r30, r24
     932:	31 97       	sbiw	r30, 0x01	; 1
     934:	f7 ff       	sbrs	r31, 7
     936:	3b c0       	rjmp	.+118    	; 0x9ae <__floatunsisf+0xbc>
     938:	22 27       	eor	r18, r18
     93a:	33 27       	eor	r19, r19
     93c:	2e 1b       	sub	r18, r30
     93e:	3f 0b       	sbc	r19, r31
     940:	57 01       	movw	r10, r14
     942:	68 01       	movw	r12, r16
     944:	02 2e       	mov	r0, r18
     946:	04 c0       	rjmp	.+8      	; 0x950 <__floatunsisf+0x5e>
     948:	d6 94       	lsr	r13
     94a:	c7 94       	ror	r12
     94c:	b7 94       	ror	r11
     94e:	a7 94       	ror	r10
     950:	0a 94       	dec	r0
     952:	d2 f7       	brpl	.-12     	; 0x948 <__floatunsisf+0x56>
     954:	40 e0       	ldi	r20, 0x00	; 0
     956:	50 e0       	ldi	r21, 0x00	; 0
     958:	60 e0       	ldi	r22, 0x00	; 0
     95a:	70 e0       	ldi	r23, 0x00	; 0
     95c:	81 e0       	ldi	r24, 0x01	; 1
     95e:	90 e0       	ldi	r25, 0x00	; 0
     960:	a0 e0       	ldi	r26, 0x00	; 0
     962:	b0 e0       	ldi	r27, 0x00	; 0
     964:	04 c0       	rjmp	.+8      	; 0x96e <__floatunsisf+0x7c>
     966:	88 0f       	add	r24, r24
     968:	99 1f       	adc	r25, r25
     96a:	aa 1f       	adc	r26, r26
     96c:	bb 1f       	adc	r27, r27
     96e:	2a 95       	dec	r18
     970:	d2 f7       	brpl	.-12     	; 0x966 <__floatunsisf+0x74>
     972:	01 97       	sbiw	r24, 0x01	; 1
     974:	a1 09       	sbc	r26, r1
     976:	b1 09       	sbc	r27, r1
     978:	8e 21       	and	r24, r14
     97a:	9f 21       	and	r25, r15
     97c:	a0 23       	and	r26, r16
     97e:	b1 23       	and	r27, r17
     980:	00 97       	sbiw	r24, 0x00	; 0
     982:	a1 05       	cpc	r26, r1
     984:	b1 05       	cpc	r27, r1
     986:	21 f0       	breq	.+8      	; 0x990 <__floatunsisf+0x9e>
     988:	41 e0       	ldi	r20, 0x01	; 1
     98a:	50 e0       	ldi	r21, 0x00	; 0
     98c:	60 e0       	ldi	r22, 0x00	; 0
     98e:	70 e0       	ldi	r23, 0x00	; 0
     990:	4a 29       	or	r20, r10
     992:	5b 29       	or	r21, r11
     994:	6c 29       	or	r22, r12
     996:	7d 29       	or	r23, r13
     998:	4d 83       	std	Y+5, r20	; 0x05
     99a:	5e 83       	std	Y+6, r21	; 0x06
     99c:	6f 83       	std	Y+7, r22	; 0x07
     99e:	78 87       	std	Y+8, r23	; 0x08
     9a0:	8e e1       	ldi	r24, 0x1E	; 30
     9a2:	90 e0       	ldi	r25, 0x00	; 0
     9a4:	8e 1b       	sub	r24, r30
     9a6:	9f 0b       	sbc	r25, r31
     9a8:	9c 83       	std	Y+4, r25	; 0x04
     9aa:	8b 83       	std	Y+3, r24	; 0x03
     9ac:	12 c0       	rjmp	.+36     	; 0x9d2 <__floatunsisf+0xe0>
     9ae:	30 97       	sbiw	r30, 0x00	; 0
     9b0:	81 f0       	breq	.+32     	; 0x9d2 <__floatunsisf+0xe0>
     9b2:	0e 2e       	mov	r0, r30
     9b4:	04 c0       	rjmp	.+8      	; 0x9be <__floatunsisf+0xcc>
     9b6:	ee 0c       	add	r14, r14
     9b8:	ff 1c       	adc	r15, r15
     9ba:	00 1f       	adc	r16, r16
     9bc:	11 1f       	adc	r17, r17
     9be:	0a 94       	dec	r0
     9c0:	d2 f7       	brpl	.-12     	; 0x9b6 <__floatunsisf+0xc4>
     9c2:	ed 82       	std	Y+5, r14	; 0x05
     9c4:	fe 82       	std	Y+6, r15	; 0x06
     9c6:	0f 83       	std	Y+7, r16	; 0x07
     9c8:	18 87       	std	Y+8, r17	; 0x08
     9ca:	ce 1a       	sub	r12, r30
     9cc:	df 0a       	sbc	r13, r31
     9ce:	dc 82       	std	Y+4, r13	; 0x04
     9d0:	cb 82       	std	Y+3, r12	; 0x03
     9d2:	1a 82       	std	Y+2, r1	; 0x02
     9d4:	ce 01       	movw	r24, r28
     9d6:	01 96       	adiw	r24, 0x01	; 1
     9d8:	0e 94 41 05 	call	0xa82	; 0xa82 <__pack_f>
     9dc:	28 96       	adiw	r28, 0x08	; 8
     9de:	ea e0       	ldi	r30, 0x0A	; 10
     9e0:	0c 94 c7 11 	jmp	0x238e	; 0x238e <__epilogue_restores__+0x10>

000009e4 <__clzsi2>:
     9e4:	ef 92       	push	r14
     9e6:	ff 92       	push	r15
     9e8:	0f 93       	push	r16
     9ea:	1f 93       	push	r17
     9ec:	7b 01       	movw	r14, r22
     9ee:	8c 01       	movw	r16, r24
     9f0:	80 e0       	ldi	r24, 0x00	; 0
     9f2:	e8 16       	cp	r14, r24
     9f4:	80 e0       	ldi	r24, 0x00	; 0
     9f6:	f8 06       	cpc	r15, r24
     9f8:	81 e0       	ldi	r24, 0x01	; 1
     9fa:	08 07       	cpc	r16, r24
     9fc:	80 e0       	ldi	r24, 0x00	; 0
     9fe:	18 07       	cpc	r17, r24
     a00:	88 f4       	brcc	.+34     	; 0xa24 <__clzsi2+0x40>
     a02:	8f ef       	ldi	r24, 0xFF	; 255
     a04:	e8 16       	cp	r14, r24
     a06:	f1 04       	cpc	r15, r1
     a08:	01 05       	cpc	r16, r1
     a0a:	11 05       	cpc	r17, r1
     a0c:	31 f0       	breq	.+12     	; 0xa1a <__clzsi2+0x36>
     a0e:	28 f0       	brcs	.+10     	; 0xa1a <__clzsi2+0x36>
     a10:	88 e0       	ldi	r24, 0x08	; 8
     a12:	90 e0       	ldi	r25, 0x00	; 0
     a14:	a0 e0       	ldi	r26, 0x00	; 0
     a16:	b0 e0       	ldi	r27, 0x00	; 0
     a18:	17 c0       	rjmp	.+46     	; 0xa48 <__clzsi2+0x64>
     a1a:	80 e0       	ldi	r24, 0x00	; 0
     a1c:	90 e0       	ldi	r25, 0x00	; 0
     a1e:	a0 e0       	ldi	r26, 0x00	; 0
     a20:	b0 e0       	ldi	r27, 0x00	; 0
     a22:	12 c0       	rjmp	.+36     	; 0xa48 <__clzsi2+0x64>
     a24:	80 e0       	ldi	r24, 0x00	; 0
     a26:	e8 16       	cp	r14, r24
     a28:	80 e0       	ldi	r24, 0x00	; 0
     a2a:	f8 06       	cpc	r15, r24
     a2c:	80 e0       	ldi	r24, 0x00	; 0
     a2e:	08 07       	cpc	r16, r24
     a30:	81 e0       	ldi	r24, 0x01	; 1
     a32:	18 07       	cpc	r17, r24
     a34:	28 f0       	brcs	.+10     	; 0xa40 <__clzsi2+0x5c>
     a36:	88 e1       	ldi	r24, 0x18	; 24
     a38:	90 e0       	ldi	r25, 0x00	; 0
     a3a:	a0 e0       	ldi	r26, 0x00	; 0
     a3c:	b0 e0       	ldi	r27, 0x00	; 0
     a3e:	04 c0       	rjmp	.+8      	; 0xa48 <__clzsi2+0x64>
     a40:	80 e1       	ldi	r24, 0x10	; 16
     a42:	90 e0       	ldi	r25, 0x00	; 0
     a44:	a0 e0       	ldi	r26, 0x00	; 0
     a46:	b0 e0       	ldi	r27, 0x00	; 0
     a48:	20 e2       	ldi	r18, 0x20	; 32
     a4a:	30 e0       	ldi	r19, 0x00	; 0
     a4c:	40 e0       	ldi	r20, 0x00	; 0
     a4e:	50 e0       	ldi	r21, 0x00	; 0
     a50:	28 1b       	sub	r18, r24
     a52:	39 0b       	sbc	r19, r25
     a54:	4a 0b       	sbc	r20, r26
     a56:	5b 0b       	sbc	r21, r27
     a58:	04 c0       	rjmp	.+8      	; 0xa62 <__clzsi2+0x7e>
     a5a:	16 95       	lsr	r17
     a5c:	07 95       	ror	r16
     a5e:	f7 94       	ror	r15
     a60:	e7 94       	ror	r14
     a62:	8a 95       	dec	r24
     a64:	d2 f7       	brpl	.-12     	; 0xa5a <__clzsi2+0x76>
     a66:	f7 01       	movw	r30, r14
     a68:	e8 59       	subi	r30, 0x98	; 152
     a6a:	ff 4f       	sbci	r31, 0xFF	; 255
     a6c:	80 81       	ld	r24, Z
     a6e:	28 1b       	sub	r18, r24
     a70:	31 09       	sbc	r19, r1
     a72:	41 09       	sbc	r20, r1
     a74:	51 09       	sbc	r21, r1
     a76:	c9 01       	movw	r24, r18
     a78:	1f 91       	pop	r17
     a7a:	0f 91       	pop	r16
     a7c:	ff 90       	pop	r15
     a7e:	ef 90       	pop	r14
     a80:	08 95       	ret

00000a82 <__pack_f>:
     a82:	df 92       	push	r13
     a84:	ef 92       	push	r14
     a86:	ff 92       	push	r15
     a88:	0f 93       	push	r16
     a8a:	1f 93       	push	r17
     a8c:	fc 01       	movw	r30, r24
     a8e:	e4 80       	ldd	r14, Z+4	; 0x04
     a90:	f5 80       	ldd	r15, Z+5	; 0x05
     a92:	06 81       	ldd	r16, Z+6	; 0x06
     a94:	17 81       	ldd	r17, Z+7	; 0x07
     a96:	d1 80       	ldd	r13, Z+1	; 0x01
     a98:	80 81       	ld	r24, Z
     a9a:	82 30       	cpi	r24, 0x02	; 2
     a9c:	48 f4       	brcc	.+18     	; 0xab0 <__pack_f+0x2e>
     a9e:	80 e0       	ldi	r24, 0x00	; 0
     aa0:	90 e0       	ldi	r25, 0x00	; 0
     aa2:	a0 e1       	ldi	r26, 0x10	; 16
     aa4:	b0 e0       	ldi	r27, 0x00	; 0
     aa6:	e8 2a       	or	r14, r24
     aa8:	f9 2a       	or	r15, r25
     aaa:	0a 2b       	or	r16, r26
     aac:	1b 2b       	or	r17, r27
     aae:	a5 c0       	rjmp	.+330    	; 0xbfa <__pack_f+0x178>
     ab0:	84 30       	cpi	r24, 0x04	; 4
     ab2:	09 f4       	brne	.+2      	; 0xab6 <__pack_f+0x34>
     ab4:	9f c0       	rjmp	.+318    	; 0xbf4 <__pack_f+0x172>
     ab6:	82 30       	cpi	r24, 0x02	; 2
     ab8:	21 f4       	brne	.+8      	; 0xac2 <__pack_f+0x40>
     aba:	ee 24       	eor	r14, r14
     abc:	ff 24       	eor	r15, r15
     abe:	87 01       	movw	r16, r14
     ac0:	05 c0       	rjmp	.+10     	; 0xacc <__pack_f+0x4a>
     ac2:	e1 14       	cp	r14, r1
     ac4:	f1 04       	cpc	r15, r1
     ac6:	01 05       	cpc	r16, r1
     ac8:	11 05       	cpc	r17, r1
     aca:	19 f4       	brne	.+6      	; 0xad2 <__pack_f+0x50>
     acc:	e0 e0       	ldi	r30, 0x00	; 0
     ace:	f0 e0       	ldi	r31, 0x00	; 0
     ad0:	96 c0       	rjmp	.+300    	; 0xbfe <__pack_f+0x17c>
     ad2:	62 81       	ldd	r22, Z+2	; 0x02
     ad4:	73 81       	ldd	r23, Z+3	; 0x03
     ad6:	9f ef       	ldi	r25, 0xFF	; 255
     ad8:	62 38       	cpi	r22, 0x82	; 130
     ada:	79 07       	cpc	r23, r25
     adc:	0c f0       	brlt	.+2      	; 0xae0 <__pack_f+0x5e>
     ade:	5b c0       	rjmp	.+182    	; 0xb96 <__pack_f+0x114>
     ae0:	22 e8       	ldi	r18, 0x82	; 130
     ae2:	3f ef       	ldi	r19, 0xFF	; 255
     ae4:	26 1b       	sub	r18, r22
     ae6:	37 0b       	sbc	r19, r23
     ae8:	2a 31       	cpi	r18, 0x1A	; 26
     aea:	31 05       	cpc	r19, r1
     aec:	2c f0       	brlt	.+10     	; 0xaf8 <__pack_f+0x76>
     aee:	20 e0       	ldi	r18, 0x00	; 0
     af0:	30 e0       	ldi	r19, 0x00	; 0
     af2:	40 e0       	ldi	r20, 0x00	; 0
     af4:	50 e0       	ldi	r21, 0x00	; 0
     af6:	2a c0       	rjmp	.+84     	; 0xb4c <__pack_f+0xca>
     af8:	b8 01       	movw	r22, r16
     afa:	a7 01       	movw	r20, r14
     afc:	02 2e       	mov	r0, r18
     afe:	04 c0       	rjmp	.+8      	; 0xb08 <__pack_f+0x86>
     b00:	76 95       	lsr	r23
     b02:	67 95       	ror	r22
     b04:	57 95       	ror	r21
     b06:	47 95       	ror	r20
     b08:	0a 94       	dec	r0
     b0a:	d2 f7       	brpl	.-12     	; 0xb00 <__pack_f+0x7e>
     b0c:	81 e0       	ldi	r24, 0x01	; 1
     b0e:	90 e0       	ldi	r25, 0x00	; 0
     b10:	a0 e0       	ldi	r26, 0x00	; 0
     b12:	b0 e0       	ldi	r27, 0x00	; 0
     b14:	04 c0       	rjmp	.+8      	; 0xb1e <__pack_f+0x9c>
     b16:	88 0f       	add	r24, r24
     b18:	99 1f       	adc	r25, r25
     b1a:	aa 1f       	adc	r26, r26
     b1c:	bb 1f       	adc	r27, r27
     b1e:	2a 95       	dec	r18
     b20:	d2 f7       	brpl	.-12     	; 0xb16 <__pack_f+0x94>
     b22:	01 97       	sbiw	r24, 0x01	; 1
     b24:	a1 09       	sbc	r26, r1
     b26:	b1 09       	sbc	r27, r1
     b28:	8e 21       	and	r24, r14
     b2a:	9f 21       	and	r25, r15
     b2c:	a0 23       	and	r26, r16
     b2e:	b1 23       	and	r27, r17
     b30:	00 97       	sbiw	r24, 0x00	; 0
     b32:	a1 05       	cpc	r26, r1
     b34:	b1 05       	cpc	r27, r1
     b36:	21 f0       	breq	.+8      	; 0xb40 <__pack_f+0xbe>
     b38:	81 e0       	ldi	r24, 0x01	; 1
     b3a:	90 e0       	ldi	r25, 0x00	; 0
     b3c:	a0 e0       	ldi	r26, 0x00	; 0
     b3e:	b0 e0       	ldi	r27, 0x00	; 0
     b40:	9a 01       	movw	r18, r20
     b42:	ab 01       	movw	r20, r22
     b44:	28 2b       	or	r18, r24
     b46:	39 2b       	or	r19, r25
     b48:	4a 2b       	or	r20, r26
     b4a:	5b 2b       	or	r21, r27
     b4c:	da 01       	movw	r26, r20
     b4e:	c9 01       	movw	r24, r18
     b50:	8f 77       	andi	r24, 0x7F	; 127
     b52:	90 70       	andi	r25, 0x00	; 0
     b54:	a0 70       	andi	r26, 0x00	; 0
     b56:	b0 70       	andi	r27, 0x00	; 0
     b58:	80 34       	cpi	r24, 0x40	; 64
     b5a:	91 05       	cpc	r25, r1
     b5c:	a1 05       	cpc	r26, r1
     b5e:	b1 05       	cpc	r27, r1
     b60:	39 f4       	brne	.+14     	; 0xb70 <__pack_f+0xee>
     b62:	27 ff       	sbrs	r18, 7
     b64:	09 c0       	rjmp	.+18     	; 0xb78 <__pack_f+0xf6>
     b66:	20 5c       	subi	r18, 0xC0	; 192
     b68:	3f 4f       	sbci	r19, 0xFF	; 255
     b6a:	4f 4f       	sbci	r20, 0xFF	; 255
     b6c:	5f 4f       	sbci	r21, 0xFF	; 255
     b6e:	04 c0       	rjmp	.+8      	; 0xb78 <__pack_f+0xf6>
     b70:	21 5c       	subi	r18, 0xC1	; 193
     b72:	3f 4f       	sbci	r19, 0xFF	; 255
     b74:	4f 4f       	sbci	r20, 0xFF	; 255
     b76:	5f 4f       	sbci	r21, 0xFF	; 255
     b78:	e0 e0       	ldi	r30, 0x00	; 0
     b7a:	f0 e0       	ldi	r31, 0x00	; 0
     b7c:	20 30       	cpi	r18, 0x00	; 0
     b7e:	a0 e0       	ldi	r26, 0x00	; 0
     b80:	3a 07       	cpc	r19, r26
     b82:	a0 e0       	ldi	r26, 0x00	; 0
     b84:	4a 07       	cpc	r20, r26
     b86:	a0 e4       	ldi	r26, 0x40	; 64
     b88:	5a 07       	cpc	r21, r26
     b8a:	10 f0       	brcs	.+4      	; 0xb90 <__pack_f+0x10e>
     b8c:	e1 e0       	ldi	r30, 0x01	; 1
     b8e:	f0 e0       	ldi	r31, 0x00	; 0
     b90:	79 01       	movw	r14, r18
     b92:	8a 01       	movw	r16, r20
     b94:	27 c0       	rjmp	.+78     	; 0xbe4 <__pack_f+0x162>
     b96:	60 38       	cpi	r22, 0x80	; 128
     b98:	71 05       	cpc	r23, r1
     b9a:	64 f5       	brge	.+88     	; 0xbf4 <__pack_f+0x172>
     b9c:	fb 01       	movw	r30, r22
     b9e:	e1 58       	subi	r30, 0x81	; 129
     ba0:	ff 4f       	sbci	r31, 0xFF	; 255
     ba2:	d8 01       	movw	r26, r16
     ba4:	c7 01       	movw	r24, r14
     ba6:	8f 77       	andi	r24, 0x7F	; 127
     ba8:	90 70       	andi	r25, 0x00	; 0
     baa:	a0 70       	andi	r26, 0x00	; 0
     bac:	b0 70       	andi	r27, 0x00	; 0
     bae:	80 34       	cpi	r24, 0x40	; 64
     bb0:	91 05       	cpc	r25, r1
     bb2:	a1 05       	cpc	r26, r1
     bb4:	b1 05       	cpc	r27, r1
     bb6:	39 f4       	brne	.+14     	; 0xbc6 <__pack_f+0x144>
     bb8:	e7 fe       	sbrs	r14, 7
     bba:	0d c0       	rjmp	.+26     	; 0xbd6 <__pack_f+0x154>
     bbc:	80 e4       	ldi	r24, 0x40	; 64
     bbe:	90 e0       	ldi	r25, 0x00	; 0
     bc0:	a0 e0       	ldi	r26, 0x00	; 0
     bc2:	b0 e0       	ldi	r27, 0x00	; 0
     bc4:	04 c0       	rjmp	.+8      	; 0xbce <__pack_f+0x14c>
     bc6:	8f e3       	ldi	r24, 0x3F	; 63
     bc8:	90 e0       	ldi	r25, 0x00	; 0
     bca:	a0 e0       	ldi	r26, 0x00	; 0
     bcc:	b0 e0       	ldi	r27, 0x00	; 0
     bce:	e8 0e       	add	r14, r24
     bd0:	f9 1e       	adc	r15, r25
     bd2:	0a 1f       	adc	r16, r26
     bd4:	1b 1f       	adc	r17, r27
     bd6:	17 ff       	sbrs	r17, 7
     bd8:	05 c0       	rjmp	.+10     	; 0xbe4 <__pack_f+0x162>
     bda:	16 95       	lsr	r17
     bdc:	07 95       	ror	r16
     bde:	f7 94       	ror	r15
     be0:	e7 94       	ror	r14
     be2:	31 96       	adiw	r30, 0x01	; 1
     be4:	87 e0       	ldi	r24, 0x07	; 7
     be6:	16 95       	lsr	r17
     be8:	07 95       	ror	r16
     bea:	f7 94       	ror	r15
     bec:	e7 94       	ror	r14
     bee:	8a 95       	dec	r24
     bf0:	d1 f7       	brne	.-12     	; 0xbe6 <__pack_f+0x164>
     bf2:	05 c0       	rjmp	.+10     	; 0xbfe <__pack_f+0x17c>
     bf4:	ee 24       	eor	r14, r14
     bf6:	ff 24       	eor	r15, r15
     bf8:	87 01       	movw	r16, r14
     bfa:	ef ef       	ldi	r30, 0xFF	; 255
     bfc:	f0 e0       	ldi	r31, 0x00	; 0
     bfe:	6e 2f       	mov	r22, r30
     c00:	67 95       	ror	r22
     c02:	66 27       	eor	r22, r22
     c04:	67 95       	ror	r22
     c06:	90 2f       	mov	r25, r16
     c08:	9f 77       	andi	r25, 0x7F	; 127
     c0a:	d7 94       	ror	r13
     c0c:	dd 24       	eor	r13, r13
     c0e:	d7 94       	ror	r13
     c10:	8e 2f       	mov	r24, r30
     c12:	86 95       	lsr	r24
     c14:	49 2f       	mov	r20, r25
     c16:	46 2b       	or	r20, r22
     c18:	58 2f       	mov	r21, r24
     c1a:	5d 29       	or	r21, r13
     c1c:	b7 01       	movw	r22, r14
     c1e:	ca 01       	movw	r24, r20
     c20:	1f 91       	pop	r17
     c22:	0f 91       	pop	r16
     c24:	ff 90       	pop	r15
     c26:	ef 90       	pop	r14
     c28:	df 90       	pop	r13
     c2a:	08 95       	ret

00000c2c <__unpack_f>:
     c2c:	fc 01       	movw	r30, r24
     c2e:	db 01       	movw	r26, r22
     c30:	40 81       	ld	r20, Z
     c32:	51 81       	ldd	r21, Z+1	; 0x01
     c34:	22 81       	ldd	r18, Z+2	; 0x02
     c36:	62 2f       	mov	r22, r18
     c38:	6f 77       	andi	r22, 0x7F	; 127
     c3a:	70 e0       	ldi	r23, 0x00	; 0
     c3c:	22 1f       	adc	r18, r18
     c3e:	22 27       	eor	r18, r18
     c40:	22 1f       	adc	r18, r18
     c42:	93 81       	ldd	r25, Z+3	; 0x03
     c44:	89 2f       	mov	r24, r25
     c46:	88 0f       	add	r24, r24
     c48:	82 2b       	or	r24, r18
     c4a:	28 2f       	mov	r18, r24
     c4c:	30 e0       	ldi	r19, 0x00	; 0
     c4e:	99 1f       	adc	r25, r25
     c50:	99 27       	eor	r25, r25
     c52:	99 1f       	adc	r25, r25
     c54:	11 96       	adiw	r26, 0x01	; 1
     c56:	9c 93       	st	X, r25
     c58:	11 97       	sbiw	r26, 0x01	; 1
     c5a:	21 15       	cp	r18, r1
     c5c:	31 05       	cpc	r19, r1
     c5e:	a9 f5       	brne	.+106    	; 0xcca <__unpack_f+0x9e>
     c60:	41 15       	cp	r20, r1
     c62:	51 05       	cpc	r21, r1
     c64:	61 05       	cpc	r22, r1
     c66:	71 05       	cpc	r23, r1
     c68:	11 f4       	brne	.+4      	; 0xc6e <__unpack_f+0x42>
     c6a:	82 e0       	ldi	r24, 0x02	; 2
     c6c:	37 c0       	rjmp	.+110    	; 0xcdc <__unpack_f+0xb0>
     c6e:	82 e8       	ldi	r24, 0x82	; 130
     c70:	9f ef       	ldi	r25, 0xFF	; 255
     c72:	13 96       	adiw	r26, 0x03	; 3
     c74:	9c 93       	st	X, r25
     c76:	8e 93       	st	-X, r24
     c78:	12 97       	sbiw	r26, 0x02	; 2
     c7a:	9a 01       	movw	r18, r20
     c7c:	ab 01       	movw	r20, r22
     c7e:	67 e0       	ldi	r22, 0x07	; 7
     c80:	22 0f       	add	r18, r18
     c82:	33 1f       	adc	r19, r19
     c84:	44 1f       	adc	r20, r20
     c86:	55 1f       	adc	r21, r21
     c88:	6a 95       	dec	r22
     c8a:	d1 f7       	brne	.-12     	; 0xc80 <__unpack_f+0x54>
     c8c:	83 e0       	ldi	r24, 0x03	; 3
     c8e:	8c 93       	st	X, r24
     c90:	0d c0       	rjmp	.+26     	; 0xcac <__unpack_f+0x80>
     c92:	22 0f       	add	r18, r18
     c94:	33 1f       	adc	r19, r19
     c96:	44 1f       	adc	r20, r20
     c98:	55 1f       	adc	r21, r21
     c9a:	12 96       	adiw	r26, 0x02	; 2
     c9c:	8d 91       	ld	r24, X+
     c9e:	9c 91       	ld	r25, X
     ca0:	13 97       	sbiw	r26, 0x03	; 3
     ca2:	01 97       	sbiw	r24, 0x01	; 1
     ca4:	13 96       	adiw	r26, 0x03	; 3
     ca6:	9c 93       	st	X, r25
     ca8:	8e 93       	st	-X, r24
     caa:	12 97       	sbiw	r26, 0x02	; 2
     cac:	20 30       	cpi	r18, 0x00	; 0
     cae:	80 e0       	ldi	r24, 0x00	; 0
     cb0:	38 07       	cpc	r19, r24
     cb2:	80 e0       	ldi	r24, 0x00	; 0
     cb4:	48 07       	cpc	r20, r24
     cb6:	80 e4       	ldi	r24, 0x40	; 64
     cb8:	58 07       	cpc	r21, r24
     cba:	58 f3       	brcs	.-42     	; 0xc92 <__unpack_f+0x66>
     cbc:	14 96       	adiw	r26, 0x04	; 4
     cbe:	2d 93       	st	X+, r18
     cc0:	3d 93       	st	X+, r19
     cc2:	4d 93       	st	X+, r20
     cc4:	5c 93       	st	X, r21
     cc6:	17 97       	sbiw	r26, 0x07	; 7
     cc8:	08 95       	ret
     cca:	2f 3f       	cpi	r18, 0xFF	; 255
     ccc:	31 05       	cpc	r19, r1
     cce:	79 f4       	brne	.+30     	; 0xcee <__unpack_f+0xc2>
     cd0:	41 15       	cp	r20, r1
     cd2:	51 05       	cpc	r21, r1
     cd4:	61 05       	cpc	r22, r1
     cd6:	71 05       	cpc	r23, r1
     cd8:	19 f4       	brne	.+6      	; 0xce0 <__unpack_f+0xb4>
     cda:	84 e0       	ldi	r24, 0x04	; 4
     cdc:	8c 93       	st	X, r24
     cde:	08 95       	ret
     ce0:	64 ff       	sbrs	r22, 4
     ce2:	03 c0       	rjmp	.+6      	; 0xcea <__unpack_f+0xbe>
     ce4:	81 e0       	ldi	r24, 0x01	; 1
     ce6:	8c 93       	st	X, r24
     ce8:	12 c0       	rjmp	.+36     	; 0xd0e <__unpack_f+0xe2>
     cea:	1c 92       	st	X, r1
     cec:	10 c0       	rjmp	.+32     	; 0xd0e <__unpack_f+0xe2>
     cee:	2f 57       	subi	r18, 0x7F	; 127
     cf0:	30 40       	sbci	r19, 0x00	; 0
     cf2:	13 96       	adiw	r26, 0x03	; 3
     cf4:	3c 93       	st	X, r19
     cf6:	2e 93       	st	-X, r18
     cf8:	12 97       	sbiw	r26, 0x02	; 2
     cfa:	83 e0       	ldi	r24, 0x03	; 3
     cfc:	8c 93       	st	X, r24
     cfe:	87 e0       	ldi	r24, 0x07	; 7
     d00:	44 0f       	add	r20, r20
     d02:	55 1f       	adc	r21, r21
     d04:	66 1f       	adc	r22, r22
     d06:	77 1f       	adc	r23, r23
     d08:	8a 95       	dec	r24
     d0a:	d1 f7       	brne	.-12     	; 0xd00 <__unpack_f+0xd4>
     d0c:	70 64       	ori	r23, 0x40	; 64
     d0e:	14 96       	adiw	r26, 0x04	; 4
     d10:	4d 93       	st	X+, r20
     d12:	5d 93       	st	X+, r21
     d14:	6d 93       	st	X+, r22
     d16:	7c 93       	st	X, r23
     d18:	17 97       	sbiw	r26, 0x07	; 7
     d1a:	08 95       	ret

00000d1c <__fpcmp_parts_f>:
     d1c:	1f 93       	push	r17
     d1e:	dc 01       	movw	r26, r24
     d20:	fb 01       	movw	r30, r22
     d22:	9c 91       	ld	r25, X
     d24:	92 30       	cpi	r25, 0x02	; 2
     d26:	08 f4       	brcc	.+2      	; 0xd2a <__fpcmp_parts_f+0xe>
     d28:	47 c0       	rjmp	.+142    	; 0xdb8 <__fpcmp_parts_f+0x9c>
     d2a:	80 81       	ld	r24, Z
     d2c:	82 30       	cpi	r24, 0x02	; 2
     d2e:	08 f4       	brcc	.+2      	; 0xd32 <__fpcmp_parts_f+0x16>
     d30:	43 c0       	rjmp	.+134    	; 0xdb8 <__fpcmp_parts_f+0x9c>
     d32:	94 30       	cpi	r25, 0x04	; 4
     d34:	51 f4       	brne	.+20     	; 0xd4a <__fpcmp_parts_f+0x2e>
     d36:	11 96       	adiw	r26, 0x01	; 1
     d38:	1c 91       	ld	r17, X
     d3a:	84 30       	cpi	r24, 0x04	; 4
     d3c:	99 f5       	brne	.+102    	; 0xda4 <__fpcmp_parts_f+0x88>
     d3e:	81 81       	ldd	r24, Z+1	; 0x01
     d40:	68 2f       	mov	r22, r24
     d42:	70 e0       	ldi	r23, 0x00	; 0
     d44:	61 1b       	sub	r22, r17
     d46:	71 09       	sbc	r23, r1
     d48:	3f c0       	rjmp	.+126    	; 0xdc8 <__fpcmp_parts_f+0xac>
     d4a:	84 30       	cpi	r24, 0x04	; 4
     d4c:	21 f0       	breq	.+8      	; 0xd56 <__fpcmp_parts_f+0x3a>
     d4e:	92 30       	cpi	r25, 0x02	; 2
     d50:	31 f4       	brne	.+12     	; 0xd5e <__fpcmp_parts_f+0x42>
     d52:	82 30       	cpi	r24, 0x02	; 2
     d54:	b9 f1       	breq	.+110    	; 0xdc4 <__fpcmp_parts_f+0xa8>
     d56:	81 81       	ldd	r24, Z+1	; 0x01
     d58:	88 23       	and	r24, r24
     d5a:	89 f1       	breq	.+98     	; 0xdbe <__fpcmp_parts_f+0xa2>
     d5c:	2d c0       	rjmp	.+90     	; 0xdb8 <__fpcmp_parts_f+0x9c>
     d5e:	11 96       	adiw	r26, 0x01	; 1
     d60:	1c 91       	ld	r17, X
     d62:	11 97       	sbiw	r26, 0x01	; 1
     d64:	82 30       	cpi	r24, 0x02	; 2
     d66:	f1 f0       	breq	.+60     	; 0xda4 <__fpcmp_parts_f+0x88>
     d68:	81 81       	ldd	r24, Z+1	; 0x01
     d6a:	18 17       	cp	r17, r24
     d6c:	d9 f4       	brne	.+54     	; 0xda4 <__fpcmp_parts_f+0x88>
     d6e:	12 96       	adiw	r26, 0x02	; 2
     d70:	2d 91       	ld	r18, X+
     d72:	3c 91       	ld	r19, X
     d74:	13 97       	sbiw	r26, 0x03	; 3
     d76:	82 81       	ldd	r24, Z+2	; 0x02
     d78:	93 81       	ldd	r25, Z+3	; 0x03
     d7a:	82 17       	cp	r24, r18
     d7c:	93 07       	cpc	r25, r19
     d7e:	94 f0       	brlt	.+36     	; 0xda4 <__fpcmp_parts_f+0x88>
     d80:	28 17       	cp	r18, r24
     d82:	39 07       	cpc	r19, r25
     d84:	bc f0       	brlt	.+46     	; 0xdb4 <__fpcmp_parts_f+0x98>
     d86:	14 96       	adiw	r26, 0x04	; 4
     d88:	8d 91       	ld	r24, X+
     d8a:	9d 91       	ld	r25, X+
     d8c:	0d 90       	ld	r0, X+
     d8e:	bc 91       	ld	r27, X
     d90:	a0 2d       	mov	r26, r0
     d92:	24 81       	ldd	r18, Z+4	; 0x04
     d94:	35 81       	ldd	r19, Z+5	; 0x05
     d96:	46 81       	ldd	r20, Z+6	; 0x06
     d98:	57 81       	ldd	r21, Z+7	; 0x07
     d9a:	28 17       	cp	r18, r24
     d9c:	39 07       	cpc	r19, r25
     d9e:	4a 07       	cpc	r20, r26
     da0:	5b 07       	cpc	r21, r27
     da2:	18 f4       	brcc	.+6      	; 0xdaa <__fpcmp_parts_f+0x8e>
     da4:	11 23       	and	r17, r17
     da6:	41 f0       	breq	.+16     	; 0xdb8 <__fpcmp_parts_f+0x9c>
     da8:	0a c0       	rjmp	.+20     	; 0xdbe <__fpcmp_parts_f+0xa2>
     daa:	82 17       	cp	r24, r18
     dac:	93 07       	cpc	r25, r19
     dae:	a4 07       	cpc	r26, r20
     db0:	b5 07       	cpc	r27, r21
     db2:	40 f4       	brcc	.+16     	; 0xdc4 <__fpcmp_parts_f+0xa8>
     db4:	11 23       	and	r17, r17
     db6:	19 f0       	breq	.+6      	; 0xdbe <__fpcmp_parts_f+0xa2>
     db8:	61 e0       	ldi	r22, 0x01	; 1
     dba:	70 e0       	ldi	r23, 0x00	; 0
     dbc:	05 c0       	rjmp	.+10     	; 0xdc8 <__fpcmp_parts_f+0xac>
     dbe:	6f ef       	ldi	r22, 0xFF	; 255
     dc0:	7f ef       	ldi	r23, 0xFF	; 255
     dc2:	02 c0       	rjmp	.+4      	; 0xdc8 <__fpcmp_parts_f+0xac>
     dc4:	60 e0       	ldi	r22, 0x00	; 0
     dc6:	70 e0       	ldi	r23, 0x00	; 0
     dc8:	cb 01       	movw	r24, r22
     dca:	1f 91       	pop	r17
     dcc:	08 95       	ret

00000dce <TIMER_enuInit>:

static void (*Global_Ptr)(void*)=NULL;
static void *Global_Para=NULL;

ES_t TIMER_enuInit(void)
{
     dce:	df 93       	push	r29
     dd0:	cf 93       	push	r28
     dd2:	0f 92       	push	r0
     dd4:	cd b7       	in	r28, 0x3d	; 61
     dd6:	de b7       	in	r29, 0x3e	; 62
	ES_t Local_enuErrorState = ES_NOK;
     dd8:	19 82       	std	Y+1, r1	; 0x01
#if TIMER_PRES == 1024
	TCCR0 &= 0xf8 ;
     dda:	a3 e5       	ldi	r26, 0x53	; 83
     ddc:	b0 e0       	ldi	r27, 0x00	; 0
     dde:	e3 e5       	ldi	r30, 0x53	; 83
     de0:	f0 e0       	ldi	r31, 0x00	; 0
     de2:	80 81       	ld	r24, Z
     de4:	88 7f       	andi	r24, 0xF8	; 248
     de6:	8c 93       	st	X, r24
	TCCR0 |= 5;
     de8:	a3 e5       	ldi	r26, 0x53	; 83
     dea:	b0 e0       	ldi	r27, 0x00	; 0
     dec:	e3 e5       	ldi	r30, 0x53	; 83
     dee:	f0 e0       	ldi	r31, 0x00	; 0
     df0:	80 81       	ld	r24, Z
     df2:	85 60       	ori	r24, 0x05	; 5
     df4:	8c 93       	st	X, r24
#endif

#if TIMER_MODE == OVF
	TCCR0 &= ~(1<<3);
     df6:	a3 e5       	ldi	r26, 0x53	; 83
     df8:	b0 e0       	ldi	r27, 0x00	; 0
     dfa:	e3 e5       	ldi	r30, 0x53	; 83
     dfc:	f0 e0       	ldi	r31, 0x00	; 0
     dfe:	80 81       	ld	r24, Z
     e00:	87 7f       	andi	r24, 0xF7	; 247
     e02:	8c 93       	st	X, r24
	TCCR0 &= ~(1<<6);
     e04:	a3 e5       	ldi	r26, 0x53	; 83
     e06:	b0 e0       	ldi	r27, 0x00	; 0
     e08:	e3 e5       	ldi	r30, 0x53	; 83
     e0a:	f0 e0       	ldi	r31, 0x00	; 0
     e0c:	80 81       	ld	r24, Z
     e0e:	8f 7b       	andi	r24, 0xBF	; 191
     e10:	8c 93       	st	X, r24
	TCCR0 |= (1<<3);
	TCCR0 |= (1<<6);
#endif

#if OC_MODE == DISCONNECTED
	TCCR0 &= ~(1<<4);
     e12:	a3 e5       	ldi	r26, 0x53	; 83
     e14:	b0 e0       	ldi	r27, 0x00	; 0
     e16:	e3 e5       	ldi	r30, 0x53	; 83
     e18:	f0 e0       	ldi	r31, 0x00	; 0
     e1a:	80 81       	ld	r24, Z
     e1c:	8f 7e       	andi	r24, 0xEF	; 239
     e1e:	8c 93       	st	X, r24
	TCCR0 &= ~(1<<5);
     e20:	a3 e5       	ldi	r26, 0x53	; 83
     e22:	b0 e0       	ldi	r27, 0x00	; 0
     e24:	e3 e5       	ldi	r30, 0x53	; 83
     e26:	f0 e0       	ldi	r31, 0x00	; 0
     e28:	80 81       	ld	r24, Z
     e2a:	8f 7d       	andi	r24, 0xDF	; 223
     e2c:	8c 93       	st	X, r24
#elif OC_MODE == NON_INVERTED
	TCCR0 |= (1<<5);
	TCCR0 &= ~(1<<4);
#endif

	  Local_enuErrorState = ES_OK;
     e2e:	81 e0       	ldi	r24, 0x01	; 1
     e30:	89 83       	std	Y+1, r24	; 0x01
		return Local_enuErrorState;
     e32:	89 81       	ldd	r24, Y+1	; 0x01
}
     e34:	0f 90       	pop	r0
     e36:	cf 91       	pop	r28
     e38:	df 91       	pop	r29
     e3a:	08 95       	ret

00000e3c <TIMER_enuSetPreload>:

ES_t TIMER_enuSetPreload(u8 Copy_u8Preload)
{
     e3c:	df 93       	push	r29
     e3e:	cf 93       	push	r28
     e40:	00 d0       	rcall	.+0      	; 0xe42 <TIMER_enuSetPreload+0x6>
     e42:	cd b7       	in	r28, 0x3d	; 61
     e44:	de b7       	in	r29, 0x3e	; 62
     e46:	8a 83       	std	Y+2, r24	; 0x02
	ES_t Local_enuErrorState = ES_NOK;
     e48:	19 82       	std	Y+1, r1	; 0x01
	TCNT0 =  Copy_u8Preload;
     e4a:	e2 e5       	ldi	r30, 0x52	; 82
     e4c:	f0 e0       	ldi	r31, 0x00	; 0
     e4e:	8a 81       	ldd	r24, Y+2	; 0x02
     e50:	80 83       	st	Z, r24

    Local_enuErrorState = ES_OK;
     e52:	81 e0       	ldi	r24, 0x01	; 1
     e54:	89 83       	std	Y+1, r24	; 0x01
	return Local_enuErrorState;
     e56:	89 81       	ldd	r24, Y+1	; 0x01
}
     e58:	0f 90       	pop	r0
     e5a:	0f 90       	pop	r0
     e5c:	cf 91       	pop	r28
     e5e:	df 91       	pop	r29
     e60:	08 95       	ret

00000e62 <TIMER_enuSetAsychDelay>:

ES_t TIMER_enuSetAsychDelay(u32 Copy_u8Time,void(*Copy_pfunApp)(void*) , void *parameter)
{
     e62:	df 93       	push	r29
     e64:	cf 93       	push	r28
     e66:	cd b7       	in	r28, 0x3d	; 61
     e68:	de b7       	in	r29, 0x3e	; 62
     e6a:	69 97       	sbiw	r28, 0x19	; 25
     e6c:	0f b6       	in	r0, 0x3f	; 63
     e6e:	f8 94       	cli
     e70:	de bf       	out	0x3e, r29	; 62
     e72:	0f be       	out	0x3f, r0	; 63
     e74:	cd bf       	out	0x3d, r28	; 61
     e76:	6a 8b       	std	Y+18, r22	; 0x12
     e78:	7b 8b       	std	Y+19, r23	; 0x13
     e7a:	8c 8b       	std	Y+20, r24	; 0x14
     e7c:	9d 8b       	std	Y+21, r25	; 0x15
     e7e:	5f 8b       	std	Y+23, r21	; 0x17
     e80:	4e 8b       	std	Y+22, r20	; 0x16
     e82:	39 8f       	std	Y+25, r19	; 0x19
     e84:	28 8f       	std	Y+24, r18	; 0x18
	ES_t Local_enuErrorState = ES_NOK;
     e86:	19 8a       	std	Y+17, r1	; 0x11

	f32  OVFTime = 256 *( (f32)TIMER_PRES / TIMER_F_CPU);
     e88:	8f e6       	ldi	r24, 0x6F	; 111
     e8a:	92 e1       	ldi	r25, 0x12	; 18
     e8c:	a3 e8       	ldi	r26, 0x83	; 131
     e8e:	b3 e4       	ldi	r27, 0x43	; 67
     e90:	8d 87       	std	Y+13, r24	; 0x0d
     e92:	9e 87       	std	Y+14, r25	; 0x0e
     e94:	af 87       	std	Y+15, r26	; 0x0f
     e96:	b8 8b       	std	Y+16, r27	; 0x10
	f32 NumOVF = (Copy_u8Time) / (OVFTime);
     e98:	6a 89       	ldd	r22, Y+18	; 0x12
     e9a:	7b 89       	ldd	r23, Y+19	; 0x13
     e9c:	8c 89       	ldd	r24, Y+20	; 0x14
     e9e:	9d 89       	ldd	r25, Y+21	; 0x15
     ea0:	0e 94 79 04 	call	0x8f2	; 0x8f2 <__floatunsisf>
     ea4:	dc 01       	movw	r26, r24
     ea6:	cb 01       	movw	r24, r22
     ea8:	bc 01       	movw	r22, r24
     eaa:	cd 01       	movw	r24, r26
     eac:	2d 85       	ldd	r18, Y+13	; 0x0d
     eae:	3e 85       	ldd	r19, Y+14	; 0x0e
     eb0:	4f 85       	ldd	r20, Y+15	; 0x0f
     eb2:	58 89       	ldd	r21, Y+16	; 0x10
     eb4:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
     eb8:	dc 01       	movw	r26, r24
     eba:	cb 01       	movw	r24, r22
     ebc:	89 87       	std	Y+9, r24	; 0x09
     ebe:	9a 87       	std	Y+10, r25	; 0x0a
     ec0:	ab 87       	std	Y+11, r26	; 0x0b
     ec2:	bc 87       	std	Y+12, r27	; 0x0c

	if( (NumOVF-(u32)NumOVF) != 0.0 )
     ec4:	69 85       	ldd	r22, Y+9	; 0x09
     ec6:	7a 85       	ldd	r23, Y+10	; 0x0a
     ec8:	8b 85       	ldd	r24, Y+11	; 0x0b
     eca:	9c 85       	ldd	r25, Y+12	; 0x0c
     ecc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     ed0:	dc 01       	movw	r26, r24
     ed2:	cb 01       	movw	r24, r22
     ed4:	bc 01       	movw	r22, r24
     ed6:	cd 01       	movw	r24, r26
     ed8:	0e 94 79 04 	call	0x8f2	; 0x8f2 <__floatunsisf>
     edc:	9b 01       	movw	r18, r22
     ede:	ac 01       	movw	r20, r24
     ee0:	69 85       	ldd	r22, Y+9	; 0x09
     ee2:	7a 85       	ldd	r23, Y+10	; 0x0a
     ee4:	8b 85       	ldd	r24, Y+11	; 0x0b
     ee6:	9c 85       	ldd	r25, Y+12	; 0x0c
     ee8:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
     eec:	dc 01       	movw	r26, r24
     eee:	cb 01       	movw	r24, r22
     ef0:	bc 01       	movw	r22, r24
     ef2:	cd 01       	movw	r24, r26
     ef4:	20 e0       	ldi	r18, 0x00	; 0
     ef6:	30 e0       	ldi	r19, 0x00	; 0
     ef8:	40 e0       	ldi	r20, 0x00	; 0
     efa:	50 e0       	ldi	r21, 0x00	; 0
     efc:	0e 94 c5 03 	call	0x78a	; 0x78a <__nesf2>
     f00:	88 23       	and	r24, r24
     f02:	09 f4       	brne	.+2      	; 0xf06 <TIMER_enuSetAsychDelay+0xa4>
     f04:	66 c0       	rjmp	.+204    	; 0xfd2 <TIMER_enuSetAsychDelay+0x170>
	{
		u32 NumOVF_int = (u32)NumOVF+1;
     f06:	69 85       	ldd	r22, Y+9	; 0x09
     f08:	7a 85       	ldd	r23, Y+10	; 0x0a
     f0a:	8b 85       	ldd	r24, Y+11	; 0x0b
     f0c:	9c 85       	ldd	r25, Y+12	; 0x0c
     f0e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     f12:	dc 01       	movw	r26, r24
     f14:	cb 01       	movw	r24, r22
     f16:	01 96       	adiw	r24, 0x01	; 1
     f18:	a1 1d       	adc	r26, r1
     f1a:	b1 1d       	adc	r27, r1
     f1c:	8d 83       	std	Y+5, r24	; 0x05
     f1e:	9e 83       	std	Y+6, r25	; 0x06
     f20:	af 83       	std	Y+7, r26	; 0x07
     f22:	b8 87       	std	Y+8, r27	; 0x08
		NumOVF = NumOVF - (u32)NumOVF;
     f24:	69 85       	ldd	r22, Y+9	; 0x09
     f26:	7a 85       	ldd	r23, Y+10	; 0x0a
     f28:	8b 85       	ldd	r24, Y+11	; 0x0b
     f2a:	9c 85       	ldd	r25, Y+12	; 0x0c
     f2c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     f30:	dc 01       	movw	r26, r24
     f32:	cb 01       	movw	r24, r22
     f34:	bc 01       	movw	r22, r24
     f36:	cd 01       	movw	r24, r26
     f38:	0e 94 79 04 	call	0x8f2	; 0x8f2 <__floatunsisf>
     f3c:	9b 01       	movw	r18, r22
     f3e:	ac 01       	movw	r20, r24
     f40:	69 85       	ldd	r22, Y+9	; 0x09
     f42:	7a 85       	ldd	r23, Y+10	; 0x0a
     f44:	8b 85       	ldd	r24, Y+11	; 0x0b
     f46:	9c 85       	ldd	r25, Y+12	; 0x0c
     f48:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
     f4c:	dc 01       	movw	r26, r24
     f4e:	cb 01       	movw	r24, r22
     f50:	89 87       	std	Y+9, r24	; 0x09
     f52:	9a 87       	std	Y+10, r25	; 0x0a
     f54:	ab 87       	std	Y+11, r26	; 0x0b
     f56:	bc 87       	std	Y+12, r27	; 0x0c
		u32 preload = 256 - (NumOVF * 256);
     f58:	69 85       	ldd	r22, Y+9	; 0x09
     f5a:	7a 85       	ldd	r23, Y+10	; 0x0a
     f5c:	8b 85       	ldd	r24, Y+11	; 0x0b
     f5e:	9c 85       	ldd	r25, Y+12	; 0x0c
     f60:	20 e0       	ldi	r18, 0x00	; 0
     f62:	30 e0       	ldi	r19, 0x00	; 0
     f64:	40 e8       	ldi	r20, 0x80	; 128
     f66:	53 ec       	ldi	r21, 0xC3	; 195
     f68:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     f6c:	dc 01       	movw	r26, r24
     f6e:	cb 01       	movw	r24, r22
     f70:	bc 01       	movw	r22, r24
     f72:	cd 01       	movw	r24, r26
     f74:	20 e0       	ldi	r18, 0x00	; 0
     f76:	30 e0       	ldi	r19, 0x00	; 0
     f78:	40 e8       	ldi	r20, 0x80	; 128
     f7a:	53 e4       	ldi	r21, 0x43	; 67
     f7c:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <__addsf3>
     f80:	dc 01       	movw	r26, r24
     f82:	cb 01       	movw	r24, r22
     f84:	bc 01       	movw	r22, r24
     f86:	cd 01       	movw	r24, r26
     f88:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     f8c:	dc 01       	movw	r26, r24
     f8e:	cb 01       	movw	r24, r22
     f90:	89 83       	std	Y+1, r24	; 0x01
     f92:	9a 83       	std	Y+2, r25	; 0x02
     f94:	ab 83       	std	Y+3, r26	; 0x03
     f96:	bc 83       	std	Y+4, r27	; 0x04
		Global_NumOVF = NumOVF_int;
     f98:	8d 81       	ldd	r24, Y+5	; 0x05
     f9a:	9e 81       	ldd	r25, Y+6	; 0x06
     f9c:	af 81       	ldd	r26, Y+7	; 0x07
     f9e:	b8 85       	ldd	r27, Y+8	; 0x08
     fa0:	80 93 76 01 	sts	0x0176, r24
     fa4:	90 93 77 01 	sts	0x0177, r25
     fa8:	a0 93 78 01 	sts	0x0178, r26
     fac:	b0 93 79 01 	sts	0x0179, r27
		Global_Preload =preload;
     fb0:	89 81       	ldd	r24, Y+1	; 0x01
     fb2:	9a 81       	ldd	r25, Y+2	; 0x02
     fb4:	ab 81       	ldd	r26, Y+3	; 0x03
     fb6:	bc 81       	ldd	r27, Y+4	; 0x04
     fb8:	80 93 72 01 	sts	0x0172, r24
     fbc:	90 93 73 01 	sts	0x0173, r25
     fc0:	a0 93 74 01 	sts	0x0174, r26
     fc4:	b0 93 75 01 	sts	0x0175, r27
		TCNT0 = preload;
     fc8:	e2 e5       	ldi	r30, 0x52	; 82
     fca:	f0 e0       	ldi	r31, 0x00	; 0
     fcc:	89 81       	ldd	r24, Y+1	; 0x01
     fce:	80 83       	st	Z, r24
     fd0:	10 c0       	rjmp	.+32     	; 0xff2 <TIMER_enuSetAsychDelay+0x190>
	}
	else
	{
		Global_NumOVF =(u32)NumOVF;
     fd2:	69 85       	ldd	r22, Y+9	; 0x09
     fd4:	7a 85       	ldd	r23, Y+10	; 0x0a
     fd6:	8b 85       	ldd	r24, Y+11	; 0x0b
     fd8:	9c 85       	ldd	r25, Y+12	; 0x0c
     fda:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     fde:	dc 01       	movw	r26, r24
     fe0:	cb 01       	movw	r24, r22
     fe2:	80 93 76 01 	sts	0x0176, r24
     fe6:	90 93 77 01 	sts	0x0177, r25
     fea:	a0 93 78 01 	sts	0x0178, r26
     fee:	b0 93 79 01 	sts	0x0179, r27
	}

	if(Copy_pfunApp != NULL)
     ff2:	8e 89       	ldd	r24, Y+22	; 0x16
     ff4:	9f 89       	ldd	r25, Y+23	; 0x17
     ff6:	00 97       	sbiw	r24, 0x00	; 0
     ff8:	71 f0       	breq	.+28     	; 0x1016 <TIMER_enuSetAsychDelay+0x1b4>
	{
		Global_Ptr = Copy_pfunApp;
     ffa:	8e 89       	ldd	r24, Y+22	; 0x16
     ffc:	9f 89       	ldd	r25, Y+23	; 0x17
     ffe:	90 93 6b 01 	sts	0x016B, r25
    1002:	80 93 6a 01 	sts	0x016A, r24
		Global_Para = parameter;
    1006:	88 8d       	ldd	r24, Y+24	; 0x18
    1008:	99 8d       	ldd	r25, Y+25	; 0x19
    100a:	90 93 6d 01 	sts	0x016D, r25
    100e:	80 93 6c 01 	sts	0x016C, r24
		Local_enuErrorState = ES_OK;
    1012:	81 e0       	ldi	r24, 0x01	; 1
    1014:	89 8b       	std	Y+17, r24	; 0x11
	}

	TIMSK |= (1<<0);
    1016:	a9 e5       	ldi	r26, 0x59	; 89
    1018:	b0 e0       	ldi	r27, 0x00	; 0
    101a:	e9 e5       	ldi	r30, 0x59	; 89
    101c:	f0 e0       	ldi	r31, 0x00	; 0
    101e:	80 81       	ld	r24, Z
    1020:	81 60       	ori	r24, 0x01	; 1
    1022:	8c 93       	st	X, r24


		return Local_enuErrorState;
    1024:	89 89       	ldd	r24, Y+17	; 0x11
}
    1026:	69 96       	adiw	r28, 0x19	; 25
    1028:	0f b6       	in	r0, 0x3f	; 63
    102a:	f8 94       	cli
    102c:	de bf       	out	0x3e, r29	; 62
    102e:	0f be       	out	0x3f, r0	; 63
    1030:	cd bf       	out	0x3d, r28	; 61
    1032:	cf 91       	pop	r28
    1034:	df 91       	pop	r29
    1036:	08 95       	ret

00001038 <TIMER_enuSetSychDelay>:

ES_t TIMER_enuSetSychDelay(u32 Copy_u8Time)
{
    1038:	df 93       	push	r29
    103a:	cf 93       	push	r28
    103c:	cd b7       	in	r28, 0x3d	; 61
    103e:	de b7       	in	r29, 0x3e	; 62
    1040:	69 97       	sbiw	r28, 0x19	; 25
    1042:	0f b6       	in	r0, 0x3f	; 63
    1044:	f8 94       	cli
    1046:	de bf       	out	0x3e, r29	; 62
    1048:	0f be       	out	0x3f, r0	; 63
    104a:	cd bf       	out	0x3d, r28	; 61
    104c:	6e 8b       	std	Y+22, r22	; 0x16
    104e:	7f 8b       	std	Y+23, r23	; 0x17
    1050:	88 8f       	std	Y+24, r24	; 0x18
    1052:	99 8f       	std	Y+25, r25	; 0x19
	ES_t Local_enuErrorState = ES_NOK;
    1054:	1d 8a       	std	Y+21, r1	; 0x15

	TIMSK &= ~(1<<0);
    1056:	a9 e5       	ldi	r26, 0x59	; 89
    1058:	b0 e0       	ldi	r27, 0x00	; 0
    105a:	e9 e5       	ldi	r30, 0x59	; 89
    105c:	f0 e0       	ldi	r31, 0x00	; 0
    105e:	80 81       	ld	r24, Z
    1060:	8e 7f       	andi	r24, 0xFE	; 254
    1062:	8c 93       	st	X, r24

	f32  OVFTime = 256 *( (f32)TIMER_PRES / TIMER_F_CPU);
    1064:	8f e6       	ldi	r24, 0x6F	; 111
    1066:	92 e1       	ldi	r25, 0x12	; 18
    1068:	a3 e8       	ldi	r26, 0x83	; 131
    106a:	b3 e4       	ldi	r27, 0x43	; 67
    106c:	89 8b       	std	Y+17, r24	; 0x11
    106e:	9a 8b       	std	Y+18, r25	; 0x12
    1070:	ab 8b       	std	Y+19, r26	; 0x13
    1072:	bc 8b       	std	Y+20, r27	; 0x14
	f32 NumOVF = (Copy_u8Time) / (OVFTime);
    1074:	6e 89       	ldd	r22, Y+22	; 0x16
    1076:	7f 89       	ldd	r23, Y+23	; 0x17
    1078:	88 8d       	ldd	r24, Y+24	; 0x18
    107a:	99 8d       	ldd	r25, Y+25	; 0x19
    107c:	0e 94 79 04 	call	0x8f2	; 0x8f2 <__floatunsisf>
    1080:	dc 01       	movw	r26, r24
    1082:	cb 01       	movw	r24, r22
    1084:	bc 01       	movw	r22, r24
    1086:	cd 01       	movw	r24, r26
    1088:	29 89       	ldd	r18, Y+17	; 0x11
    108a:	3a 89       	ldd	r19, Y+18	; 0x12
    108c:	4b 89       	ldd	r20, Y+19	; 0x13
    108e:	5c 89       	ldd	r21, Y+20	; 0x14
    1090:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    1094:	dc 01       	movw	r26, r24
    1096:	cb 01       	movw	r24, r22
    1098:	8d 87       	std	Y+13, r24	; 0x0d
    109a:	9e 87       	std	Y+14, r25	; 0x0e
    109c:	af 87       	std	Y+15, r26	; 0x0f
    109e:	b8 8b       	std	Y+16, r27	; 0x10

		if( (NumOVF-(u32)NumOVF) != 0.0 )
    10a0:	6d 85       	ldd	r22, Y+13	; 0x0d
    10a2:	7e 85       	ldd	r23, Y+14	; 0x0e
    10a4:	8f 85       	ldd	r24, Y+15	; 0x0f
    10a6:	98 89       	ldd	r25, Y+16	; 0x10
    10a8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    10ac:	dc 01       	movw	r26, r24
    10ae:	cb 01       	movw	r24, r22
    10b0:	bc 01       	movw	r22, r24
    10b2:	cd 01       	movw	r24, r26
    10b4:	0e 94 79 04 	call	0x8f2	; 0x8f2 <__floatunsisf>
    10b8:	9b 01       	movw	r18, r22
    10ba:	ac 01       	movw	r20, r24
    10bc:	6d 85       	ldd	r22, Y+13	; 0x0d
    10be:	7e 85       	ldd	r23, Y+14	; 0x0e
    10c0:	8f 85       	ldd	r24, Y+15	; 0x0f
    10c2:	98 89       	ldd	r25, Y+16	; 0x10
    10c4:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
    10c8:	dc 01       	movw	r26, r24
    10ca:	cb 01       	movw	r24, r22
    10cc:	bc 01       	movw	r22, r24
    10ce:	cd 01       	movw	r24, r26
    10d0:	20 e0       	ldi	r18, 0x00	; 0
    10d2:	30 e0       	ldi	r19, 0x00	; 0
    10d4:	40 e0       	ldi	r20, 0x00	; 0
    10d6:	50 e0       	ldi	r21, 0x00	; 0
    10d8:	0e 94 c5 03 	call	0x78a	; 0x78a <__nesf2>
    10dc:	88 23       	and	r24, r24
    10de:	09 f4       	brne	.+2      	; 0x10e2 <TIMER_enuSetSychDelay+0xaa>
    10e0:	72 c0       	rjmp	.+228    	; 0x11c6 <TIMER_enuSetSychDelay+0x18e>
		{
			u32 NumOVF_int = (u32)NumOVF+1;
    10e2:	6d 85       	ldd	r22, Y+13	; 0x0d
    10e4:	7e 85       	ldd	r23, Y+14	; 0x0e
    10e6:	8f 85       	ldd	r24, Y+15	; 0x0f
    10e8:	98 89       	ldd	r25, Y+16	; 0x10
    10ea:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    10ee:	dc 01       	movw	r26, r24
    10f0:	cb 01       	movw	r24, r22
    10f2:	01 96       	adiw	r24, 0x01	; 1
    10f4:	a1 1d       	adc	r26, r1
    10f6:	b1 1d       	adc	r27, r1
    10f8:	89 87       	std	Y+9, r24	; 0x09
    10fa:	9a 87       	std	Y+10, r25	; 0x0a
    10fc:	ab 87       	std	Y+11, r26	; 0x0b
    10fe:	bc 87       	std	Y+12, r27	; 0x0c
			NumOVF = NumOVF - (u32)NumOVF;
    1100:	6d 85       	ldd	r22, Y+13	; 0x0d
    1102:	7e 85       	ldd	r23, Y+14	; 0x0e
    1104:	8f 85       	ldd	r24, Y+15	; 0x0f
    1106:	98 89       	ldd	r25, Y+16	; 0x10
    1108:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    110c:	dc 01       	movw	r26, r24
    110e:	cb 01       	movw	r24, r22
    1110:	bc 01       	movw	r22, r24
    1112:	cd 01       	movw	r24, r26
    1114:	0e 94 79 04 	call	0x8f2	; 0x8f2 <__floatunsisf>
    1118:	9b 01       	movw	r18, r22
    111a:	ac 01       	movw	r20, r24
    111c:	6d 85       	ldd	r22, Y+13	; 0x0d
    111e:	7e 85       	ldd	r23, Y+14	; 0x0e
    1120:	8f 85       	ldd	r24, Y+15	; 0x0f
    1122:	98 89       	ldd	r25, Y+16	; 0x10
    1124:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
    1128:	dc 01       	movw	r26, r24
    112a:	cb 01       	movw	r24, r22
    112c:	8d 87       	std	Y+13, r24	; 0x0d
    112e:	9e 87       	std	Y+14, r25	; 0x0e
    1130:	af 87       	std	Y+15, r26	; 0x0f
    1132:	b8 8b       	std	Y+16, r27	; 0x10
			u32 preload = 256 - (NumOVF * 256);
    1134:	6d 85       	ldd	r22, Y+13	; 0x0d
    1136:	7e 85       	ldd	r23, Y+14	; 0x0e
    1138:	8f 85       	ldd	r24, Y+15	; 0x0f
    113a:	98 89       	ldd	r25, Y+16	; 0x10
    113c:	20 e0       	ldi	r18, 0x00	; 0
    113e:	30 e0       	ldi	r19, 0x00	; 0
    1140:	40 e8       	ldi	r20, 0x80	; 128
    1142:	53 ec       	ldi	r21, 0xC3	; 195
    1144:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1148:	dc 01       	movw	r26, r24
    114a:	cb 01       	movw	r24, r22
    114c:	bc 01       	movw	r22, r24
    114e:	cd 01       	movw	r24, r26
    1150:	20 e0       	ldi	r18, 0x00	; 0
    1152:	30 e0       	ldi	r19, 0x00	; 0
    1154:	40 e8       	ldi	r20, 0x80	; 128
    1156:	53 e4       	ldi	r21, 0x43	; 67
    1158:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <__addsf3>
    115c:	dc 01       	movw	r26, r24
    115e:	cb 01       	movw	r24, r22
    1160:	bc 01       	movw	r22, r24
    1162:	cd 01       	movw	r24, r26
    1164:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1168:	dc 01       	movw	r26, r24
    116a:	cb 01       	movw	r24, r22
    116c:	8d 83       	std	Y+5, r24	; 0x05
    116e:	9e 83       	std	Y+6, r25	; 0x06
    1170:	af 83       	std	Y+7, r26	; 0x07
    1172:	b8 87       	std	Y+8, r27	; 0x08
			TCNT0 = preload;
    1174:	e2 e5       	ldi	r30, 0x52	; 82
    1176:	f0 e0       	ldi	r31, 0x00	; 0
    1178:	8d 81       	ldd	r24, Y+5	; 0x05
    117a:	80 83       	st	Z, r24
    117c:	1b c0       	rjmp	.+54     	; 0x11b4 <TIMER_enuSetSychDelay+0x17c>
			while( NumOVF_int >0)
			{
				while ( ( (TIFR>>0) & 1 ) == 0 );
    117e:	e8 e5       	ldi	r30, 0x58	; 88
    1180:	f0 e0       	ldi	r31, 0x00	; 0
    1182:	80 81       	ld	r24, Z
    1184:	88 2f       	mov	r24, r24
    1186:	90 e0       	ldi	r25, 0x00	; 0
    1188:	81 70       	andi	r24, 0x01	; 1
    118a:	90 70       	andi	r25, 0x00	; 0
    118c:	00 97       	sbiw	r24, 0x00	; 0
    118e:	b9 f3       	breq	.-18     	; 0x117e <TIMER_enuSetSychDelay+0x146>
				TIFR |= (1<<0);
    1190:	a8 e5       	ldi	r26, 0x58	; 88
    1192:	b0 e0       	ldi	r27, 0x00	; 0
    1194:	e8 e5       	ldi	r30, 0x58	; 88
    1196:	f0 e0       	ldi	r31, 0x00	; 0
    1198:	80 81       	ld	r24, Z
    119a:	81 60       	ori	r24, 0x01	; 1
    119c:	8c 93       	st	X, r24
				NumOVF_int--;
    119e:	89 85       	ldd	r24, Y+9	; 0x09
    11a0:	9a 85       	ldd	r25, Y+10	; 0x0a
    11a2:	ab 85       	ldd	r26, Y+11	; 0x0b
    11a4:	bc 85       	ldd	r27, Y+12	; 0x0c
    11a6:	01 97       	sbiw	r24, 0x01	; 1
    11a8:	a1 09       	sbc	r26, r1
    11aa:	b1 09       	sbc	r27, r1
    11ac:	89 87       	std	Y+9, r24	; 0x09
    11ae:	9a 87       	std	Y+10, r25	; 0x0a
    11b0:	ab 87       	std	Y+11, r26	; 0x0b
    11b2:	bc 87       	std	Y+12, r27	; 0x0c
		{
			u32 NumOVF_int = (u32)NumOVF+1;
			NumOVF = NumOVF - (u32)NumOVF;
			u32 preload = 256 - (NumOVF * 256);
			TCNT0 = preload;
			while( NumOVF_int >0)
    11b4:	89 85       	ldd	r24, Y+9	; 0x09
    11b6:	9a 85       	ldd	r25, Y+10	; 0x0a
    11b8:	ab 85       	ldd	r26, Y+11	; 0x0b
    11ba:	bc 85       	ldd	r27, Y+12	; 0x0c
    11bc:	00 97       	sbiw	r24, 0x00	; 0
    11be:	a1 05       	cpc	r26, r1
    11c0:	b1 05       	cpc	r27, r1
    11c2:	e9 f6       	brne	.-70     	; 0x117e <TIMER_enuSetSychDelay+0x146>
    11c4:	30 c0       	rjmp	.+96     	; 0x1226 <TIMER_enuSetSychDelay+0x1ee>
				NumOVF_int--;
			}
		}
		else
		{
			u32 NumOVF_int = (u32)NumOVF;
    11c6:	6d 85       	ldd	r22, Y+13	; 0x0d
    11c8:	7e 85       	ldd	r23, Y+14	; 0x0e
    11ca:	8f 85       	ldd	r24, Y+15	; 0x0f
    11cc:	98 89       	ldd	r25, Y+16	; 0x10
    11ce:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    11d2:	dc 01       	movw	r26, r24
    11d4:	cb 01       	movw	r24, r22
    11d6:	89 83       	std	Y+1, r24	; 0x01
    11d8:	9a 83       	std	Y+2, r25	; 0x02
    11da:	ab 83       	std	Y+3, r26	; 0x03
    11dc:	bc 83       	std	Y+4, r27	; 0x04
    11de:	1b c0       	rjmp	.+54     	; 0x1216 <TIMER_enuSetSychDelay+0x1de>
			while( NumOVF_int > 0)
				{
					while ( ( (TIFR>>0) & 1 ) == 0 );
    11e0:	e8 e5       	ldi	r30, 0x58	; 88
    11e2:	f0 e0       	ldi	r31, 0x00	; 0
    11e4:	80 81       	ld	r24, Z
    11e6:	88 2f       	mov	r24, r24
    11e8:	90 e0       	ldi	r25, 0x00	; 0
    11ea:	81 70       	andi	r24, 0x01	; 1
    11ec:	90 70       	andi	r25, 0x00	; 0
    11ee:	00 97       	sbiw	r24, 0x00	; 0
    11f0:	b9 f3       	breq	.-18     	; 0x11e0 <TIMER_enuSetSychDelay+0x1a8>
					TIFR |= (1<<0);
    11f2:	a8 e5       	ldi	r26, 0x58	; 88
    11f4:	b0 e0       	ldi	r27, 0x00	; 0
    11f6:	e8 e5       	ldi	r30, 0x58	; 88
    11f8:	f0 e0       	ldi	r31, 0x00	; 0
    11fa:	80 81       	ld	r24, Z
    11fc:	81 60       	ori	r24, 0x01	; 1
    11fe:	8c 93       	st	X, r24
					NumOVF_int--;
    1200:	89 81       	ldd	r24, Y+1	; 0x01
    1202:	9a 81       	ldd	r25, Y+2	; 0x02
    1204:	ab 81       	ldd	r26, Y+3	; 0x03
    1206:	bc 81       	ldd	r27, Y+4	; 0x04
    1208:	01 97       	sbiw	r24, 0x01	; 1
    120a:	a1 09       	sbc	r26, r1
    120c:	b1 09       	sbc	r27, r1
    120e:	89 83       	std	Y+1, r24	; 0x01
    1210:	9a 83       	std	Y+2, r25	; 0x02
    1212:	ab 83       	std	Y+3, r26	; 0x03
    1214:	bc 83       	std	Y+4, r27	; 0x04
			}
		}
		else
		{
			u32 NumOVF_int = (u32)NumOVF;
			while( NumOVF_int > 0)
    1216:	89 81       	ldd	r24, Y+1	; 0x01
    1218:	9a 81       	ldd	r25, Y+2	; 0x02
    121a:	ab 81       	ldd	r26, Y+3	; 0x03
    121c:	bc 81       	ldd	r27, Y+4	; 0x04
    121e:	00 97       	sbiw	r24, 0x00	; 0
    1220:	a1 05       	cpc	r26, r1
    1222:	b1 05       	cpc	r27, r1
    1224:	e9 f6       	brne	.-70     	; 0x11e0 <TIMER_enuSetSychDelay+0x1a8>
					while ( ( (TIFR>>0) & 1 ) == 0 );
					TIFR |= (1<<0);
					NumOVF_int--;
				}
		}
		 Local_enuErrorState = ES_OK;
    1226:	81 e0       	ldi	r24, 0x01	; 1
    1228:	8d 8b       	std	Y+21, r24	; 0x15
		return Local_enuErrorState;
    122a:	8d 89       	ldd	r24, Y+21	; 0x15
}
    122c:	69 96       	adiw	r28, 0x19	; 25
    122e:	0f b6       	in	r0, 0x3f	; 63
    1230:	f8 94       	cli
    1232:	de bf       	out	0x3e, r29	; 62
    1234:	0f be       	out	0x3f, r0	; 63
    1236:	cd bf       	out	0x3d, r28	; 61
    1238:	cf 91       	pop	r28
    123a:	df 91       	pop	r29
    123c:	08 95       	ret

0000123e <TIMERCTC_enuSetAsychDelay>:


ES_t TIMERCTC_enuSetAsychDelay(u32 Copy_u8Time , void(*Copy_pfunApp)(void*) , void * parameter)
{
    123e:	0f 93       	push	r16
    1240:	1f 93       	push	r17
    1242:	df 93       	push	r29
    1244:	cf 93       	push	r28
    1246:	cd b7       	in	r28, 0x3d	; 61
    1248:	de b7       	in	r29, 0x3e	; 62
    124a:	2d 97       	sbiw	r28, 0x0d	; 13
    124c:	0f b6       	in	r0, 0x3f	; 63
    124e:	f8 94       	cli
    1250:	de bf       	out	0x3e, r29	; 62
    1252:	0f be       	out	0x3f, r0	; 63
    1254:	cd bf       	out	0x3d, r28	; 61
    1256:	6e 83       	std	Y+6, r22	; 0x06
    1258:	7f 83       	std	Y+7, r23	; 0x07
    125a:	88 87       	std	Y+8, r24	; 0x08
    125c:	99 87       	std	Y+9, r25	; 0x09
    125e:	5b 87       	std	Y+11, r21	; 0x0b
    1260:	4a 87       	std	Y+10, r20	; 0x0a
    1262:	3d 87       	std	Y+13, r19	; 0x0d
    1264:	2c 87       	std	Y+12, r18	; 0x0c
	ES_t Local_enuErrorState = ES_NOK;
    1266:	1d 82       	std	Y+5, r1	; 0x05

	f32  OVFTime = 256 *( (f32)TIMER_PRES / TIMER_F_CPU);
    1268:	8f e6       	ldi	r24, 0x6F	; 111
    126a:	92 e1       	ldi	r25, 0x12	; 18
    126c:	a3 e8       	ldi	r26, 0x83	; 131
    126e:	b3 e4       	ldi	r27, 0x43	; 67
    1270:	89 83       	std	Y+1, r24	; 0x01
    1272:	9a 83       	std	Y+2, r25	; 0x02
    1274:	ab 83       	std	Y+3, r26	; 0x03
    1276:	bc 83       	std	Y+4, r27	; 0x04

	OCR0 = 256 * (Copy_u8Time) / (OVFTime);
    1278:	0c e5       	ldi	r16, 0x5C	; 92
    127a:	10 e0       	ldi	r17, 0x00	; 0
    127c:	8e 81       	ldd	r24, Y+6	; 0x06
    127e:	9f 81       	ldd	r25, Y+7	; 0x07
    1280:	a8 85       	ldd	r26, Y+8	; 0x08
    1282:	b9 85       	ldd	r27, Y+9	; 0x09
    1284:	ba 2f       	mov	r27, r26
    1286:	a9 2f       	mov	r26, r25
    1288:	98 2f       	mov	r25, r24
    128a:	88 27       	eor	r24, r24
    128c:	bc 01       	movw	r22, r24
    128e:	cd 01       	movw	r24, r26
    1290:	0e 94 79 04 	call	0x8f2	; 0x8f2 <__floatunsisf>
    1294:	dc 01       	movw	r26, r24
    1296:	cb 01       	movw	r24, r22
    1298:	bc 01       	movw	r22, r24
    129a:	cd 01       	movw	r24, r26
    129c:	29 81       	ldd	r18, Y+1	; 0x01
    129e:	3a 81       	ldd	r19, Y+2	; 0x02
    12a0:	4b 81       	ldd	r20, Y+3	; 0x03
    12a2:	5c 81       	ldd	r21, Y+4	; 0x04
    12a4:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    12a8:	dc 01       	movw	r26, r24
    12aa:	cb 01       	movw	r24, r22
    12ac:	bc 01       	movw	r22, r24
    12ae:	cd 01       	movw	r24, r26
    12b0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    12b4:	dc 01       	movw	r26, r24
    12b6:	cb 01       	movw	r24, r22
    12b8:	f8 01       	movw	r30, r16
    12ba:	80 83       	st	Z, r24

	if(Copy_pfunApp != NULL)
    12bc:	8a 85       	ldd	r24, Y+10	; 0x0a
    12be:	9b 85       	ldd	r25, Y+11	; 0x0b
    12c0:	00 97       	sbiw	r24, 0x00	; 0
    12c2:	71 f0       	breq	.+28     	; 0x12e0 <TIMERCTC_enuSetAsychDelay+0xa2>
		{
			Global_Ptr = Copy_pfunApp;
    12c4:	8a 85       	ldd	r24, Y+10	; 0x0a
    12c6:	9b 85       	ldd	r25, Y+11	; 0x0b
    12c8:	90 93 6b 01 	sts	0x016B, r25
    12cc:	80 93 6a 01 	sts	0x016A, r24
			Global_Para = parameter;
    12d0:	8c 85       	ldd	r24, Y+12	; 0x0c
    12d2:	9d 85       	ldd	r25, Y+13	; 0x0d
    12d4:	90 93 6d 01 	sts	0x016D, r25
    12d8:	80 93 6c 01 	sts	0x016C, r24
			Local_enuErrorState = ES_OK;
    12dc:	81 e0       	ldi	r24, 0x01	; 1
    12de:	8d 83       	std	Y+5, r24	; 0x05
		}

		TIMSK |= (1<<0);
    12e0:	a9 e5       	ldi	r26, 0x59	; 89
    12e2:	b0 e0       	ldi	r27, 0x00	; 0
    12e4:	e9 e5       	ldi	r30, 0x59	; 89
    12e6:	f0 e0       	ldi	r31, 0x00	; 0
    12e8:	80 81       	ld	r24, Z
    12ea:	81 60       	ori	r24, 0x01	; 1
    12ec:	8c 93       	st	X, r24


	 Local_enuErrorState = ES_OK;
    12ee:	81 e0       	ldi	r24, 0x01	; 1
    12f0:	8d 83       	std	Y+5, r24	; 0x05
	return Local_enuErrorState;
    12f2:	8d 81       	ldd	r24, Y+5	; 0x05
}
    12f4:	2d 96       	adiw	r28, 0x0d	; 13
    12f6:	0f b6       	in	r0, 0x3f	; 63
    12f8:	f8 94       	cli
    12fa:	de bf       	out	0x3e, r29	; 62
    12fc:	0f be       	out	0x3f, r0	; 63
    12fe:	cd bf       	out	0x3d, r28	; 61
    1300:	cf 91       	pop	r28
    1302:	df 91       	pop	r29
    1304:	1f 91       	pop	r17
    1306:	0f 91       	pop	r16
    1308:	08 95       	ret

0000130a <TIMERCTC_enuSetSychDelay>:

ES_t TIMERCTC_enuSetSychDelay(u32 Copy_u8Time)
{
    130a:	0f 93       	push	r16
    130c:	1f 93       	push	r17
    130e:	df 93       	push	r29
    1310:	cf 93       	push	r28
    1312:	cd b7       	in	r28, 0x3d	; 61
    1314:	de b7       	in	r29, 0x3e	; 62
    1316:	29 97       	sbiw	r28, 0x09	; 9
    1318:	0f b6       	in	r0, 0x3f	; 63
    131a:	f8 94       	cli
    131c:	de bf       	out	0x3e, r29	; 62
    131e:	0f be       	out	0x3f, r0	; 63
    1320:	cd bf       	out	0x3d, r28	; 61
    1322:	6e 83       	std	Y+6, r22	; 0x06
    1324:	7f 83       	std	Y+7, r23	; 0x07
    1326:	88 87       	std	Y+8, r24	; 0x08
    1328:	99 87       	std	Y+9, r25	; 0x09
	ES_t Local_enuErrorState = ES_NOK;
    132a:	1d 82       	std	Y+5, r1	; 0x05

	TIMSK &= ~(1<<0);
    132c:	a9 e5       	ldi	r26, 0x59	; 89
    132e:	b0 e0       	ldi	r27, 0x00	; 0
    1330:	e9 e5       	ldi	r30, 0x59	; 89
    1332:	f0 e0       	ldi	r31, 0x00	; 0
    1334:	80 81       	ld	r24, Z
    1336:	8e 7f       	andi	r24, 0xFE	; 254
    1338:	8c 93       	st	X, r24

	f32  OVFTime = 256 *( (f32)TIMER_PRES / TIMER_F_CPU);
    133a:	8f e6       	ldi	r24, 0x6F	; 111
    133c:	92 e1       	ldi	r25, 0x12	; 18
    133e:	a3 e8       	ldi	r26, 0x83	; 131
    1340:	b3 e4       	ldi	r27, 0x43	; 67
    1342:	89 83       	std	Y+1, r24	; 0x01
    1344:	9a 83       	std	Y+2, r25	; 0x02
    1346:	ab 83       	std	Y+3, r26	; 0x03
    1348:	bc 83       	std	Y+4, r27	; 0x04

	OCR0 = 256 * (Copy_u8Time) / (OVFTime);
    134a:	0c e5       	ldi	r16, 0x5C	; 92
    134c:	10 e0       	ldi	r17, 0x00	; 0
    134e:	8e 81       	ldd	r24, Y+6	; 0x06
    1350:	9f 81       	ldd	r25, Y+7	; 0x07
    1352:	a8 85       	ldd	r26, Y+8	; 0x08
    1354:	b9 85       	ldd	r27, Y+9	; 0x09
    1356:	ba 2f       	mov	r27, r26
    1358:	a9 2f       	mov	r26, r25
    135a:	98 2f       	mov	r25, r24
    135c:	88 27       	eor	r24, r24
    135e:	bc 01       	movw	r22, r24
    1360:	cd 01       	movw	r24, r26
    1362:	0e 94 79 04 	call	0x8f2	; 0x8f2 <__floatunsisf>
    1366:	dc 01       	movw	r26, r24
    1368:	cb 01       	movw	r24, r22
    136a:	bc 01       	movw	r22, r24
    136c:	cd 01       	movw	r24, r26
    136e:	29 81       	ldd	r18, Y+1	; 0x01
    1370:	3a 81       	ldd	r19, Y+2	; 0x02
    1372:	4b 81       	ldd	r20, Y+3	; 0x03
    1374:	5c 81       	ldd	r21, Y+4	; 0x04
    1376:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    137a:	dc 01       	movw	r26, r24
    137c:	cb 01       	movw	r24, r22
    137e:	bc 01       	movw	r22, r24
    1380:	cd 01       	movw	r24, r26
    1382:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1386:	dc 01       	movw	r26, r24
    1388:	cb 01       	movw	r24, r22
    138a:	f8 01       	movw	r30, r16
    138c:	80 83       	st	Z, r24
 		while ( ( (TIFR>>1) & 1 ) == 0 );
    138e:	e8 e5       	ldi	r30, 0x58	; 88
    1390:	f0 e0       	ldi	r31, 0x00	; 0
    1392:	80 81       	ld	r24, Z
    1394:	86 95       	lsr	r24
    1396:	88 2f       	mov	r24, r24
    1398:	90 e0       	ldi	r25, 0x00	; 0
    139a:	81 70       	andi	r24, 0x01	; 1
    139c:	90 70       	andi	r25, 0x00	; 0
    139e:	00 97       	sbiw	r24, 0x00	; 0
    13a0:	b1 f3       	breq	.-20     	; 0x138e <TIMERCTC_enuSetSychDelay+0x84>
					TIFR |= (1<<1);
    13a2:	a8 e5       	ldi	r26, 0x58	; 88
    13a4:	b0 e0       	ldi	r27, 0x00	; 0
    13a6:	e8 e5       	ldi	r30, 0x58	; 88
    13a8:	f0 e0       	ldi	r31, 0x00	; 0
    13aa:	80 81       	ld	r24, Z
    13ac:	82 60       	ori	r24, 0x02	; 2
    13ae:	8c 93       	st	X, r24
		 Local_enuErrorState = ES_OK;
    13b0:	81 e0       	ldi	r24, 0x01	; 1
    13b2:	8d 83       	std	Y+5, r24	; 0x05
		return Local_enuErrorState;
    13b4:	8d 81       	ldd	r24, Y+5	; 0x05

}
    13b6:	29 96       	adiw	r28, 0x09	; 9
    13b8:	0f b6       	in	r0, 0x3f	; 63
    13ba:	f8 94       	cli
    13bc:	de bf       	out	0x3e, r29	; 62
    13be:	0f be       	out	0x3f, r0	; 63
    13c0:	cd bf       	out	0x3d, r28	; 61
    13c2:	cf 91       	pop	r28
    13c4:	df 91       	pop	r29
    13c6:	1f 91       	pop	r17
    13c8:	0f 91       	pop	r16
    13ca:	08 95       	ret

000013cc <TIMERCTC_enuSetVoltage>:

ES_t TIMERCTC_enuSetVoltage(f32 Copy_u8Voltage)
{
    13cc:	df 93       	push	r29
    13ce:	cf 93       	push	r28
    13d0:	cd b7       	in	r28, 0x3d	; 61
    13d2:	de b7       	in	r29, 0x3e	; 62
    13d4:	29 97       	sbiw	r28, 0x09	; 9
    13d6:	0f b6       	in	r0, 0x3f	; 63
    13d8:	f8 94       	cli
    13da:	de bf       	out	0x3e, r29	; 62
    13dc:	0f be       	out	0x3f, r0	; 63
    13de:	cd bf       	out	0x3d, r28	; 61
    13e0:	6e 83       	std	Y+6, r22	; 0x06
    13e2:	7f 83       	std	Y+7, r23	; 0x07
    13e4:	88 87       	std	Y+8, r24	; 0x08
    13e6:	99 87       	std	Y+9, r25	; 0x09
	ES_t Local_enuErrorState = ES_NOK;
    13e8:	1d 82       	std	Y+5, r1	; 0x05
	f32 duty;
#if OC_MODE == NON_INVERTED
	duty= (5 *Copy_u8Voltage) * (5 *Copy_u8Voltage);
	OCR0= (u8)(duty * 256);
#endif
	 Local_enuErrorState = ES_OK;
    13ea:	81 e0       	ldi	r24, 0x01	; 1
    13ec:	8d 83       	std	Y+5, r24	; 0x05
	 return Local_enuErrorState;
    13ee:	8d 81       	ldd	r24, Y+5	; 0x05
}
    13f0:	29 96       	adiw	r28, 0x09	; 9
    13f2:	0f b6       	in	r0, 0x3f	; 63
    13f4:	f8 94       	cli
    13f6:	de bf       	out	0x3e, r29	; 62
    13f8:	0f be       	out	0x3f, r0	; 63
    13fa:	cd bf       	out	0x3d, r28	; 61
    13fc:	cf 91       	pop	r28
    13fe:	df 91       	pop	r29
    1400:	08 95       	ret

00001402 <__vector_11>:

ISR( VECT_TIMER0_OVF )
{
    1402:	1f 92       	push	r1
    1404:	0f 92       	push	r0
    1406:	0f b6       	in	r0, 0x3f	; 63
    1408:	0f 92       	push	r0
    140a:	11 24       	eor	r1, r1
    140c:	2f 93       	push	r18
    140e:	3f 93       	push	r19
    1410:	4f 93       	push	r20
    1412:	5f 93       	push	r21
    1414:	6f 93       	push	r22
    1416:	7f 93       	push	r23
    1418:	8f 93       	push	r24
    141a:	9f 93       	push	r25
    141c:	af 93       	push	r26
    141e:	bf 93       	push	r27
    1420:	ef 93       	push	r30
    1422:	ff 93       	push	r31
    1424:	df 93       	push	r29
    1426:	cf 93       	push	r28
    1428:	cd b7       	in	r28, 0x3d	; 61
    142a:	de b7       	in	r29, 0x3e	; 62
	 if( Global_Ptr != NULL)
    142c:	80 91 6a 01 	lds	r24, 0x016A
    1430:	90 91 6b 01 	lds	r25, 0x016B
    1434:	00 97       	sbiw	r24, 0x00	; 0
    1436:	09 f4       	brne	.+2      	; 0x143a <__vector_11+0x38>
    1438:	44 c0       	rjmp	.+136    	; 0x14c2 <__vector_11+0xc0>
	 {
		  static u32 Counts =0;
		 Counts++;
    143a:	80 91 6e 01 	lds	r24, 0x016E
    143e:	90 91 6f 01 	lds	r25, 0x016F
    1442:	a0 91 70 01 	lds	r26, 0x0170
    1446:	b0 91 71 01 	lds	r27, 0x0171
    144a:	01 96       	adiw	r24, 0x01	; 1
    144c:	a1 1d       	adc	r26, r1
    144e:	b1 1d       	adc	r27, r1
    1450:	80 93 6e 01 	sts	0x016E, r24
    1454:	90 93 6f 01 	sts	0x016F, r25
    1458:	a0 93 70 01 	sts	0x0170, r26
    145c:	b0 93 71 01 	sts	0x0171, r27
		 if(Counts == Global_NumOVF )
    1460:	20 91 6e 01 	lds	r18, 0x016E
    1464:	30 91 6f 01 	lds	r19, 0x016F
    1468:	40 91 70 01 	lds	r20, 0x0170
    146c:	50 91 71 01 	lds	r21, 0x0171
    1470:	80 91 76 01 	lds	r24, 0x0176
    1474:	90 91 77 01 	lds	r25, 0x0177
    1478:	a0 91 78 01 	lds	r26, 0x0178
    147c:	b0 91 79 01 	lds	r27, 0x0179
    1480:	28 17       	cp	r18, r24
    1482:	39 07       	cpc	r19, r25
    1484:	4a 07       	cpc	r20, r26
    1486:	5b 07       	cpc	r21, r27
    1488:	e1 f4       	brne	.+56     	; 0x14c2 <__vector_11+0xc0>
		 {
			 TCNT0 =Global_Preload;
    148a:	e2 e5       	ldi	r30, 0x52	; 82
    148c:	f0 e0       	ldi	r31, 0x00	; 0
    148e:	80 91 72 01 	lds	r24, 0x0172
    1492:	90 91 73 01 	lds	r25, 0x0173
    1496:	a0 91 74 01 	lds	r26, 0x0174
    149a:	b0 91 75 01 	lds	r27, 0x0175
    149e:	80 83       	st	Z, r24
			 Global_Ptr(Global_Para);
    14a0:	e0 91 6a 01 	lds	r30, 0x016A
    14a4:	f0 91 6b 01 	lds	r31, 0x016B
    14a8:	80 91 6c 01 	lds	r24, 0x016C
    14ac:	90 91 6d 01 	lds	r25, 0x016D
    14b0:	09 95       	icall
			 Counts =0;
    14b2:	10 92 6e 01 	sts	0x016E, r1
    14b6:	10 92 6f 01 	sts	0x016F, r1
    14ba:	10 92 70 01 	sts	0x0170, r1
    14be:	10 92 71 01 	sts	0x0171, r1
		 }
	 }
}
    14c2:	cf 91       	pop	r28
    14c4:	df 91       	pop	r29
    14c6:	ff 91       	pop	r31
    14c8:	ef 91       	pop	r30
    14ca:	bf 91       	pop	r27
    14cc:	af 91       	pop	r26
    14ce:	9f 91       	pop	r25
    14d0:	8f 91       	pop	r24
    14d2:	7f 91       	pop	r23
    14d4:	6f 91       	pop	r22
    14d6:	5f 91       	pop	r21
    14d8:	4f 91       	pop	r20
    14da:	3f 91       	pop	r19
    14dc:	2f 91       	pop	r18
    14de:	0f 90       	pop	r0
    14e0:	0f be       	out	0x3f, r0	; 63
    14e2:	0f 90       	pop	r0
    14e4:	1f 90       	pop	r1
    14e6:	18 95       	reti

000014e8 <GIE_Enable>:


#include "GIE_priv.h"

ES_t GIE_Enable(void)
{
    14e8:	df 93       	push	r29
    14ea:	cf 93       	push	r28
    14ec:	0f 92       	push	r0
    14ee:	cd b7       	in	r28, 0x3d	; 61
    14f0:	de b7       	in	r29, 0x3e	; 62
	ES_t Local_enuErrorState = ES_NOK;
    14f2:	19 82       	std	Y+1, r1	; 0x01
	SREG |= (1<<7);
    14f4:	af e5       	ldi	r26, 0x5F	; 95
    14f6:	b0 e0       	ldi	r27, 0x00	; 0
    14f8:	ef e5       	ldi	r30, 0x5F	; 95
    14fa:	f0 e0       	ldi	r31, 0x00	; 0
    14fc:	80 81       	ld	r24, Z
    14fe:	80 68       	ori	r24, 0x80	; 128
    1500:	8c 93       	st	X, r24

	 Local_enuErrorState = ES_OK;
    1502:	81 e0       	ldi	r24, 0x01	; 1
    1504:	89 83       	std	Y+1, r24	; 0x01
	return Local_enuErrorState ;
    1506:	89 81       	ldd	r24, Y+1	; 0x01
}
    1508:	0f 90       	pop	r0
    150a:	cf 91       	pop	r28
    150c:	df 91       	pop	r29
    150e:	08 95       	ret

00001510 <GIE_Disable>:

ES_t GIE_Disable(void)
{
    1510:	df 93       	push	r29
    1512:	cf 93       	push	r28
    1514:	0f 92       	push	r0
    1516:	cd b7       	in	r28, 0x3d	; 61
    1518:	de b7       	in	r29, 0x3e	; 62
	ES_t Local_enuErrorState = ES_NOK;
    151a:	19 82       	std	Y+1, r1	; 0x01
	SREG &=~(1<<7);
    151c:	af e5       	ldi	r26, 0x5F	; 95
    151e:	b0 e0       	ldi	r27, 0x00	; 0
    1520:	ef e5       	ldi	r30, 0x5F	; 95
    1522:	f0 e0       	ldi	r31, 0x00	; 0
    1524:	80 81       	ld	r24, Z
    1526:	8f 77       	andi	r24, 0x7F	; 127
    1528:	8c 93       	st	X, r24
	 Local_enuErrorState = ES_OK;
    152a:	81 e0       	ldi	r24, 0x01	; 1
    152c:	89 83       	std	Y+1, r24	; 0x01
	return Local_enuErrorState ;
    152e:	89 81       	ldd	r24, Y+1	; 0x01
}
    1530:	0f 90       	pop	r0
    1532:	cf 91       	pop	r28
    1534:	df 91       	pop	r29
    1536:	08 95       	ret

00001538 <DIO_enuInit>:

#include "DIO_priv.h"
#include "DIO_config.h"

ES_t DIO_enuInit(void)
{
    1538:	df 93       	push	r29
    153a:	cf 93       	push	r28
    153c:	0f 92       	push	r0
    153e:	cd b7       	in	r28, 0x3d	; 61
    1540:	de b7       	in	r29, 0x3e	; 62
	ES_t Local_enuErrorstate = ES_NOK;
    1542:	19 82       	std	Y+1, r1	; 0x01

	DDRA = CONC(PA_PIN7_DIR,PA_PIN6_DIR,PA_PIN5_DIR,PA_PIN4_DIR,PA_PIN3_DIR,PA_PIN2_DIR,PA_PIN1_DIR,PA_PIN0_DIR);
    1544:	ea e3       	ldi	r30, 0x3A	; 58
    1546:	f0 e0       	ldi	r31, 0x00	; 0
    1548:	8f ef       	ldi	r24, 0xFF	; 255
    154a:	80 83       	st	Z, r24
	DDRB = CONC(PB_PIN7_DIR,PB_PIN6_DIR,PB_PIN5_DIR,PB_PIN4_DIR,PB_PIN3_DIR,PB_PIN2_DIR,PB_PIN1_DIR,PB_PIN0_DIR);
    154c:	e7 e3       	ldi	r30, 0x37	; 55
    154e:	f0 e0       	ldi	r31, 0x00	; 0
    1550:	8f ef       	ldi	r24, 0xFF	; 255
    1552:	80 83       	st	Z, r24
	DDRC = CONC(PC_PIN7_DIR,PC_PIN6_DIR,PC_PIN5_DIR,PC_PIN4_DIR,PC_PIN3_DIR,PC_PIN2_DIR,PC_PIN1_DIR,PC_PIN0_DIR);
    1554:	e4 e3       	ldi	r30, 0x34	; 52
    1556:	f0 e0       	ldi	r31, 0x00	; 0
    1558:	86 e9       	ldi	r24, 0x96	; 150
    155a:	80 83       	st	Z, r24
	DDRD = CONC(PD_PIN7_DIR,PD_PIN6_DIR,PD_PIN5_DIR,PD_PIN4_DIR,PD_PIN3_DIR,PD_PIN2_DIR,PD_PIN1_DIR,PD_PIN0_DIR);
    155c:	e1 e3       	ldi	r30, 0x31	; 49
    155e:	f0 e0       	ldi	r31, 0x00	; 0
    1560:	86 e9       	ldi	r24, 0x96	; 150
    1562:	80 83       	st	Z, r24

	PORTA =CONC(PA_PIN7_VAL,PA_PIN6_VAL,PA_PIN5_VAL,PA_PIN4_VAL,PA_PIN3_VAL,PA_PIN2_VAL,PA_PIN1_VAL,PA_PIN0_VAL);
    1564:	eb e3       	ldi	r30, 0x3B	; 59
    1566:	f0 e0       	ldi	r31, 0x00	; 0
    1568:	10 82       	st	Z, r1

	Local_enuErrorstate = ES_OK;
    156a:	81 e0       	ldi	r24, 0x01	; 1
    156c:	89 83       	std	Y+1, r24	; 0x01

	return Local_enuErrorstate;
    156e:	89 81       	ldd	r24, Y+1	; 0x01
}
    1570:	0f 90       	pop	r0
    1572:	cf 91       	pop	r28
    1574:	df 91       	pop	r29
    1576:	08 95       	ret

00001578 <DIO_enuSetPortDirection>:

ES_t DIO_enuSetPortDirection(u8 Copy_u8PortID , u8 Copy_u8Value)
{
    1578:	df 93       	push	r29
    157a:	cf 93       	push	r28
    157c:	00 d0       	rcall	.+0      	; 0x157e <DIO_enuSetPortDirection+0x6>
    157e:	00 d0       	rcall	.+0      	; 0x1580 <DIO_enuSetPortDirection+0x8>
    1580:	0f 92       	push	r0
    1582:	cd b7       	in	r28, 0x3d	; 61
    1584:	de b7       	in	r29, 0x3e	; 62
    1586:	8a 83       	std	Y+2, r24	; 0x02
    1588:	6b 83       	std	Y+3, r22	; 0x03
	ES_t Local_enuErrorstate = ES_NOK;
    158a:	19 82       	std	Y+1, r1	; 0x01

	if (Copy_u8PortID <= DIO_PORTD)
    158c:	8a 81       	ldd	r24, Y+2	; 0x02
    158e:	84 30       	cpi	r24, 0x04	; 4
    1590:	a8 f5       	brcc	.+106    	; 0x15fc <DIO_enuSetPortDirection+0x84>
	{
		switch (Copy_u8PortID)
    1592:	8a 81       	ldd	r24, Y+2	; 0x02
    1594:	28 2f       	mov	r18, r24
    1596:	30 e0       	ldi	r19, 0x00	; 0
    1598:	3d 83       	std	Y+5, r19	; 0x05
    159a:	2c 83       	std	Y+4, r18	; 0x04
    159c:	8c 81       	ldd	r24, Y+4	; 0x04
    159e:	9d 81       	ldd	r25, Y+5	; 0x05
    15a0:	81 30       	cpi	r24, 0x01	; 1
    15a2:	91 05       	cpc	r25, r1
    15a4:	d1 f0       	breq	.+52     	; 0x15da <DIO_enuSetPortDirection+0x62>
    15a6:	2c 81       	ldd	r18, Y+4	; 0x04
    15a8:	3d 81       	ldd	r19, Y+5	; 0x05
    15aa:	22 30       	cpi	r18, 0x02	; 2
    15ac:	31 05       	cpc	r19, r1
    15ae:	2c f4       	brge	.+10     	; 0x15ba <DIO_enuSetPortDirection+0x42>
    15b0:	8c 81       	ldd	r24, Y+4	; 0x04
    15b2:	9d 81       	ldd	r25, Y+5	; 0x05
    15b4:	00 97       	sbiw	r24, 0x00	; 0
    15b6:	61 f0       	breq	.+24     	; 0x15d0 <DIO_enuSetPortDirection+0x58>
    15b8:	1e c0       	rjmp	.+60     	; 0x15f6 <DIO_enuSetPortDirection+0x7e>
    15ba:	2c 81       	ldd	r18, Y+4	; 0x04
    15bc:	3d 81       	ldd	r19, Y+5	; 0x05
    15be:	22 30       	cpi	r18, 0x02	; 2
    15c0:	31 05       	cpc	r19, r1
    15c2:	81 f0       	breq	.+32     	; 0x15e4 <DIO_enuSetPortDirection+0x6c>
    15c4:	8c 81       	ldd	r24, Y+4	; 0x04
    15c6:	9d 81       	ldd	r25, Y+5	; 0x05
    15c8:	83 30       	cpi	r24, 0x03	; 3
    15ca:	91 05       	cpc	r25, r1
    15cc:	81 f0       	breq	.+32     	; 0x15ee <DIO_enuSetPortDirection+0x76>
    15ce:	13 c0       	rjmp	.+38     	; 0x15f6 <DIO_enuSetPortDirection+0x7e>
		{
		case DIO_PORTA:
			DDRA = Copy_u8Value;
    15d0:	ea e3       	ldi	r30, 0x3A	; 58
    15d2:	f0 e0       	ldi	r31, 0x00	; 0
    15d4:	8b 81       	ldd	r24, Y+3	; 0x03
    15d6:	80 83       	st	Z, r24
    15d8:	0e c0       	rjmp	.+28     	; 0x15f6 <DIO_enuSetPortDirection+0x7e>
			break;
		case DIO_PORTB:
			DDRB = Copy_u8Value;
    15da:	e7 e3       	ldi	r30, 0x37	; 55
    15dc:	f0 e0       	ldi	r31, 0x00	; 0
    15de:	8b 81       	ldd	r24, Y+3	; 0x03
    15e0:	80 83       	st	Z, r24
    15e2:	09 c0       	rjmp	.+18     	; 0x15f6 <DIO_enuSetPortDirection+0x7e>
			break;
		case DIO_PORTC:
			DDRC = Copy_u8Value;
    15e4:	e4 e3       	ldi	r30, 0x34	; 52
    15e6:	f0 e0       	ldi	r31, 0x00	; 0
    15e8:	8b 81       	ldd	r24, Y+3	; 0x03
    15ea:	80 83       	st	Z, r24
    15ec:	04 c0       	rjmp	.+8      	; 0x15f6 <DIO_enuSetPortDirection+0x7e>
			break;
		case DIO_PORTD:
			DDRD = Copy_u8Value;
    15ee:	e1 e3       	ldi	r30, 0x31	; 49
    15f0:	f0 e0       	ldi	r31, 0x00	; 0
    15f2:	8b 81       	ldd	r24, Y+3	; 0x03
    15f4:	80 83       	st	Z, r24
			break;
		}
		Local_enuErrorstate = ES_OK;
    15f6:	81 e0       	ldi	r24, 0x01	; 1
    15f8:	89 83       	std	Y+1, r24	; 0x01
    15fa:	02 c0       	rjmp	.+4      	; 0x1600 <DIO_enuSetPortDirection+0x88>
	}
	else
	{
		Local_enuErrorstate = ES_OUT_OF_RANGE;
    15fc:	83 e0       	ldi	r24, 0x03	; 3
    15fe:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_enuErrorstate;
    1600:	89 81       	ldd	r24, Y+1	; 0x01
}
    1602:	0f 90       	pop	r0
    1604:	0f 90       	pop	r0
    1606:	0f 90       	pop	r0
    1608:	0f 90       	pop	r0
    160a:	0f 90       	pop	r0
    160c:	cf 91       	pop	r28
    160e:	df 91       	pop	r29
    1610:	08 95       	ret

00001612 <DIO_enuSetPortValue>:

ES_t DIO_enuSetPortValue(u8 Copy_u8PortID , u8 Copy_u8Value)
{
    1612:	df 93       	push	r29
    1614:	cf 93       	push	r28
    1616:	00 d0       	rcall	.+0      	; 0x1618 <DIO_enuSetPortValue+0x6>
    1618:	00 d0       	rcall	.+0      	; 0x161a <DIO_enuSetPortValue+0x8>
    161a:	0f 92       	push	r0
    161c:	cd b7       	in	r28, 0x3d	; 61
    161e:	de b7       	in	r29, 0x3e	; 62
    1620:	8a 83       	std	Y+2, r24	; 0x02
    1622:	6b 83       	std	Y+3, r22	; 0x03
	ES_t Local_enuErrorstate = ES_NOK;
    1624:	19 82       	std	Y+1, r1	; 0x01

	if (Copy_u8PortID <= DIO_PORTD)
    1626:	8a 81       	ldd	r24, Y+2	; 0x02
    1628:	84 30       	cpi	r24, 0x04	; 4
    162a:	a8 f5       	brcc	.+106    	; 0x1696 <DIO_enuSetPortValue+0x84>
	{
		switch (Copy_u8PortID)
    162c:	8a 81       	ldd	r24, Y+2	; 0x02
    162e:	28 2f       	mov	r18, r24
    1630:	30 e0       	ldi	r19, 0x00	; 0
    1632:	3d 83       	std	Y+5, r19	; 0x05
    1634:	2c 83       	std	Y+4, r18	; 0x04
    1636:	8c 81       	ldd	r24, Y+4	; 0x04
    1638:	9d 81       	ldd	r25, Y+5	; 0x05
    163a:	81 30       	cpi	r24, 0x01	; 1
    163c:	91 05       	cpc	r25, r1
    163e:	d1 f0       	breq	.+52     	; 0x1674 <DIO_enuSetPortValue+0x62>
    1640:	2c 81       	ldd	r18, Y+4	; 0x04
    1642:	3d 81       	ldd	r19, Y+5	; 0x05
    1644:	22 30       	cpi	r18, 0x02	; 2
    1646:	31 05       	cpc	r19, r1
    1648:	2c f4       	brge	.+10     	; 0x1654 <DIO_enuSetPortValue+0x42>
    164a:	8c 81       	ldd	r24, Y+4	; 0x04
    164c:	9d 81       	ldd	r25, Y+5	; 0x05
    164e:	00 97       	sbiw	r24, 0x00	; 0
    1650:	61 f0       	breq	.+24     	; 0x166a <DIO_enuSetPortValue+0x58>
    1652:	1e c0       	rjmp	.+60     	; 0x1690 <DIO_enuSetPortValue+0x7e>
    1654:	2c 81       	ldd	r18, Y+4	; 0x04
    1656:	3d 81       	ldd	r19, Y+5	; 0x05
    1658:	22 30       	cpi	r18, 0x02	; 2
    165a:	31 05       	cpc	r19, r1
    165c:	81 f0       	breq	.+32     	; 0x167e <DIO_enuSetPortValue+0x6c>
    165e:	8c 81       	ldd	r24, Y+4	; 0x04
    1660:	9d 81       	ldd	r25, Y+5	; 0x05
    1662:	83 30       	cpi	r24, 0x03	; 3
    1664:	91 05       	cpc	r25, r1
    1666:	81 f0       	breq	.+32     	; 0x1688 <DIO_enuSetPortValue+0x76>
    1668:	13 c0       	rjmp	.+38     	; 0x1690 <DIO_enuSetPortValue+0x7e>
		{
		case DIO_PORTA:
			PORTA = Copy_u8Value;
    166a:	eb e3       	ldi	r30, 0x3B	; 59
    166c:	f0 e0       	ldi	r31, 0x00	; 0
    166e:	8b 81       	ldd	r24, Y+3	; 0x03
    1670:	80 83       	st	Z, r24
    1672:	0e c0       	rjmp	.+28     	; 0x1690 <DIO_enuSetPortValue+0x7e>
			break;
		case DIO_PORTB:
			PORTB = Copy_u8Value;
    1674:	e8 e3       	ldi	r30, 0x38	; 56
    1676:	f0 e0       	ldi	r31, 0x00	; 0
    1678:	8b 81       	ldd	r24, Y+3	; 0x03
    167a:	80 83       	st	Z, r24
    167c:	09 c0       	rjmp	.+18     	; 0x1690 <DIO_enuSetPortValue+0x7e>
			break;
		case DIO_PORTC:
			PORTC = Copy_u8Value;
    167e:	e5 e3       	ldi	r30, 0x35	; 53
    1680:	f0 e0       	ldi	r31, 0x00	; 0
    1682:	8b 81       	ldd	r24, Y+3	; 0x03
    1684:	80 83       	st	Z, r24
    1686:	04 c0       	rjmp	.+8      	; 0x1690 <DIO_enuSetPortValue+0x7e>
			break;
		case DIO_PORTD:
			PORTD = Copy_u8Value;
    1688:	e2 e3       	ldi	r30, 0x32	; 50
    168a:	f0 e0       	ldi	r31, 0x00	; 0
    168c:	8b 81       	ldd	r24, Y+3	; 0x03
    168e:	80 83       	st	Z, r24
			break;
		}
		Local_enuErrorstate = ES_OK;
    1690:	81 e0       	ldi	r24, 0x01	; 1
    1692:	89 83       	std	Y+1, r24	; 0x01
    1694:	02 c0       	rjmp	.+4      	; 0x169a <DIO_enuSetPortValue+0x88>
	}
	else
	{
		Local_enuErrorstate = ES_OUT_OF_RANGE;
    1696:	83 e0       	ldi	r24, 0x03	; 3
    1698:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_enuErrorstate;
    169a:	89 81       	ldd	r24, Y+1	; 0x01
}
    169c:	0f 90       	pop	r0
    169e:	0f 90       	pop	r0
    16a0:	0f 90       	pop	r0
    16a2:	0f 90       	pop	r0
    16a4:	0f 90       	pop	r0
    16a6:	cf 91       	pop	r28
    16a8:	df 91       	pop	r29
    16aa:	08 95       	ret

000016ac <DIO_enuTogPortValue>:

ES_t DIO_enuTogPortValue(u8 Copy_u8PortID)
{
    16ac:	df 93       	push	r29
    16ae:	cf 93       	push	r28
    16b0:	00 d0       	rcall	.+0      	; 0x16b2 <DIO_enuTogPortValue+0x6>
    16b2:	00 d0       	rcall	.+0      	; 0x16b4 <DIO_enuTogPortValue+0x8>
    16b4:	cd b7       	in	r28, 0x3d	; 61
    16b6:	de b7       	in	r29, 0x3e	; 62
    16b8:	8a 83       	std	Y+2, r24	; 0x02
	ES_t Local_enuErrorstate = ES_NOK;
    16ba:	19 82       	std	Y+1, r1	; 0x01

	if (Copy_u8PortID <= DIO_PORTD)
    16bc:	8a 81       	ldd	r24, Y+2	; 0x02
    16be:	84 30       	cpi	r24, 0x04	; 4
    16c0:	08 f0       	brcs	.+2      	; 0x16c4 <DIO_enuTogPortValue+0x18>
    16c2:	41 c0       	rjmp	.+130    	; 0x1746 <DIO_enuTogPortValue+0x9a>
	{
		switch (Copy_u8PortID)
    16c4:	8a 81       	ldd	r24, Y+2	; 0x02
    16c6:	28 2f       	mov	r18, r24
    16c8:	30 e0       	ldi	r19, 0x00	; 0
    16ca:	3c 83       	std	Y+4, r19	; 0x04
    16cc:	2b 83       	std	Y+3, r18	; 0x03
    16ce:	8b 81       	ldd	r24, Y+3	; 0x03
    16d0:	9c 81       	ldd	r25, Y+4	; 0x04
    16d2:	81 30       	cpi	r24, 0x01	; 1
    16d4:	91 05       	cpc	r25, r1
    16d6:	e9 f0       	breq	.+58     	; 0x1712 <DIO_enuTogPortValue+0x66>
    16d8:	2b 81       	ldd	r18, Y+3	; 0x03
    16da:	3c 81       	ldd	r19, Y+4	; 0x04
    16dc:	22 30       	cpi	r18, 0x02	; 2
    16de:	31 05       	cpc	r19, r1
    16e0:	2c f4       	brge	.+10     	; 0x16ec <DIO_enuTogPortValue+0x40>
    16e2:	8b 81       	ldd	r24, Y+3	; 0x03
    16e4:	9c 81       	ldd	r25, Y+4	; 0x04
    16e6:	00 97       	sbiw	r24, 0x00	; 0
    16e8:	61 f0       	breq	.+24     	; 0x1702 <DIO_enuTogPortValue+0x56>
    16ea:	2a c0       	rjmp	.+84     	; 0x1740 <DIO_enuTogPortValue+0x94>
    16ec:	2b 81       	ldd	r18, Y+3	; 0x03
    16ee:	3c 81       	ldd	r19, Y+4	; 0x04
    16f0:	22 30       	cpi	r18, 0x02	; 2
    16f2:	31 05       	cpc	r19, r1
    16f4:	b1 f0       	breq	.+44     	; 0x1722 <DIO_enuTogPortValue+0x76>
    16f6:	8b 81       	ldd	r24, Y+3	; 0x03
    16f8:	9c 81       	ldd	r25, Y+4	; 0x04
    16fa:	83 30       	cpi	r24, 0x03	; 3
    16fc:	91 05       	cpc	r25, r1
    16fe:	c9 f0       	breq	.+50     	; 0x1732 <DIO_enuTogPortValue+0x86>
    1700:	1f c0       	rjmp	.+62     	; 0x1740 <DIO_enuTogPortValue+0x94>
		{
		case DIO_PORTA:
			PORTA = ~PORTA;
    1702:	ab e3       	ldi	r26, 0x3B	; 59
    1704:	b0 e0       	ldi	r27, 0x00	; 0
    1706:	eb e3       	ldi	r30, 0x3B	; 59
    1708:	f0 e0       	ldi	r31, 0x00	; 0
    170a:	80 81       	ld	r24, Z
    170c:	80 95       	com	r24
    170e:	8c 93       	st	X, r24
    1710:	17 c0       	rjmp	.+46     	; 0x1740 <DIO_enuTogPortValue+0x94>
			break;
		case DIO_PORTB:
			PORTB = ~PORTB;
    1712:	a8 e3       	ldi	r26, 0x38	; 56
    1714:	b0 e0       	ldi	r27, 0x00	; 0
    1716:	e8 e3       	ldi	r30, 0x38	; 56
    1718:	f0 e0       	ldi	r31, 0x00	; 0
    171a:	80 81       	ld	r24, Z
    171c:	80 95       	com	r24
    171e:	8c 93       	st	X, r24
    1720:	0f c0       	rjmp	.+30     	; 0x1740 <DIO_enuTogPortValue+0x94>
			break;
		case DIO_PORTC:
			PORTC = ~PORTC;
    1722:	a5 e3       	ldi	r26, 0x35	; 53
    1724:	b0 e0       	ldi	r27, 0x00	; 0
    1726:	e5 e3       	ldi	r30, 0x35	; 53
    1728:	f0 e0       	ldi	r31, 0x00	; 0
    172a:	80 81       	ld	r24, Z
    172c:	80 95       	com	r24
    172e:	8c 93       	st	X, r24
    1730:	07 c0       	rjmp	.+14     	; 0x1740 <DIO_enuTogPortValue+0x94>
			break;
		case DIO_PORTD:
			PORTD = ~PORTD;
    1732:	a2 e3       	ldi	r26, 0x32	; 50
    1734:	b0 e0       	ldi	r27, 0x00	; 0
    1736:	e2 e3       	ldi	r30, 0x32	; 50
    1738:	f0 e0       	ldi	r31, 0x00	; 0
    173a:	80 81       	ld	r24, Z
    173c:	80 95       	com	r24
    173e:	8c 93       	st	X, r24
			break;
		}
		Local_enuErrorstate = ES_OK;
    1740:	81 e0       	ldi	r24, 0x01	; 1
    1742:	89 83       	std	Y+1, r24	; 0x01
    1744:	02 c0       	rjmp	.+4      	; 0x174a <DIO_enuTogPortValue+0x9e>
	}
	else
	{
		Local_enuErrorstate = ES_OUT_OF_RANGE;
    1746:	83 e0       	ldi	r24, 0x03	; 3
    1748:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_enuErrorstate;
    174a:	89 81       	ldd	r24, Y+1	; 0x01
}
    174c:	0f 90       	pop	r0
    174e:	0f 90       	pop	r0
    1750:	0f 90       	pop	r0
    1752:	0f 90       	pop	r0
    1754:	cf 91       	pop	r28
    1756:	df 91       	pop	r29
    1758:	08 95       	ret

0000175a <DIO_enuGetPortValue>:

ES_t DIO_enuGetPortValue(u8 Copy_u8PortID , u8 * Copy_pu8Value)
{
    175a:	df 93       	push	r29
    175c:	cf 93       	push	r28
    175e:	00 d0       	rcall	.+0      	; 0x1760 <DIO_enuGetPortValue+0x6>
    1760:	00 d0       	rcall	.+0      	; 0x1762 <DIO_enuGetPortValue+0x8>
    1762:	00 d0       	rcall	.+0      	; 0x1764 <DIO_enuGetPortValue+0xa>
    1764:	cd b7       	in	r28, 0x3d	; 61
    1766:	de b7       	in	r29, 0x3e	; 62
    1768:	8a 83       	std	Y+2, r24	; 0x02
    176a:	7c 83       	std	Y+4, r23	; 0x04
    176c:	6b 83       	std	Y+3, r22	; 0x03
	ES_t Local_enuErrorstate = ES_NOK;
    176e:	19 82       	std	Y+1, r1	; 0x01

	if (Copy_pu8Value != NULL)
    1770:	8b 81       	ldd	r24, Y+3	; 0x03
    1772:	9c 81       	ldd	r25, Y+4	; 0x04
    1774:	00 97       	sbiw	r24, 0x00	; 0
    1776:	09 f4       	brne	.+2      	; 0x177a <DIO_enuGetPortValue+0x20>
    1778:	43 c0       	rjmp	.+134    	; 0x1800 <DIO_enuGetPortValue+0xa6>
	{
		if (Copy_u8PortID <= DIO_PORTD)
    177a:	8a 81       	ldd	r24, Y+2	; 0x02
    177c:	84 30       	cpi	r24, 0x04	; 4
    177e:	e8 f5       	brcc	.+122    	; 0x17fa <DIO_enuGetPortValue+0xa0>
		{
			switch (Copy_u8PortID)
    1780:	8a 81       	ldd	r24, Y+2	; 0x02
    1782:	28 2f       	mov	r18, r24
    1784:	30 e0       	ldi	r19, 0x00	; 0
    1786:	3e 83       	std	Y+6, r19	; 0x06
    1788:	2d 83       	std	Y+5, r18	; 0x05
    178a:	8d 81       	ldd	r24, Y+5	; 0x05
    178c:	9e 81       	ldd	r25, Y+6	; 0x06
    178e:	81 30       	cpi	r24, 0x01	; 1
    1790:	91 05       	cpc	r25, r1
    1792:	e1 f0       	breq	.+56     	; 0x17cc <DIO_enuGetPortValue+0x72>
    1794:	2d 81       	ldd	r18, Y+5	; 0x05
    1796:	3e 81       	ldd	r19, Y+6	; 0x06
    1798:	22 30       	cpi	r18, 0x02	; 2
    179a:	31 05       	cpc	r19, r1
    179c:	2c f4       	brge	.+10     	; 0x17a8 <DIO_enuGetPortValue+0x4e>
    179e:	8d 81       	ldd	r24, Y+5	; 0x05
    17a0:	9e 81       	ldd	r25, Y+6	; 0x06
    17a2:	00 97       	sbiw	r24, 0x00	; 0
    17a4:	61 f0       	breq	.+24     	; 0x17be <DIO_enuGetPortValue+0x64>
    17a6:	26 c0       	rjmp	.+76     	; 0x17f4 <DIO_enuGetPortValue+0x9a>
    17a8:	2d 81       	ldd	r18, Y+5	; 0x05
    17aa:	3e 81       	ldd	r19, Y+6	; 0x06
    17ac:	22 30       	cpi	r18, 0x02	; 2
    17ae:	31 05       	cpc	r19, r1
    17b0:	a1 f0       	breq	.+40     	; 0x17da <DIO_enuGetPortValue+0x80>
    17b2:	8d 81       	ldd	r24, Y+5	; 0x05
    17b4:	9e 81       	ldd	r25, Y+6	; 0x06
    17b6:	83 30       	cpi	r24, 0x03	; 3
    17b8:	91 05       	cpc	r25, r1
    17ba:	b1 f0       	breq	.+44     	; 0x17e8 <DIO_enuGetPortValue+0x8e>
    17bc:	1b c0       	rjmp	.+54     	; 0x17f4 <DIO_enuGetPortValue+0x9a>
			{
			case DIO_PORTA:
				*Copy_pu8Value = PINA;
    17be:	e9 e3       	ldi	r30, 0x39	; 57
    17c0:	f0 e0       	ldi	r31, 0x00	; 0
    17c2:	80 81       	ld	r24, Z
    17c4:	eb 81       	ldd	r30, Y+3	; 0x03
    17c6:	fc 81       	ldd	r31, Y+4	; 0x04
    17c8:	80 83       	st	Z, r24
    17ca:	14 c0       	rjmp	.+40     	; 0x17f4 <DIO_enuGetPortValue+0x9a>
				break;
			case DIO_PORTB:
				*Copy_pu8Value = PINB;
    17cc:	e6 e3       	ldi	r30, 0x36	; 54
    17ce:	f0 e0       	ldi	r31, 0x00	; 0
    17d0:	80 81       	ld	r24, Z
    17d2:	eb 81       	ldd	r30, Y+3	; 0x03
    17d4:	fc 81       	ldd	r31, Y+4	; 0x04
    17d6:	80 83       	st	Z, r24
    17d8:	0d c0       	rjmp	.+26     	; 0x17f4 <DIO_enuGetPortValue+0x9a>
				break;
			case DIO_PORTC:
				*Copy_pu8Value = PINC;
    17da:	e3 e3       	ldi	r30, 0x33	; 51
    17dc:	f0 e0       	ldi	r31, 0x00	; 0
    17de:	80 81       	ld	r24, Z
    17e0:	eb 81       	ldd	r30, Y+3	; 0x03
    17e2:	fc 81       	ldd	r31, Y+4	; 0x04
    17e4:	80 83       	st	Z, r24
    17e6:	06 c0       	rjmp	.+12     	; 0x17f4 <DIO_enuGetPortValue+0x9a>
				break;
			case DIO_PORTD:
				*Copy_pu8Value = PIND;
    17e8:	e0 e3       	ldi	r30, 0x30	; 48
    17ea:	f0 e0       	ldi	r31, 0x00	; 0
    17ec:	80 81       	ld	r24, Z
    17ee:	eb 81       	ldd	r30, Y+3	; 0x03
    17f0:	fc 81       	ldd	r31, Y+4	; 0x04
    17f2:	80 83       	st	Z, r24
				break;
			}
			Local_enuErrorstate = ES_OK;
    17f4:	81 e0       	ldi	r24, 0x01	; 1
    17f6:	89 83       	std	Y+1, r24	; 0x01
    17f8:	05 c0       	rjmp	.+10     	; 0x1804 <DIO_enuGetPortValue+0xaa>
		}
		else
		{
			Local_enuErrorstate = ES_OUT_OF_RANGE;
    17fa:	83 e0       	ldi	r24, 0x03	; 3
    17fc:	89 83       	std	Y+1, r24	; 0x01
    17fe:	02 c0       	rjmp	.+4      	; 0x1804 <DIO_enuGetPortValue+0xaa>
		}
	}
	else
	{
		Local_enuErrorstate = ES_NULL_POINTER;
    1800:	82 e0       	ldi	r24, 0x02	; 2
    1802:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_enuErrorstate;
    1804:	89 81       	ldd	r24, Y+1	; 0x01
}
    1806:	26 96       	adiw	r28, 0x06	; 6
    1808:	0f b6       	in	r0, 0x3f	; 63
    180a:	f8 94       	cli
    180c:	de bf       	out	0x3e, r29	; 62
    180e:	0f be       	out	0x3f, r0	; 63
    1810:	cd bf       	out	0x3d, r28	; 61
    1812:	cf 91       	pop	r28
    1814:	df 91       	pop	r29
    1816:	08 95       	ret

00001818 <DIO_enuSetPinDirection>:

ES_t DIO_enuSetPinDirection(u8 Copy_u8PortID ,u8 Copy_u8PinID , u8 Copy_u8Value)
{
    1818:	df 93       	push	r29
    181a:	cf 93       	push	r28
    181c:	00 d0       	rcall	.+0      	; 0x181e <DIO_enuSetPinDirection+0x6>
    181e:	00 d0       	rcall	.+0      	; 0x1820 <DIO_enuSetPinDirection+0x8>
    1820:	00 d0       	rcall	.+0      	; 0x1822 <DIO_enuSetPinDirection+0xa>
    1822:	cd b7       	in	r28, 0x3d	; 61
    1824:	de b7       	in	r29, 0x3e	; 62
    1826:	8a 83       	std	Y+2, r24	; 0x02
    1828:	6b 83       	std	Y+3, r22	; 0x03
    182a:	4c 83       	std	Y+4, r20	; 0x04
	ES_t Local_enuErrorstate = ES_NOK;
    182c:	19 82       	std	Y+1, r1	; 0x01

	if (Copy_u8PortID <= DIO_PORTD &&
    182e:	8a 81       	ldd	r24, Y+2	; 0x02
    1830:	84 30       	cpi	r24, 0x04	; 4
    1832:	08 f0       	brcs	.+2      	; 0x1836 <DIO_enuSetPinDirection+0x1e>
    1834:	d1 c0       	rjmp	.+418    	; 0x19d8 <DIO_enuSetPinDirection+0x1c0>
    1836:	8b 81       	ldd	r24, Y+3	; 0x03
    1838:	88 30       	cpi	r24, 0x08	; 8
    183a:	08 f0       	brcs	.+2      	; 0x183e <DIO_enuSetPinDirection+0x26>
    183c:	cd c0       	rjmp	.+410    	; 0x19d8 <DIO_enuSetPinDirection+0x1c0>
    183e:	8c 81       	ldd	r24, Y+4	; 0x04
    1840:	82 30       	cpi	r24, 0x02	; 2
    1842:	08 f0       	brcs	.+2      	; 0x1846 <DIO_enuSetPinDirection+0x2e>
    1844:	c9 c0       	rjmp	.+402    	; 0x19d8 <DIO_enuSetPinDirection+0x1c0>
			Copy_u8PinID <= DIO_PIN7 &&
			Copy_u8Value <= OUTPUT)
	{
		switch (Copy_u8PortID)
    1846:	8a 81       	ldd	r24, Y+2	; 0x02
    1848:	28 2f       	mov	r18, r24
    184a:	30 e0       	ldi	r19, 0x00	; 0
    184c:	3e 83       	std	Y+6, r19	; 0x06
    184e:	2d 83       	std	Y+5, r18	; 0x05
    1850:	6d 81       	ldd	r22, Y+5	; 0x05
    1852:	7e 81       	ldd	r23, Y+6	; 0x06
    1854:	61 30       	cpi	r22, 0x01	; 1
    1856:	71 05       	cpc	r23, r1
    1858:	09 f4       	brne	.+2      	; 0x185c <DIO_enuSetPinDirection+0x44>
    185a:	41 c0       	rjmp	.+130    	; 0x18de <DIO_enuSetPinDirection+0xc6>
    185c:	8d 81       	ldd	r24, Y+5	; 0x05
    185e:	9e 81       	ldd	r25, Y+6	; 0x06
    1860:	82 30       	cpi	r24, 0x02	; 2
    1862:	91 05       	cpc	r25, r1
    1864:	34 f4       	brge	.+12     	; 0x1872 <DIO_enuSetPinDirection+0x5a>
    1866:	2d 81       	ldd	r18, Y+5	; 0x05
    1868:	3e 81       	ldd	r19, Y+6	; 0x06
    186a:	21 15       	cp	r18, r1
    186c:	31 05       	cpc	r19, r1
    186e:	71 f0       	breq	.+28     	; 0x188c <DIO_enuSetPinDirection+0x74>
    1870:	b0 c0       	rjmp	.+352    	; 0x19d2 <DIO_enuSetPinDirection+0x1ba>
    1872:	6d 81       	ldd	r22, Y+5	; 0x05
    1874:	7e 81       	ldd	r23, Y+6	; 0x06
    1876:	62 30       	cpi	r22, 0x02	; 2
    1878:	71 05       	cpc	r23, r1
    187a:	09 f4       	brne	.+2      	; 0x187e <DIO_enuSetPinDirection+0x66>
    187c:	59 c0       	rjmp	.+178    	; 0x1930 <DIO_enuSetPinDirection+0x118>
    187e:	8d 81       	ldd	r24, Y+5	; 0x05
    1880:	9e 81       	ldd	r25, Y+6	; 0x06
    1882:	83 30       	cpi	r24, 0x03	; 3
    1884:	91 05       	cpc	r25, r1
    1886:	09 f4       	brne	.+2      	; 0x188a <DIO_enuSetPinDirection+0x72>
    1888:	7c c0       	rjmp	.+248    	; 0x1982 <DIO_enuSetPinDirection+0x16a>
    188a:	a3 c0       	rjmp	.+326    	; 0x19d2 <DIO_enuSetPinDirection+0x1ba>
		{
		case DIO_PORTA:
			DDRA &= ~(DIO_MASK_BIT<<Copy_u8PinID);
    188c:	aa e3       	ldi	r26, 0x3A	; 58
    188e:	b0 e0       	ldi	r27, 0x00	; 0
    1890:	ea e3       	ldi	r30, 0x3A	; 58
    1892:	f0 e0       	ldi	r31, 0x00	; 0
    1894:	80 81       	ld	r24, Z
    1896:	48 2f       	mov	r20, r24
    1898:	8b 81       	ldd	r24, Y+3	; 0x03
    189a:	28 2f       	mov	r18, r24
    189c:	30 e0       	ldi	r19, 0x00	; 0
    189e:	81 e0       	ldi	r24, 0x01	; 1
    18a0:	90 e0       	ldi	r25, 0x00	; 0
    18a2:	02 c0       	rjmp	.+4      	; 0x18a8 <DIO_enuSetPinDirection+0x90>
    18a4:	88 0f       	add	r24, r24
    18a6:	99 1f       	adc	r25, r25
    18a8:	2a 95       	dec	r18
    18aa:	e2 f7       	brpl	.-8      	; 0x18a4 <DIO_enuSetPinDirection+0x8c>
    18ac:	80 95       	com	r24
    18ae:	84 23       	and	r24, r20
    18b0:	8c 93       	st	X, r24
			DDRA |=  (Copy_u8Value << Copy_u8PinID);
    18b2:	aa e3       	ldi	r26, 0x3A	; 58
    18b4:	b0 e0       	ldi	r27, 0x00	; 0
    18b6:	ea e3       	ldi	r30, 0x3A	; 58
    18b8:	f0 e0       	ldi	r31, 0x00	; 0
    18ba:	80 81       	ld	r24, Z
    18bc:	48 2f       	mov	r20, r24
    18be:	8c 81       	ldd	r24, Y+4	; 0x04
    18c0:	28 2f       	mov	r18, r24
    18c2:	30 e0       	ldi	r19, 0x00	; 0
    18c4:	8b 81       	ldd	r24, Y+3	; 0x03
    18c6:	88 2f       	mov	r24, r24
    18c8:	90 e0       	ldi	r25, 0x00	; 0
    18ca:	b9 01       	movw	r22, r18
    18cc:	02 c0       	rjmp	.+4      	; 0x18d2 <DIO_enuSetPinDirection+0xba>
    18ce:	66 0f       	add	r22, r22
    18d0:	77 1f       	adc	r23, r23
    18d2:	8a 95       	dec	r24
    18d4:	e2 f7       	brpl	.-8      	; 0x18ce <DIO_enuSetPinDirection+0xb6>
    18d6:	cb 01       	movw	r24, r22
    18d8:	84 2b       	or	r24, r20
    18da:	8c 93       	st	X, r24
    18dc:	7a c0       	rjmp	.+244    	; 0x19d2 <DIO_enuSetPinDirection+0x1ba>
			break;
		case DIO_PORTB:
			DDRB &= ~(DIO_MASK_BIT<<Copy_u8PinID);
    18de:	a7 e3       	ldi	r26, 0x37	; 55
    18e0:	b0 e0       	ldi	r27, 0x00	; 0
    18e2:	e7 e3       	ldi	r30, 0x37	; 55
    18e4:	f0 e0       	ldi	r31, 0x00	; 0
    18e6:	80 81       	ld	r24, Z
    18e8:	48 2f       	mov	r20, r24
    18ea:	8b 81       	ldd	r24, Y+3	; 0x03
    18ec:	28 2f       	mov	r18, r24
    18ee:	30 e0       	ldi	r19, 0x00	; 0
    18f0:	81 e0       	ldi	r24, 0x01	; 1
    18f2:	90 e0       	ldi	r25, 0x00	; 0
    18f4:	02 c0       	rjmp	.+4      	; 0x18fa <DIO_enuSetPinDirection+0xe2>
    18f6:	88 0f       	add	r24, r24
    18f8:	99 1f       	adc	r25, r25
    18fa:	2a 95       	dec	r18
    18fc:	e2 f7       	brpl	.-8      	; 0x18f6 <DIO_enuSetPinDirection+0xde>
    18fe:	80 95       	com	r24
    1900:	84 23       	and	r24, r20
    1902:	8c 93       	st	X, r24
			DDRB |=  (Copy_u8Value << Copy_u8PinID);
    1904:	a7 e3       	ldi	r26, 0x37	; 55
    1906:	b0 e0       	ldi	r27, 0x00	; 0
    1908:	e7 e3       	ldi	r30, 0x37	; 55
    190a:	f0 e0       	ldi	r31, 0x00	; 0
    190c:	80 81       	ld	r24, Z
    190e:	48 2f       	mov	r20, r24
    1910:	8c 81       	ldd	r24, Y+4	; 0x04
    1912:	28 2f       	mov	r18, r24
    1914:	30 e0       	ldi	r19, 0x00	; 0
    1916:	8b 81       	ldd	r24, Y+3	; 0x03
    1918:	88 2f       	mov	r24, r24
    191a:	90 e0       	ldi	r25, 0x00	; 0
    191c:	b9 01       	movw	r22, r18
    191e:	02 c0       	rjmp	.+4      	; 0x1924 <DIO_enuSetPinDirection+0x10c>
    1920:	66 0f       	add	r22, r22
    1922:	77 1f       	adc	r23, r23
    1924:	8a 95       	dec	r24
    1926:	e2 f7       	brpl	.-8      	; 0x1920 <DIO_enuSetPinDirection+0x108>
    1928:	cb 01       	movw	r24, r22
    192a:	84 2b       	or	r24, r20
    192c:	8c 93       	st	X, r24
    192e:	51 c0       	rjmp	.+162    	; 0x19d2 <DIO_enuSetPinDirection+0x1ba>
			break;
		case DIO_PORTC:
			DDRC &= ~(DIO_MASK_BIT<<Copy_u8PinID);
    1930:	a4 e3       	ldi	r26, 0x34	; 52
    1932:	b0 e0       	ldi	r27, 0x00	; 0
    1934:	e4 e3       	ldi	r30, 0x34	; 52
    1936:	f0 e0       	ldi	r31, 0x00	; 0
    1938:	80 81       	ld	r24, Z
    193a:	48 2f       	mov	r20, r24
    193c:	8b 81       	ldd	r24, Y+3	; 0x03
    193e:	28 2f       	mov	r18, r24
    1940:	30 e0       	ldi	r19, 0x00	; 0
    1942:	81 e0       	ldi	r24, 0x01	; 1
    1944:	90 e0       	ldi	r25, 0x00	; 0
    1946:	02 c0       	rjmp	.+4      	; 0x194c <DIO_enuSetPinDirection+0x134>
    1948:	88 0f       	add	r24, r24
    194a:	99 1f       	adc	r25, r25
    194c:	2a 95       	dec	r18
    194e:	e2 f7       	brpl	.-8      	; 0x1948 <DIO_enuSetPinDirection+0x130>
    1950:	80 95       	com	r24
    1952:	84 23       	and	r24, r20
    1954:	8c 93       	st	X, r24
			DDRC |=  (Copy_u8Value << Copy_u8PinID);
    1956:	a4 e3       	ldi	r26, 0x34	; 52
    1958:	b0 e0       	ldi	r27, 0x00	; 0
    195a:	e4 e3       	ldi	r30, 0x34	; 52
    195c:	f0 e0       	ldi	r31, 0x00	; 0
    195e:	80 81       	ld	r24, Z
    1960:	48 2f       	mov	r20, r24
    1962:	8c 81       	ldd	r24, Y+4	; 0x04
    1964:	28 2f       	mov	r18, r24
    1966:	30 e0       	ldi	r19, 0x00	; 0
    1968:	8b 81       	ldd	r24, Y+3	; 0x03
    196a:	88 2f       	mov	r24, r24
    196c:	90 e0       	ldi	r25, 0x00	; 0
    196e:	b9 01       	movw	r22, r18
    1970:	02 c0       	rjmp	.+4      	; 0x1976 <DIO_enuSetPinDirection+0x15e>
    1972:	66 0f       	add	r22, r22
    1974:	77 1f       	adc	r23, r23
    1976:	8a 95       	dec	r24
    1978:	e2 f7       	brpl	.-8      	; 0x1972 <DIO_enuSetPinDirection+0x15a>
    197a:	cb 01       	movw	r24, r22
    197c:	84 2b       	or	r24, r20
    197e:	8c 93       	st	X, r24
    1980:	28 c0       	rjmp	.+80     	; 0x19d2 <DIO_enuSetPinDirection+0x1ba>
			break;
		case DIO_PORTD:
			DDRD &= ~(DIO_MASK_BIT<<Copy_u8PinID);
    1982:	a1 e3       	ldi	r26, 0x31	; 49
    1984:	b0 e0       	ldi	r27, 0x00	; 0
    1986:	e1 e3       	ldi	r30, 0x31	; 49
    1988:	f0 e0       	ldi	r31, 0x00	; 0
    198a:	80 81       	ld	r24, Z
    198c:	48 2f       	mov	r20, r24
    198e:	8b 81       	ldd	r24, Y+3	; 0x03
    1990:	28 2f       	mov	r18, r24
    1992:	30 e0       	ldi	r19, 0x00	; 0
    1994:	81 e0       	ldi	r24, 0x01	; 1
    1996:	90 e0       	ldi	r25, 0x00	; 0
    1998:	02 c0       	rjmp	.+4      	; 0x199e <DIO_enuSetPinDirection+0x186>
    199a:	88 0f       	add	r24, r24
    199c:	99 1f       	adc	r25, r25
    199e:	2a 95       	dec	r18
    19a0:	e2 f7       	brpl	.-8      	; 0x199a <DIO_enuSetPinDirection+0x182>
    19a2:	80 95       	com	r24
    19a4:	84 23       	and	r24, r20
    19a6:	8c 93       	st	X, r24
			DDRD |=  (Copy_u8Value << Copy_u8PinID);
    19a8:	a1 e3       	ldi	r26, 0x31	; 49
    19aa:	b0 e0       	ldi	r27, 0x00	; 0
    19ac:	e1 e3       	ldi	r30, 0x31	; 49
    19ae:	f0 e0       	ldi	r31, 0x00	; 0
    19b0:	80 81       	ld	r24, Z
    19b2:	48 2f       	mov	r20, r24
    19b4:	8c 81       	ldd	r24, Y+4	; 0x04
    19b6:	28 2f       	mov	r18, r24
    19b8:	30 e0       	ldi	r19, 0x00	; 0
    19ba:	8b 81       	ldd	r24, Y+3	; 0x03
    19bc:	88 2f       	mov	r24, r24
    19be:	90 e0       	ldi	r25, 0x00	; 0
    19c0:	b9 01       	movw	r22, r18
    19c2:	02 c0       	rjmp	.+4      	; 0x19c8 <DIO_enuSetPinDirection+0x1b0>
    19c4:	66 0f       	add	r22, r22
    19c6:	77 1f       	adc	r23, r23
    19c8:	8a 95       	dec	r24
    19ca:	e2 f7       	brpl	.-8      	; 0x19c4 <DIO_enuSetPinDirection+0x1ac>
    19cc:	cb 01       	movw	r24, r22
    19ce:	84 2b       	or	r24, r20
    19d0:	8c 93       	st	X, r24
			break;
		}
		Local_enuErrorstate = ES_OK;
    19d2:	81 e0       	ldi	r24, 0x01	; 1
    19d4:	89 83       	std	Y+1, r24	; 0x01
    19d6:	02 c0       	rjmp	.+4      	; 0x19dc <DIO_enuSetPinDirection+0x1c4>
	}
	else
	{
		Local_enuErrorstate = ES_OUT_OF_RANGE;
    19d8:	83 e0       	ldi	r24, 0x03	; 3
    19da:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_enuErrorstate;
    19dc:	89 81       	ldd	r24, Y+1	; 0x01
}
    19de:	26 96       	adiw	r28, 0x06	; 6
    19e0:	0f b6       	in	r0, 0x3f	; 63
    19e2:	f8 94       	cli
    19e4:	de bf       	out	0x3e, r29	; 62
    19e6:	0f be       	out	0x3f, r0	; 63
    19e8:	cd bf       	out	0x3d, r28	; 61
    19ea:	cf 91       	pop	r28
    19ec:	df 91       	pop	r29
    19ee:	08 95       	ret

000019f0 <DIO_enuSetPinValue>:

ES_t DIO_enuSetPinValue(u8 Copy_u8PortID , u8 Copy_u8PinID ,u8 Copy_u8Value)
{
    19f0:	df 93       	push	r29
    19f2:	cf 93       	push	r28
    19f4:	00 d0       	rcall	.+0      	; 0x19f6 <DIO_enuSetPinValue+0x6>
    19f6:	00 d0       	rcall	.+0      	; 0x19f8 <DIO_enuSetPinValue+0x8>
    19f8:	00 d0       	rcall	.+0      	; 0x19fa <DIO_enuSetPinValue+0xa>
    19fa:	cd b7       	in	r28, 0x3d	; 61
    19fc:	de b7       	in	r29, 0x3e	; 62
    19fe:	8a 83       	std	Y+2, r24	; 0x02
    1a00:	6b 83       	std	Y+3, r22	; 0x03
    1a02:	4c 83       	std	Y+4, r20	; 0x04
	ES_t Local_enuErrorstate = ES_NOK;
    1a04:	19 82       	std	Y+1, r1	; 0x01

	if (Copy_u8PortID <= DIO_PORTD &&
    1a06:	8a 81       	ldd	r24, Y+2	; 0x02
    1a08:	84 30       	cpi	r24, 0x04	; 4
    1a0a:	08 f0       	brcs	.+2      	; 0x1a0e <DIO_enuSetPinValue+0x1e>
    1a0c:	d1 c0       	rjmp	.+418    	; 0x1bb0 <DIO_enuSetPinValue+0x1c0>
    1a0e:	8b 81       	ldd	r24, Y+3	; 0x03
    1a10:	88 30       	cpi	r24, 0x08	; 8
    1a12:	08 f0       	brcs	.+2      	; 0x1a16 <DIO_enuSetPinValue+0x26>
    1a14:	cd c0       	rjmp	.+410    	; 0x1bb0 <DIO_enuSetPinValue+0x1c0>
    1a16:	8c 81       	ldd	r24, Y+4	; 0x04
    1a18:	82 30       	cpi	r24, 0x02	; 2
    1a1a:	08 f0       	brcs	.+2      	; 0x1a1e <DIO_enuSetPinValue+0x2e>
    1a1c:	c9 c0       	rjmp	.+402    	; 0x1bb0 <DIO_enuSetPinValue+0x1c0>
			Copy_u8PinID <= DIO_PIN7 &&
			Copy_u8Value <= OUTPUT)
	{
		switch (Copy_u8PortID)
    1a1e:	8a 81       	ldd	r24, Y+2	; 0x02
    1a20:	28 2f       	mov	r18, r24
    1a22:	30 e0       	ldi	r19, 0x00	; 0
    1a24:	3e 83       	std	Y+6, r19	; 0x06
    1a26:	2d 83       	std	Y+5, r18	; 0x05
    1a28:	6d 81       	ldd	r22, Y+5	; 0x05
    1a2a:	7e 81       	ldd	r23, Y+6	; 0x06
    1a2c:	61 30       	cpi	r22, 0x01	; 1
    1a2e:	71 05       	cpc	r23, r1
    1a30:	09 f4       	brne	.+2      	; 0x1a34 <DIO_enuSetPinValue+0x44>
    1a32:	41 c0       	rjmp	.+130    	; 0x1ab6 <DIO_enuSetPinValue+0xc6>
    1a34:	8d 81       	ldd	r24, Y+5	; 0x05
    1a36:	9e 81       	ldd	r25, Y+6	; 0x06
    1a38:	82 30       	cpi	r24, 0x02	; 2
    1a3a:	91 05       	cpc	r25, r1
    1a3c:	34 f4       	brge	.+12     	; 0x1a4a <DIO_enuSetPinValue+0x5a>
    1a3e:	2d 81       	ldd	r18, Y+5	; 0x05
    1a40:	3e 81       	ldd	r19, Y+6	; 0x06
    1a42:	21 15       	cp	r18, r1
    1a44:	31 05       	cpc	r19, r1
    1a46:	71 f0       	breq	.+28     	; 0x1a64 <DIO_enuSetPinValue+0x74>
    1a48:	b0 c0       	rjmp	.+352    	; 0x1baa <DIO_enuSetPinValue+0x1ba>
    1a4a:	6d 81       	ldd	r22, Y+5	; 0x05
    1a4c:	7e 81       	ldd	r23, Y+6	; 0x06
    1a4e:	62 30       	cpi	r22, 0x02	; 2
    1a50:	71 05       	cpc	r23, r1
    1a52:	09 f4       	brne	.+2      	; 0x1a56 <DIO_enuSetPinValue+0x66>
    1a54:	59 c0       	rjmp	.+178    	; 0x1b08 <DIO_enuSetPinValue+0x118>
    1a56:	8d 81       	ldd	r24, Y+5	; 0x05
    1a58:	9e 81       	ldd	r25, Y+6	; 0x06
    1a5a:	83 30       	cpi	r24, 0x03	; 3
    1a5c:	91 05       	cpc	r25, r1
    1a5e:	09 f4       	brne	.+2      	; 0x1a62 <DIO_enuSetPinValue+0x72>
    1a60:	7c c0       	rjmp	.+248    	; 0x1b5a <DIO_enuSetPinValue+0x16a>
    1a62:	a3 c0       	rjmp	.+326    	; 0x1baa <DIO_enuSetPinValue+0x1ba>
		{
		case DIO_PORTA:
			PORTA &= ~(DIO_MASK_BIT<<Copy_u8PinID);
    1a64:	ab e3       	ldi	r26, 0x3B	; 59
    1a66:	b0 e0       	ldi	r27, 0x00	; 0
    1a68:	eb e3       	ldi	r30, 0x3B	; 59
    1a6a:	f0 e0       	ldi	r31, 0x00	; 0
    1a6c:	80 81       	ld	r24, Z
    1a6e:	48 2f       	mov	r20, r24
    1a70:	8b 81       	ldd	r24, Y+3	; 0x03
    1a72:	28 2f       	mov	r18, r24
    1a74:	30 e0       	ldi	r19, 0x00	; 0
    1a76:	81 e0       	ldi	r24, 0x01	; 1
    1a78:	90 e0       	ldi	r25, 0x00	; 0
    1a7a:	02 c0       	rjmp	.+4      	; 0x1a80 <DIO_enuSetPinValue+0x90>
    1a7c:	88 0f       	add	r24, r24
    1a7e:	99 1f       	adc	r25, r25
    1a80:	2a 95       	dec	r18
    1a82:	e2 f7       	brpl	.-8      	; 0x1a7c <DIO_enuSetPinValue+0x8c>
    1a84:	80 95       	com	r24
    1a86:	84 23       	and	r24, r20
    1a88:	8c 93       	st	X, r24
			PORTA |=  (Copy_u8Value << Copy_u8PinID);
    1a8a:	ab e3       	ldi	r26, 0x3B	; 59
    1a8c:	b0 e0       	ldi	r27, 0x00	; 0
    1a8e:	eb e3       	ldi	r30, 0x3B	; 59
    1a90:	f0 e0       	ldi	r31, 0x00	; 0
    1a92:	80 81       	ld	r24, Z
    1a94:	48 2f       	mov	r20, r24
    1a96:	8c 81       	ldd	r24, Y+4	; 0x04
    1a98:	28 2f       	mov	r18, r24
    1a9a:	30 e0       	ldi	r19, 0x00	; 0
    1a9c:	8b 81       	ldd	r24, Y+3	; 0x03
    1a9e:	88 2f       	mov	r24, r24
    1aa0:	90 e0       	ldi	r25, 0x00	; 0
    1aa2:	b9 01       	movw	r22, r18
    1aa4:	02 c0       	rjmp	.+4      	; 0x1aaa <DIO_enuSetPinValue+0xba>
    1aa6:	66 0f       	add	r22, r22
    1aa8:	77 1f       	adc	r23, r23
    1aaa:	8a 95       	dec	r24
    1aac:	e2 f7       	brpl	.-8      	; 0x1aa6 <DIO_enuSetPinValue+0xb6>
    1aae:	cb 01       	movw	r24, r22
    1ab0:	84 2b       	or	r24, r20
    1ab2:	8c 93       	st	X, r24
    1ab4:	7a c0       	rjmp	.+244    	; 0x1baa <DIO_enuSetPinValue+0x1ba>
			break;
		case DIO_PORTB:
			PORTB &= ~(DIO_MASK_BIT<<Copy_u8PinID);
    1ab6:	a8 e3       	ldi	r26, 0x38	; 56
    1ab8:	b0 e0       	ldi	r27, 0x00	; 0
    1aba:	e8 e3       	ldi	r30, 0x38	; 56
    1abc:	f0 e0       	ldi	r31, 0x00	; 0
    1abe:	80 81       	ld	r24, Z
    1ac0:	48 2f       	mov	r20, r24
    1ac2:	8b 81       	ldd	r24, Y+3	; 0x03
    1ac4:	28 2f       	mov	r18, r24
    1ac6:	30 e0       	ldi	r19, 0x00	; 0
    1ac8:	81 e0       	ldi	r24, 0x01	; 1
    1aca:	90 e0       	ldi	r25, 0x00	; 0
    1acc:	02 c0       	rjmp	.+4      	; 0x1ad2 <DIO_enuSetPinValue+0xe2>
    1ace:	88 0f       	add	r24, r24
    1ad0:	99 1f       	adc	r25, r25
    1ad2:	2a 95       	dec	r18
    1ad4:	e2 f7       	brpl	.-8      	; 0x1ace <DIO_enuSetPinValue+0xde>
    1ad6:	80 95       	com	r24
    1ad8:	84 23       	and	r24, r20
    1ada:	8c 93       	st	X, r24
			PORTB |=  (Copy_u8Value << Copy_u8PinID);
    1adc:	a8 e3       	ldi	r26, 0x38	; 56
    1ade:	b0 e0       	ldi	r27, 0x00	; 0
    1ae0:	e8 e3       	ldi	r30, 0x38	; 56
    1ae2:	f0 e0       	ldi	r31, 0x00	; 0
    1ae4:	80 81       	ld	r24, Z
    1ae6:	48 2f       	mov	r20, r24
    1ae8:	8c 81       	ldd	r24, Y+4	; 0x04
    1aea:	28 2f       	mov	r18, r24
    1aec:	30 e0       	ldi	r19, 0x00	; 0
    1aee:	8b 81       	ldd	r24, Y+3	; 0x03
    1af0:	88 2f       	mov	r24, r24
    1af2:	90 e0       	ldi	r25, 0x00	; 0
    1af4:	b9 01       	movw	r22, r18
    1af6:	02 c0       	rjmp	.+4      	; 0x1afc <DIO_enuSetPinValue+0x10c>
    1af8:	66 0f       	add	r22, r22
    1afa:	77 1f       	adc	r23, r23
    1afc:	8a 95       	dec	r24
    1afe:	e2 f7       	brpl	.-8      	; 0x1af8 <DIO_enuSetPinValue+0x108>
    1b00:	cb 01       	movw	r24, r22
    1b02:	84 2b       	or	r24, r20
    1b04:	8c 93       	st	X, r24
    1b06:	51 c0       	rjmp	.+162    	; 0x1baa <DIO_enuSetPinValue+0x1ba>
			break;
		case DIO_PORTC:
			PORTC &= ~(DIO_MASK_BIT<<Copy_u8PinID);
    1b08:	a5 e3       	ldi	r26, 0x35	; 53
    1b0a:	b0 e0       	ldi	r27, 0x00	; 0
    1b0c:	e5 e3       	ldi	r30, 0x35	; 53
    1b0e:	f0 e0       	ldi	r31, 0x00	; 0
    1b10:	80 81       	ld	r24, Z
    1b12:	48 2f       	mov	r20, r24
    1b14:	8b 81       	ldd	r24, Y+3	; 0x03
    1b16:	28 2f       	mov	r18, r24
    1b18:	30 e0       	ldi	r19, 0x00	; 0
    1b1a:	81 e0       	ldi	r24, 0x01	; 1
    1b1c:	90 e0       	ldi	r25, 0x00	; 0
    1b1e:	02 c0       	rjmp	.+4      	; 0x1b24 <DIO_enuSetPinValue+0x134>
    1b20:	88 0f       	add	r24, r24
    1b22:	99 1f       	adc	r25, r25
    1b24:	2a 95       	dec	r18
    1b26:	e2 f7       	brpl	.-8      	; 0x1b20 <DIO_enuSetPinValue+0x130>
    1b28:	80 95       	com	r24
    1b2a:	84 23       	and	r24, r20
    1b2c:	8c 93       	st	X, r24
			PORTC |=  (Copy_u8Value << Copy_u8PinID);
    1b2e:	a5 e3       	ldi	r26, 0x35	; 53
    1b30:	b0 e0       	ldi	r27, 0x00	; 0
    1b32:	e5 e3       	ldi	r30, 0x35	; 53
    1b34:	f0 e0       	ldi	r31, 0x00	; 0
    1b36:	80 81       	ld	r24, Z
    1b38:	48 2f       	mov	r20, r24
    1b3a:	8c 81       	ldd	r24, Y+4	; 0x04
    1b3c:	28 2f       	mov	r18, r24
    1b3e:	30 e0       	ldi	r19, 0x00	; 0
    1b40:	8b 81       	ldd	r24, Y+3	; 0x03
    1b42:	88 2f       	mov	r24, r24
    1b44:	90 e0       	ldi	r25, 0x00	; 0
    1b46:	b9 01       	movw	r22, r18
    1b48:	02 c0       	rjmp	.+4      	; 0x1b4e <DIO_enuSetPinValue+0x15e>
    1b4a:	66 0f       	add	r22, r22
    1b4c:	77 1f       	adc	r23, r23
    1b4e:	8a 95       	dec	r24
    1b50:	e2 f7       	brpl	.-8      	; 0x1b4a <DIO_enuSetPinValue+0x15a>
    1b52:	cb 01       	movw	r24, r22
    1b54:	84 2b       	or	r24, r20
    1b56:	8c 93       	st	X, r24
    1b58:	28 c0       	rjmp	.+80     	; 0x1baa <DIO_enuSetPinValue+0x1ba>
			break;
		case DIO_PORTD:
			PORTD &= ~(DIO_MASK_BIT<<Copy_u8PinID);
    1b5a:	a2 e3       	ldi	r26, 0x32	; 50
    1b5c:	b0 e0       	ldi	r27, 0x00	; 0
    1b5e:	e2 e3       	ldi	r30, 0x32	; 50
    1b60:	f0 e0       	ldi	r31, 0x00	; 0
    1b62:	80 81       	ld	r24, Z
    1b64:	48 2f       	mov	r20, r24
    1b66:	8b 81       	ldd	r24, Y+3	; 0x03
    1b68:	28 2f       	mov	r18, r24
    1b6a:	30 e0       	ldi	r19, 0x00	; 0
    1b6c:	81 e0       	ldi	r24, 0x01	; 1
    1b6e:	90 e0       	ldi	r25, 0x00	; 0
    1b70:	02 c0       	rjmp	.+4      	; 0x1b76 <DIO_enuSetPinValue+0x186>
    1b72:	88 0f       	add	r24, r24
    1b74:	99 1f       	adc	r25, r25
    1b76:	2a 95       	dec	r18
    1b78:	e2 f7       	brpl	.-8      	; 0x1b72 <DIO_enuSetPinValue+0x182>
    1b7a:	80 95       	com	r24
    1b7c:	84 23       	and	r24, r20
    1b7e:	8c 93       	st	X, r24
			PORTD |=  (Copy_u8Value << Copy_u8PinID);
    1b80:	a2 e3       	ldi	r26, 0x32	; 50
    1b82:	b0 e0       	ldi	r27, 0x00	; 0
    1b84:	e2 e3       	ldi	r30, 0x32	; 50
    1b86:	f0 e0       	ldi	r31, 0x00	; 0
    1b88:	80 81       	ld	r24, Z
    1b8a:	48 2f       	mov	r20, r24
    1b8c:	8c 81       	ldd	r24, Y+4	; 0x04
    1b8e:	28 2f       	mov	r18, r24
    1b90:	30 e0       	ldi	r19, 0x00	; 0
    1b92:	8b 81       	ldd	r24, Y+3	; 0x03
    1b94:	88 2f       	mov	r24, r24
    1b96:	90 e0       	ldi	r25, 0x00	; 0
    1b98:	b9 01       	movw	r22, r18
    1b9a:	02 c0       	rjmp	.+4      	; 0x1ba0 <DIO_enuSetPinValue+0x1b0>
    1b9c:	66 0f       	add	r22, r22
    1b9e:	77 1f       	adc	r23, r23
    1ba0:	8a 95       	dec	r24
    1ba2:	e2 f7       	brpl	.-8      	; 0x1b9c <DIO_enuSetPinValue+0x1ac>
    1ba4:	cb 01       	movw	r24, r22
    1ba6:	84 2b       	or	r24, r20
    1ba8:	8c 93       	st	X, r24
			break;
		}
		Local_enuErrorstate = ES_OK;
    1baa:	81 e0       	ldi	r24, 0x01	; 1
    1bac:	89 83       	std	Y+1, r24	; 0x01
    1bae:	02 c0       	rjmp	.+4      	; 0x1bb4 <DIO_enuSetPinValue+0x1c4>
	}
	else
	{
		Local_enuErrorstate = ES_OUT_OF_RANGE;
    1bb0:	83 e0       	ldi	r24, 0x03	; 3
    1bb2:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_enuErrorstate;
    1bb4:	89 81       	ldd	r24, Y+1	; 0x01
}
    1bb6:	26 96       	adiw	r28, 0x06	; 6
    1bb8:	0f b6       	in	r0, 0x3f	; 63
    1bba:	f8 94       	cli
    1bbc:	de bf       	out	0x3e, r29	; 62
    1bbe:	0f be       	out	0x3f, r0	; 63
    1bc0:	cd bf       	out	0x3d, r28	; 61
    1bc2:	cf 91       	pop	r28
    1bc4:	df 91       	pop	r29
    1bc6:	08 95       	ret

00001bc8 <DIO_enuTogPin>:

ES_t DIO_enuTogPin(u8 Copy_u8PortID, u8 Copy_u8PinID )
{
    1bc8:	df 93       	push	r29
    1bca:	cf 93       	push	r28
    1bcc:	00 d0       	rcall	.+0      	; 0x1bce <DIO_enuTogPin+0x6>
    1bce:	00 d0       	rcall	.+0      	; 0x1bd0 <DIO_enuTogPin+0x8>
    1bd0:	0f 92       	push	r0
    1bd2:	cd b7       	in	r28, 0x3d	; 61
    1bd4:	de b7       	in	r29, 0x3e	; 62
    1bd6:	8a 83       	std	Y+2, r24	; 0x02
    1bd8:	6b 83       	std	Y+3, r22	; 0x03
	ES_t Local_enuErrorstate = ES_NOK;
    1bda:	19 82       	std	Y+1, r1	; 0x01

	if (Copy_u8PortID <= DIO_PORTD &&
    1bdc:	8a 81       	ldd	r24, Y+2	; 0x02
    1bde:	84 30       	cpi	r24, 0x04	; 4
    1be0:	08 f0       	brcs	.+2      	; 0x1be4 <DIO_enuTogPin+0x1c>
    1be2:	75 c0       	rjmp	.+234    	; 0x1cce <DIO_enuTogPin+0x106>
    1be4:	8b 81       	ldd	r24, Y+3	; 0x03
    1be6:	88 30       	cpi	r24, 0x08	; 8
    1be8:	08 f0       	brcs	.+2      	; 0x1bec <DIO_enuTogPin+0x24>
    1bea:	71 c0       	rjmp	.+226    	; 0x1cce <DIO_enuTogPin+0x106>
			Copy_u8PinID <= DIO_PIN7)
	{
		switch (Copy_u8PortID)
    1bec:	8a 81       	ldd	r24, Y+2	; 0x02
    1bee:	28 2f       	mov	r18, r24
    1bf0:	30 e0       	ldi	r19, 0x00	; 0
    1bf2:	3d 83       	std	Y+5, r19	; 0x05
    1bf4:	2c 83       	std	Y+4, r18	; 0x04
    1bf6:	8c 81       	ldd	r24, Y+4	; 0x04
    1bf8:	9d 81       	ldd	r25, Y+5	; 0x05
    1bfa:	81 30       	cpi	r24, 0x01	; 1
    1bfc:	91 05       	cpc	r25, r1
    1bfe:	49 f1       	breq	.+82     	; 0x1c52 <DIO_enuTogPin+0x8a>
    1c00:	2c 81       	ldd	r18, Y+4	; 0x04
    1c02:	3d 81       	ldd	r19, Y+5	; 0x05
    1c04:	22 30       	cpi	r18, 0x02	; 2
    1c06:	31 05       	cpc	r19, r1
    1c08:	2c f4       	brge	.+10     	; 0x1c14 <DIO_enuTogPin+0x4c>
    1c0a:	8c 81       	ldd	r24, Y+4	; 0x04
    1c0c:	9d 81       	ldd	r25, Y+5	; 0x05
    1c0e:	00 97       	sbiw	r24, 0x00	; 0
    1c10:	61 f0       	breq	.+24     	; 0x1c2a <DIO_enuTogPin+0x62>
    1c12:	5a c0       	rjmp	.+180    	; 0x1cc8 <DIO_enuTogPin+0x100>
    1c14:	2c 81       	ldd	r18, Y+4	; 0x04
    1c16:	3d 81       	ldd	r19, Y+5	; 0x05
    1c18:	22 30       	cpi	r18, 0x02	; 2
    1c1a:	31 05       	cpc	r19, r1
    1c1c:	71 f1       	breq	.+92     	; 0x1c7a <DIO_enuTogPin+0xb2>
    1c1e:	8c 81       	ldd	r24, Y+4	; 0x04
    1c20:	9d 81       	ldd	r25, Y+5	; 0x05
    1c22:	83 30       	cpi	r24, 0x03	; 3
    1c24:	91 05       	cpc	r25, r1
    1c26:	e9 f1       	breq	.+122    	; 0x1ca2 <DIO_enuTogPin+0xda>
    1c28:	4f c0       	rjmp	.+158    	; 0x1cc8 <DIO_enuTogPin+0x100>
		{
		case DIO_PORTA:
			PORTA ^= (DIO_MASK_BIT<<Copy_u8PinID);
    1c2a:	ab e3       	ldi	r26, 0x3B	; 59
    1c2c:	b0 e0       	ldi	r27, 0x00	; 0
    1c2e:	eb e3       	ldi	r30, 0x3B	; 59
    1c30:	f0 e0       	ldi	r31, 0x00	; 0
    1c32:	80 81       	ld	r24, Z
    1c34:	48 2f       	mov	r20, r24
    1c36:	8b 81       	ldd	r24, Y+3	; 0x03
    1c38:	28 2f       	mov	r18, r24
    1c3a:	30 e0       	ldi	r19, 0x00	; 0
    1c3c:	81 e0       	ldi	r24, 0x01	; 1
    1c3e:	90 e0       	ldi	r25, 0x00	; 0
    1c40:	02 2e       	mov	r0, r18
    1c42:	02 c0       	rjmp	.+4      	; 0x1c48 <DIO_enuTogPin+0x80>
    1c44:	88 0f       	add	r24, r24
    1c46:	99 1f       	adc	r25, r25
    1c48:	0a 94       	dec	r0
    1c4a:	e2 f7       	brpl	.-8      	; 0x1c44 <DIO_enuTogPin+0x7c>
    1c4c:	84 27       	eor	r24, r20
    1c4e:	8c 93       	st	X, r24
    1c50:	3b c0       	rjmp	.+118    	; 0x1cc8 <DIO_enuTogPin+0x100>
			break;
		case DIO_PORTB:
			PORTB ^= (DIO_MASK_BIT<<Copy_u8PinID);
    1c52:	a8 e3       	ldi	r26, 0x38	; 56
    1c54:	b0 e0       	ldi	r27, 0x00	; 0
    1c56:	e8 e3       	ldi	r30, 0x38	; 56
    1c58:	f0 e0       	ldi	r31, 0x00	; 0
    1c5a:	80 81       	ld	r24, Z
    1c5c:	48 2f       	mov	r20, r24
    1c5e:	8b 81       	ldd	r24, Y+3	; 0x03
    1c60:	28 2f       	mov	r18, r24
    1c62:	30 e0       	ldi	r19, 0x00	; 0
    1c64:	81 e0       	ldi	r24, 0x01	; 1
    1c66:	90 e0       	ldi	r25, 0x00	; 0
    1c68:	02 2e       	mov	r0, r18
    1c6a:	02 c0       	rjmp	.+4      	; 0x1c70 <DIO_enuTogPin+0xa8>
    1c6c:	88 0f       	add	r24, r24
    1c6e:	99 1f       	adc	r25, r25
    1c70:	0a 94       	dec	r0
    1c72:	e2 f7       	brpl	.-8      	; 0x1c6c <DIO_enuTogPin+0xa4>
    1c74:	84 27       	eor	r24, r20
    1c76:	8c 93       	st	X, r24
    1c78:	27 c0       	rjmp	.+78     	; 0x1cc8 <DIO_enuTogPin+0x100>
			break;
		case DIO_PORTC:
			PORTC ^= (DIO_MASK_BIT<<Copy_u8PinID);
    1c7a:	a5 e3       	ldi	r26, 0x35	; 53
    1c7c:	b0 e0       	ldi	r27, 0x00	; 0
    1c7e:	e5 e3       	ldi	r30, 0x35	; 53
    1c80:	f0 e0       	ldi	r31, 0x00	; 0
    1c82:	80 81       	ld	r24, Z
    1c84:	48 2f       	mov	r20, r24
    1c86:	8b 81       	ldd	r24, Y+3	; 0x03
    1c88:	28 2f       	mov	r18, r24
    1c8a:	30 e0       	ldi	r19, 0x00	; 0
    1c8c:	81 e0       	ldi	r24, 0x01	; 1
    1c8e:	90 e0       	ldi	r25, 0x00	; 0
    1c90:	02 2e       	mov	r0, r18
    1c92:	02 c0       	rjmp	.+4      	; 0x1c98 <DIO_enuTogPin+0xd0>
    1c94:	88 0f       	add	r24, r24
    1c96:	99 1f       	adc	r25, r25
    1c98:	0a 94       	dec	r0
    1c9a:	e2 f7       	brpl	.-8      	; 0x1c94 <DIO_enuTogPin+0xcc>
    1c9c:	84 27       	eor	r24, r20
    1c9e:	8c 93       	st	X, r24
    1ca0:	13 c0       	rjmp	.+38     	; 0x1cc8 <DIO_enuTogPin+0x100>
			break;
		case DIO_PORTD:
			PORTD ^= (DIO_MASK_BIT<<Copy_u8PinID);
    1ca2:	a2 e3       	ldi	r26, 0x32	; 50
    1ca4:	b0 e0       	ldi	r27, 0x00	; 0
    1ca6:	e2 e3       	ldi	r30, 0x32	; 50
    1ca8:	f0 e0       	ldi	r31, 0x00	; 0
    1caa:	80 81       	ld	r24, Z
    1cac:	48 2f       	mov	r20, r24
    1cae:	8b 81       	ldd	r24, Y+3	; 0x03
    1cb0:	28 2f       	mov	r18, r24
    1cb2:	30 e0       	ldi	r19, 0x00	; 0
    1cb4:	81 e0       	ldi	r24, 0x01	; 1
    1cb6:	90 e0       	ldi	r25, 0x00	; 0
    1cb8:	02 2e       	mov	r0, r18
    1cba:	02 c0       	rjmp	.+4      	; 0x1cc0 <DIO_enuTogPin+0xf8>
    1cbc:	88 0f       	add	r24, r24
    1cbe:	99 1f       	adc	r25, r25
    1cc0:	0a 94       	dec	r0
    1cc2:	e2 f7       	brpl	.-8      	; 0x1cbc <DIO_enuTogPin+0xf4>
    1cc4:	84 27       	eor	r24, r20
    1cc6:	8c 93       	st	X, r24
			break;
		}
		Local_enuErrorstate = ES_OK;
    1cc8:	81 e0       	ldi	r24, 0x01	; 1
    1cca:	89 83       	std	Y+1, r24	; 0x01
    1ccc:	02 c0       	rjmp	.+4      	; 0x1cd2 <DIO_enuTogPin+0x10a>
	}
	else
	{
		Local_enuErrorstate = ES_OUT_OF_RANGE;
    1cce:	83 e0       	ldi	r24, 0x03	; 3
    1cd0:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_enuErrorstate;
    1cd2:	89 81       	ldd	r24, Y+1	; 0x01
}
    1cd4:	0f 90       	pop	r0
    1cd6:	0f 90       	pop	r0
    1cd8:	0f 90       	pop	r0
    1cda:	0f 90       	pop	r0
    1cdc:	0f 90       	pop	r0
    1cde:	cf 91       	pop	r28
    1ce0:	df 91       	pop	r29
    1ce2:	08 95       	ret

00001ce4 <DIO_enuGetPinValue>:

ES_t DIO_enuGetPinValue(u8 Copy_u8PortID ,u8 Copy_u8PinID , u8 * Copy_pu8Value)
{
    1ce4:	df 93       	push	r29
    1ce6:	cf 93       	push	r28
    1ce8:	cd b7       	in	r28, 0x3d	; 61
    1cea:	de b7       	in	r29, 0x3e	; 62
    1cec:	27 97       	sbiw	r28, 0x07	; 7
    1cee:	0f b6       	in	r0, 0x3f	; 63
    1cf0:	f8 94       	cli
    1cf2:	de bf       	out	0x3e, r29	; 62
    1cf4:	0f be       	out	0x3f, r0	; 63
    1cf6:	cd bf       	out	0x3d, r28	; 61
    1cf8:	8a 83       	std	Y+2, r24	; 0x02
    1cfa:	6b 83       	std	Y+3, r22	; 0x03
    1cfc:	5d 83       	std	Y+5, r21	; 0x05
    1cfe:	4c 83       	std	Y+4, r20	; 0x04
	ES_t Local_enuErrorstate = ES_NOK;
    1d00:	19 82       	std	Y+1, r1	; 0x01

	if (Copy_pu8Value != NULL)
    1d02:	8c 81       	ldd	r24, Y+4	; 0x04
    1d04:	9d 81       	ldd	r25, Y+5	; 0x05
    1d06:	00 97       	sbiw	r24, 0x00	; 0
    1d08:	09 f4       	brne	.+2      	; 0x1d0c <DIO_enuGetPinValue+0x28>
    1d0a:	7e c0       	rjmp	.+252    	; 0x1e08 <DIO_enuGetPinValue+0x124>
	{
		if (Copy_u8PortID <= DIO_PORTD &&
    1d0c:	8a 81       	ldd	r24, Y+2	; 0x02
    1d0e:	84 30       	cpi	r24, 0x04	; 4
    1d10:	08 f0       	brcs	.+2      	; 0x1d14 <DIO_enuGetPinValue+0x30>
    1d12:	77 c0       	rjmp	.+238    	; 0x1e02 <DIO_enuGetPinValue+0x11e>
    1d14:	8b 81       	ldd	r24, Y+3	; 0x03
    1d16:	88 30       	cpi	r24, 0x08	; 8
    1d18:	08 f0       	brcs	.+2      	; 0x1d1c <DIO_enuGetPinValue+0x38>
    1d1a:	73 c0       	rjmp	.+230    	; 0x1e02 <DIO_enuGetPinValue+0x11e>
				Copy_u8PinID <= DIO_PIN7)
		{
			switch (Copy_u8PortID)
    1d1c:	8a 81       	ldd	r24, Y+2	; 0x02
    1d1e:	28 2f       	mov	r18, r24
    1d20:	30 e0       	ldi	r19, 0x00	; 0
    1d22:	3f 83       	std	Y+7, r19	; 0x07
    1d24:	2e 83       	std	Y+6, r18	; 0x06
    1d26:	4e 81       	ldd	r20, Y+6	; 0x06
    1d28:	5f 81       	ldd	r21, Y+7	; 0x07
    1d2a:	41 30       	cpi	r20, 0x01	; 1
    1d2c:	51 05       	cpc	r21, r1
    1d2e:	59 f1       	breq	.+86     	; 0x1d86 <DIO_enuGetPinValue+0xa2>
    1d30:	8e 81       	ldd	r24, Y+6	; 0x06
    1d32:	9f 81       	ldd	r25, Y+7	; 0x07
    1d34:	82 30       	cpi	r24, 0x02	; 2
    1d36:	91 05       	cpc	r25, r1
    1d38:	34 f4       	brge	.+12     	; 0x1d46 <DIO_enuGetPinValue+0x62>
    1d3a:	2e 81       	ldd	r18, Y+6	; 0x06
    1d3c:	3f 81       	ldd	r19, Y+7	; 0x07
    1d3e:	21 15       	cp	r18, r1
    1d40:	31 05       	cpc	r19, r1
    1d42:	69 f0       	breq	.+26     	; 0x1d5e <DIO_enuGetPinValue+0x7a>
    1d44:	5b c0       	rjmp	.+182    	; 0x1dfc <DIO_enuGetPinValue+0x118>
    1d46:	4e 81       	ldd	r20, Y+6	; 0x06
    1d48:	5f 81       	ldd	r21, Y+7	; 0x07
    1d4a:	42 30       	cpi	r20, 0x02	; 2
    1d4c:	51 05       	cpc	r21, r1
    1d4e:	79 f1       	breq	.+94     	; 0x1dae <DIO_enuGetPinValue+0xca>
    1d50:	8e 81       	ldd	r24, Y+6	; 0x06
    1d52:	9f 81       	ldd	r25, Y+7	; 0x07
    1d54:	83 30       	cpi	r24, 0x03	; 3
    1d56:	91 05       	cpc	r25, r1
    1d58:	09 f4       	brne	.+2      	; 0x1d5c <DIO_enuGetPinValue+0x78>
    1d5a:	3d c0       	rjmp	.+122    	; 0x1dd6 <DIO_enuGetPinValue+0xf2>
    1d5c:	4f c0       	rjmp	.+158    	; 0x1dfc <DIO_enuGetPinValue+0x118>
			{
			case DIO_PORTA:
				*Copy_pu8Value = ((PINA>>Copy_u8PinID) &DIO_MASK_BIT);
    1d5e:	e9 e3       	ldi	r30, 0x39	; 57
    1d60:	f0 e0       	ldi	r31, 0x00	; 0
    1d62:	80 81       	ld	r24, Z
    1d64:	28 2f       	mov	r18, r24
    1d66:	30 e0       	ldi	r19, 0x00	; 0
    1d68:	8b 81       	ldd	r24, Y+3	; 0x03
    1d6a:	88 2f       	mov	r24, r24
    1d6c:	90 e0       	ldi	r25, 0x00	; 0
    1d6e:	a9 01       	movw	r20, r18
    1d70:	02 c0       	rjmp	.+4      	; 0x1d76 <DIO_enuGetPinValue+0x92>
    1d72:	55 95       	asr	r21
    1d74:	47 95       	ror	r20
    1d76:	8a 95       	dec	r24
    1d78:	e2 f7       	brpl	.-8      	; 0x1d72 <DIO_enuGetPinValue+0x8e>
    1d7a:	ca 01       	movw	r24, r20
    1d7c:	81 70       	andi	r24, 0x01	; 1
    1d7e:	ec 81       	ldd	r30, Y+4	; 0x04
    1d80:	fd 81       	ldd	r31, Y+5	; 0x05
    1d82:	80 83       	st	Z, r24
    1d84:	3b c0       	rjmp	.+118    	; 0x1dfc <DIO_enuGetPinValue+0x118>
				break;
			case DIO_PORTB:
				*Copy_pu8Value = ((PINB>>Copy_u8PinID) &DIO_MASK_BIT);
    1d86:	e6 e3       	ldi	r30, 0x36	; 54
    1d88:	f0 e0       	ldi	r31, 0x00	; 0
    1d8a:	80 81       	ld	r24, Z
    1d8c:	28 2f       	mov	r18, r24
    1d8e:	30 e0       	ldi	r19, 0x00	; 0
    1d90:	8b 81       	ldd	r24, Y+3	; 0x03
    1d92:	88 2f       	mov	r24, r24
    1d94:	90 e0       	ldi	r25, 0x00	; 0
    1d96:	a9 01       	movw	r20, r18
    1d98:	02 c0       	rjmp	.+4      	; 0x1d9e <DIO_enuGetPinValue+0xba>
    1d9a:	55 95       	asr	r21
    1d9c:	47 95       	ror	r20
    1d9e:	8a 95       	dec	r24
    1da0:	e2 f7       	brpl	.-8      	; 0x1d9a <DIO_enuGetPinValue+0xb6>
    1da2:	ca 01       	movw	r24, r20
    1da4:	81 70       	andi	r24, 0x01	; 1
    1da6:	ec 81       	ldd	r30, Y+4	; 0x04
    1da8:	fd 81       	ldd	r31, Y+5	; 0x05
    1daa:	80 83       	st	Z, r24
    1dac:	27 c0       	rjmp	.+78     	; 0x1dfc <DIO_enuGetPinValue+0x118>
				break;
			case DIO_PORTC:
				*Copy_pu8Value = ((PINC>>Copy_u8PinID) &DIO_MASK_BIT);
    1dae:	e3 e3       	ldi	r30, 0x33	; 51
    1db0:	f0 e0       	ldi	r31, 0x00	; 0
    1db2:	80 81       	ld	r24, Z
    1db4:	28 2f       	mov	r18, r24
    1db6:	30 e0       	ldi	r19, 0x00	; 0
    1db8:	8b 81       	ldd	r24, Y+3	; 0x03
    1dba:	88 2f       	mov	r24, r24
    1dbc:	90 e0       	ldi	r25, 0x00	; 0
    1dbe:	a9 01       	movw	r20, r18
    1dc0:	02 c0       	rjmp	.+4      	; 0x1dc6 <DIO_enuGetPinValue+0xe2>
    1dc2:	55 95       	asr	r21
    1dc4:	47 95       	ror	r20
    1dc6:	8a 95       	dec	r24
    1dc8:	e2 f7       	brpl	.-8      	; 0x1dc2 <DIO_enuGetPinValue+0xde>
    1dca:	ca 01       	movw	r24, r20
    1dcc:	81 70       	andi	r24, 0x01	; 1
    1dce:	ec 81       	ldd	r30, Y+4	; 0x04
    1dd0:	fd 81       	ldd	r31, Y+5	; 0x05
    1dd2:	80 83       	st	Z, r24
    1dd4:	13 c0       	rjmp	.+38     	; 0x1dfc <DIO_enuGetPinValue+0x118>
				break;
			case DIO_PORTD:
				*Copy_pu8Value = ((PIND>>Copy_u8PinID) &DIO_MASK_BIT);
    1dd6:	e0 e3       	ldi	r30, 0x30	; 48
    1dd8:	f0 e0       	ldi	r31, 0x00	; 0
    1dda:	80 81       	ld	r24, Z
    1ddc:	28 2f       	mov	r18, r24
    1dde:	30 e0       	ldi	r19, 0x00	; 0
    1de0:	8b 81       	ldd	r24, Y+3	; 0x03
    1de2:	88 2f       	mov	r24, r24
    1de4:	90 e0       	ldi	r25, 0x00	; 0
    1de6:	a9 01       	movw	r20, r18
    1de8:	02 c0       	rjmp	.+4      	; 0x1dee <DIO_enuGetPinValue+0x10a>
    1dea:	55 95       	asr	r21
    1dec:	47 95       	ror	r20
    1dee:	8a 95       	dec	r24
    1df0:	e2 f7       	brpl	.-8      	; 0x1dea <DIO_enuGetPinValue+0x106>
    1df2:	ca 01       	movw	r24, r20
    1df4:	81 70       	andi	r24, 0x01	; 1
    1df6:	ec 81       	ldd	r30, Y+4	; 0x04
    1df8:	fd 81       	ldd	r31, Y+5	; 0x05
    1dfa:	80 83       	st	Z, r24
				break;
			}
			Local_enuErrorstate = ES_OK;
    1dfc:	81 e0       	ldi	r24, 0x01	; 1
    1dfe:	89 83       	std	Y+1, r24	; 0x01
    1e00:	05 c0       	rjmp	.+10     	; 0x1e0c <DIO_enuGetPinValue+0x128>
		}
		else
		{
			Local_enuErrorstate = ES_OUT_OF_RANGE;
    1e02:	83 e0       	ldi	r24, 0x03	; 3
    1e04:	89 83       	std	Y+1, r24	; 0x01
    1e06:	02 c0       	rjmp	.+4      	; 0x1e0c <DIO_enuGetPinValue+0x128>
		}
	}
	else
	{
		Local_enuErrorstate = ES_NULL_POINTER;
    1e08:	82 e0       	ldi	r24, 0x02	; 2
    1e0a:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_enuErrorstate;
    1e0c:	89 81       	ldd	r24, Y+1	; 0x01
}
    1e0e:	27 96       	adiw	r28, 0x07	; 7
    1e10:	0f b6       	in	r0, 0x3f	; 63
    1e12:	f8 94       	cli
    1e14:	de bf       	out	0x3e, r29	; 62
    1e16:	0f be       	out	0x3f, r0	; 63
    1e18:	cd bf       	out	0x3d, r28	; 61
    1e1a:	cf 91       	pop	r28
    1e1c:	df 91       	pop	r29
    1e1e:	08 95       	ret

00001e20 <ADC_Init>:
#include "ADC_config.h"
#include "ADC_priv.h"


ES_t ADC_Init()
{
    1e20:	df 93       	push	r29
    1e22:	cf 93       	push	r28
    1e24:	0f 92       	push	r0
    1e26:	cd b7       	in	r28, 0x3d	; 61
    1e28:	de b7       	in	r29, 0x3e	; 62
	ES_t Local_enuErrorState = ES_NOK;
    1e2a:	19 82       	std	Y+1, r1	; 0x01
	// VOLTAGE REFERENCE
   #if ADC_REFERENCE_VOLTAGE == VREF_AVCC
	ADMUX |= (1<<REFS0);
    1e2c:	a7 e2       	ldi	r26, 0x27	; 39
    1e2e:	b0 e0       	ldi	r27, 0x00	; 0
    1e30:	e7 e2       	ldi	r30, 0x27	; 39
    1e32:	f0 e0       	ldi	r31, 0x00	; 0
    1e34:	80 81       	ld	r24, Z
    1e36:	80 64       	ori	r24, 0x40	; 64
    1e38:	8c 93       	st	X, r24
	ADMUX &= ~(1<<REFS1);
    1e3a:	a7 e2       	ldi	r26, 0x27	; 39
    1e3c:	b0 e0       	ldi	r27, 0x00	; 0
    1e3e:	e7 e2       	ldi	r30, 0x27	; 39
    1e40:	f0 e0       	ldi	r31, 0x00	; 0
    1e42:	80 81       	ld	r24, Z
    1e44:	8f 77       	andi	r24, 0x7F	; 127
    1e46:	8c 93       	st	X, r24
	ADMUX &= ~(1<<REFS0);
	ADMUX &= ~(1<<REFS1);
  #endif
	//ADC Adjustment
  #if ADC_ADJUSTMENT == RIGHT_ADUSTMENT
	ADMUX &= ~(1<<ADLAR);
    1e48:	a7 e2       	ldi	r26, 0x27	; 39
    1e4a:	b0 e0       	ldi	r27, 0x00	; 0
    1e4c:	e7 e2       	ldi	r30, 0x27	; 39
    1e4e:	f0 e0       	ldi	r31, 0x00	; 0
    1e50:	80 81       	ld	r24, Z
    1e52:	8f 7d       	andi	r24, 0xDF	; 223
    1e54:	8c 93       	st	X, r24
	ADMUX |= (1<<ADLAR);
  #endif


	  /***ADC Prescalar**/
	  ADCSRA &= ~(7<<0); //clear bit 0,1,2
    1e56:	a6 e2       	ldi	r26, 0x26	; 38
    1e58:	b0 e0       	ldi	r27, 0x00	; 0
    1e5a:	e6 e2       	ldi	r30, 0x26	; 38
    1e5c:	f0 e0       	ldi	r31, 0x00	; 0
    1e5e:	80 81       	ld	r24, Z
    1e60:	88 7f       	andi	r24, 0xF8	; 248
    1e62:	8c 93       	st	X, r24
  #elif ADC_PRESCALAR_SELECTION == PRESCALAR_DIVISION_FACTOR_16
	  ADCSRA |= 4;
  #elif ADC_PRESCALAR_SELECTION == PRESCALAR_DIVISION_FACTOR_32
	  ADCSRA |= 5;
  #elif ADC_PRESCALAR_SELECTION == PRESCALAR_DIVISION_FACTOR_64
	  ADCSRA |= 6;
    1e64:	a6 e2       	ldi	r26, 0x26	; 38
    1e66:	b0 e0       	ldi	r27, 0x00	; 0
    1e68:	e6 e2       	ldi	r30, 0x26	; 38
    1e6a:	f0 e0       	ldi	r31, 0x00	; 0
    1e6c:	80 81       	ld	r24, Z
    1e6e:	86 60       	ori	r24, 0x06	; 6
    1e70:	8c 93       	st	X, r24
  #elif ADC_PRESCALAR_SELECTION == PRESCALAR_DIVISION_FACTOR_128
	  ADCSRA |= 7;
  #endif

	  /**Enable ADC***/
	  ADCSRA |= (1<<ADEN);
    1e72:	a6 e2       	ldi	r26, 0x26	; 38
    1e74:	b0 e0       	ldi	r27, 0x00	; 0
    1e76:	e6 e2       	ldi	r30, 0x26	; 38
    1e78:	f0 e0       	ldi	r31, 0x00	; 0
    1e7a:	80 81       	ld	r24, Z
    1e7c:	80 68       	ori	r24, 0x80	; 128
    1e7e:	8c 93       	st	X, r24

	  Local_enuErrorState = ES_OK;
    1e80:	81 e0       	ldi	r24, 0x01	; 1
    1e82:	89 83       	std	Y+1, r24	; 0x01

	  return Local_enuErrorState;
    1e84:	89 81       	ldd	r24, Y+1	; 0x01


}
    1e86:	0f 90       	pop	r0
    1e88:	cf 91       	pop	r28
    1e8a:	df 91       	pop	r29
    1e8c:	08 95       	ret

00001e8e <ADC_Conversion>:
ES_t ADC_Conversion()
{
    1e8e:	df 93       	push	r29
    1e90:	cf 93       	push	r28
    1e92:	0f 92       	push	r0
    1e94:	cd b7       	in	r28, 0x3d	; 61
    1e96:	de b7       	in	r29, 0x3e	; 62
	ES_t Local_enuErrorState = ES_NOK;
    1e98:	19 82       	std	Y+1, r1	; 0x01
	 ADCSRA |= (1<<ADSC);
    1e9a:	a6 e2       	ldi	r26, 0x26	; 38
    1e9c:	b0 e0       	ldi	r27, 0x00	; 0
    1e9e:	e6 e2       	ldi	r30, 0x26	; 38
    1ea0:	f0 e0       	ldi	r31, 0x00	; 0
    1ea2:	80 81       	ld	r24, Z
    1ea4:	80 64       	ori	r24, 0x40	; 64
    1ea6:	8c 93       	st	X, r24

  	Local_enuErrorState = ES_OK;
    1ea8:	81 e0       	ldi	r24, 0x01	; 1
    1eaa:	89 83       	std	Y+1, r24	; 0x01
	 return Local_enuErrorState;
    1eac:	89 81       	ldd	r24, Y+1	; 0x01
}
    1eae:	0f 90       	pop	r0
    1eb0:	cf 91       	pop	r28
    1eb2:	df 91       	pop	r29
    1eb4:	08 95       	ret

00001eb6 <ADC_enuPollingSystem>:
ES_t ADC_enuPollingSystem(void)
{
    1eb6:	df 93       	push	r29
    1eb8:	cf 93       	push	r28
    1eba:	0f 92       	push	r0
    1ebc:	cd b7       	in	r28, 0x3d	; 61
    1ebe:	de b7       	in	r29, 0x3e	; 62
	ES_t Local_enuErrorState = ES_NOK;
    1ec0:	19 82       	std	Y+1, r1	; 0x01

	while( ( (ADCSRA >> ADIF)&1 ) == 0);
    1ec2:	e6 e2       	ldi	r30, 0x26	; 38
    1ec4:	f0 e0       	ldi	r31, 0x00	; 0
    1ec6:	80 81       	ld	r24, Z
    1ec8:	82 95       	swap	r24
    1eca:	8f 70       	andi	r24, 0x0F	; 15
    1ecc:	88 2f       	mov	r24, r24
    1ece:	90 e0       	ldi	r25, 0x00	; 0
    1ed0:	81 70       	andi	r24, 0x01	; 1
    1ed2:	90 70       	andi	r25, 0x00	; 0
    1ed4:	00 97       	sbiw	r24, 0x00	; 0
    1ed6:	a9 f3       	breq	.-22     	; 0x1ec2 <ADC_enuPollingSystem+0xc>
    ADCSRA |= (1<<ADIF);
    1ed8:	a6 e2       	ldi	r26, 0x26	; 38
    1eda:	b0 e0       	ldi	r27, 0x00	; 0
    1edc:	e6 e2       	ldi	r30, 0x26	; 38
    1ede:	f0 e0       	ldi	r31, 0x00	; 0
    1ee0:	80 81       	ld	r24, Z
    1ee2:	80 61       	ori	r24, 0x10	; 16
    1ee4:	8c 93       	st	X, r24
	 Local_enuErrorState = ES_OK;
    1ee6:	81 e0       	ldi	r24, 0x01	; 1
    1ee8:	89 83       	std	Y+1, r24	; 0x01

	return Local_enuErrorState;
    1eea:	89 81       	ldd	r24, Y+1	; 0x01

}
    1eec:	0f 90       	pop	r0
    1eee:	cf 91       	pop	r28
    1ef0:	df 91       	pop	r29
    1ef2:	08 95       	ret

00001ef4 <ADC_enuReadHighValue>:

ES_t ADC_enuReadHighValue(u8 * Copy_pu8Value)
{
    1ef4:	df 93       	push	r29
    1ef6:	cf 93       	push	r28
    1ef8:	00 d0       	rcall	.+0      	; 0x1efa <ADC_enuReadHighValue+0x6>
    1efa:	0f 92       	push	r0
    1efc:	cd b7       	in	r28, 0x3d	; 61
    1efe:	de b7       	in	r29, 0x3e	; 62
    1f00:	9b 83       	std	Y+3, r25	; 0x03
    1f02:	8a 83       	std	Y+2, r24	; 0x02
	ES_t Local_enuErrorState = ES_NOK;
    1f04:	19 82       	std	Y+1, r1	; 0x01

    #if ADC_ADJUSTMENT == RIGHT_ADUSTMENT
	* Copy_pu8Value = ADCL >> 2;
    1f06:	e4 e2       	ldi	r30, 0x24	; 36
    1f08:	f0 e0       	ldi	r31, 0x00	; 0
    1f0a:	80 81       	ld	r24, Z
    1f0c:	86 95       	lsr	r24
    1f0e:	86 95       	lsr	r24
    1f10:	ea 81       	ldd	r30, Y+2	; 0x02
    1f12:	fb 81       	ldd	r31, Y+3	; 0x03
    1f14:	80 83       	st	Z, r24
	* Copy_pu8Value |= (ADCH << 6);
    1f16:	ea 81       	ldd	r30, Y+2	; 0x02
    1f18:	fb 81       	ldd	r31, Y+3	; 0x03
    1f1a:	80 81       	ld	r24, Z
    1f1c:	28 2f       	mov	r18, r24
    1f1e:	e5 e2       	ldi	r30, 0x25	; 37
    1f20:	f0 e0       	ldi	r31, 0x00	; 0
    1f22:	80 81       	ld	r24, Z
    1f24:	88 2f       	mov	r24, r24
    1f26:	90 e0       	ldi	r25, 0x00	; 0
    1f28:	00 24       	eor	r0, r0
    1f2a:	96 95       	lsr	r25
    1f2c:	87 95       	ror	r24
    1f2e:	07 94       	ror	r0
    1f30:	96 95       	lsr	r25
    1f32:	87 95       	ror	r24
    1f34:	07 94       	ror	r0
    1f36:	98 2f       	mov	r25, r24
    1f38:	80 2d       	mov	r24, r0
    1f3a:	82 2b       	or	r24, r18
    1f3c:	ea 81       	ldd	r30, Y+2	; 0x02
    1f3e:	fb 81       	ldd	r31, Y+3	; 0x03
    1f40:	80 83       	st	Z, r24
    #elif ADC_ADJUSTMENT == LEFT_ADUSTMENT
	* Copy_pu8Value = ADCH;
    #endif

	 Local_enuErrorState = ES_OK;
    1f42:	81 e0       	ldi	r24, 0x01	; 1
    1f44:	89 83       	std	Y+1, r24	; 0x01
		return Local_enuErrorState;
    1f46:	89 81       	ldd	r24, Y+1	; 0x01
}
    1f48:	0f 90       	pop	r0
    1f4a:	0f 90       	pop	r0
    1f4c:	0f 90       	pop	r0
    1f4e:	cf 91       	pop	r28
    1f50:	df 91       	pop	r29
    1f52:	08 95       	ret

00001f54 <ADC_enuRead>:

ES_t ADC_enuRead(u16 * Copy_pu16Value)
{
    1f54:	df 93       	push	r29
    1f56:	cf 93       	push	r28
    1f58:	00 d0       	rcall	.+0      	; 0x1f5a <ADC_enuRead+0x6>
    1f5a:	0f 92       	push	r0
    1f5c:	cd b7       	in	r28, 0x3d	; 61
    1f5e:	de b7       	in	r29, 0x3e	; 62
    1f60:	9b 83       	std	Y+3, r25	; 0x03
    1f62:	8a 83       	std	Y+2, r24	; 0x02
	ES_t Local_enuErrorState = ES_NOK;
    1f64:	19 82       	std	Y+1, r1	; 0x01

    #if ADC_ADJUSTMENT == RIGHT_ADUSTMENT
	* Copy_pu16Value = ADCL;
    1f66:	e4 e2       	ldi	r30, 0x24	; 36
    1f68:	f0 e0       	ldi	r31, 0x00	; 0
    1f6a:	80 81       	ld	r24, Z
    1f6c:	88 2f       	mov	r24, r24
    1f6e:	90 e0       	ldi	r25, 0x00	; 0
    1f70:	ea 81       	ldd	r30, Y+2	; 0x02
    1f72:	fb 81       	ldd	r31, Y+3	; 0x03
    1f74:	91 83       	std	Z+1, r25	; 0x01
    1f76:	80 83       	st	Z, r24
	* Copy_pu16Value |= ( (u16)ADCH << 8 );
    1f78:	ea 81       	ldd	r30, Y+2	; 0x02
    1f7a:	fb 81       	ldd	r31, Y+3	; 0x03
    1f7c:	20 81       	ld	r18, Z
    1f7e:	31 81       	ldd	r19, Z+1	; 0x01
    1f80:	e5 e2       	ldi	r30, 0x25	; 37
    1f82:	f0 e0       	ldi	r31, 0x00	; 0
    1f84:	80 81       	ld	r24, Z
    1f86:	88 2f       	mov	r24, r24
    1f88:	90 e0       	ldi	r25, 0x00	; 0
    1f8a:	98 2f       	mov	r25, r24
    1f8c:	88 27       	eor	r24, r24
    1f8e:	82 2b       	or	r24, r18
    1f90:	93 2b       	or	r25, r19
    1f92:	ea 81       	ldd	r30, Y+2	; 0x02
    1f94:	fb 81       	ldd	r31, Y+3	; 0x03
    1f96:	91 83       	std	Z+1, r25	; 0x01
    1f98:	80 83       	st	Z, r24
   #elif ADC_ADJUSTMENT == LEFT_ADUSTMENT
	* Copy_pu16Value = ADC;
   #endif

	  Local_enuErrorState = ES_OK;
    1f9a:	81 e0       	ldi	r24, 0x01	; 1
    1f9c:	89 83       	std	Y+1, r24	; 0x01
		return Local_enuErrorState;
    1f9e:	89 81       	ldd	r24, Y+1	; 0x01
}
    1fa0:	0f 90       	pop	r0
    1fa2:	0f 90       	pop	r0
    1fa4:	0f 90       	pop	r0
    1fa6:	cf 91       	pop	r28
    1fa8:	df 91       	pop	r29
    1faa:	08 95       	ret

00001fac <ADC_enuCallBack>:

ES_t ADC_enuCallBack(void(*Copy_pfunAppFun)(void*) , void * Copy_pvidAppParameter)
{
    1fac:	df 93       	push	r29
    1fae:	cf 93       	push	r28
    1fb0:	00 d0       	rcall	.+0      	; 0x1fb2 <ADC_enuCallBack+0x6>
    1fb2:	00 d0       	rcall	.+0      	; 0x1fb4 <ADC_enuCallBack+0x8>
    1fb4:	0f 92       	push	r0
    1fb6:	cd b7       	in	r28, 0x3d	; 61
    1fb8:	de b7       	in	r29, 0x3e	; 62
    1fba:	9b 83       	std	Y+3, r25	; 0x03
    1fbc:	8a 83       	std	Y+2, r24	; 0x02
    1fbe:	7d 83       	std	Y+5, r23	; 0x05
    1fc0:	6c 83       	std	Y+4, r22	; 0x04
	ES_t Local_enuErrorState = ES_NOK;
    1fc2:	19 82       	std	Y+1, r1	; 0x01
		return Local_enuErrorState;
    1fc4:	89 81       	ldd	r24, Y+1	; 0x01
}
    1fc6:	0f 90       	pop	r0
    1fc8:	0f 90       	pop	r0
    1fca:	0f 90       	pop	r0
    1fcc:	0f 90       	pop	r0
    1fce:	0f 90       	pop	r0
    1fd0:	cf 91       	pop	r28
    1fd2:	df 91       	pop	r29
    1fd4:	08 95       	ret

00001fd6 <ADC_enuSelectChannel>:

ES_t ADC_enuSelectChannel(u8 Copy_u8ChannelID)
{
    1fd6:	df 93       	push	r29
    1fd8:	cf 93       	push	r28
    1fda:	00 d0       	rcall	.+0      	; 0x1fdc <ADC_enuSelectChannel+0x6>
    1fdc:	cd b7       	in	r28, 0x3d	; 61
    1fde:	de b7       	in	r29, 0x3e	; 62
    1fe0:	8a 83       	std	Y+2, r24	; 0x02
	ES_t Local_enuErrorState = ES_NOK;
    1fe2:	19 82       	std	Y+1, r1	; 0x01
	if( Copy_u8ChannelID >= 0 &&  Copy_u8ChannelID < 30)
    1fe4:	8a 81       	ldd	r24, Y+2	; 0x02
    1fe6:	8e 31       	cpi	r24, 0x1E	; 30
    1fe8:	88 f4       	brcc	.+34     	; 0x200c <ADC_enuSelectChannel+0x36>
	{
		ADMUX &= ~(31<<0); //clear bit 0,1,2,3
    1fea:	a7 e2       	ldi	r26, 0x27	; 39
    1fec:	b0 e0       	ldi	r27, 0x00	; 0
    1fee:	e7 e2       	ldi	r30, 0x27	; 39
    1ff0:	f0 e0       	ldi	r31, 0x00	; 0
    1ff2:	80 81       	ld	r24, Z
    1ff4:	80 7e       	andi	r24, 0xE0	; 224
    1ff6:	8c 93       	st	X, r24
		ADMUX |= Copy_u8ChannelID;
    1ff8:	a7 e2       	ldi	r26, 0x27	; 39
    1ffa:	b0 e0       	ldi	r27, 0x00	; 0
    1ffc:	e7 e2       	ldi	r30, 0x27	; 39
    1ffe:	f0 e0       	ldi	r31, 0x00	; 0
    2000:	90 81       	ld	r25, Z
    2002:	8a 81       	ldd	r24, Y+2	; 0x02
    2004:	89 2b       	or	r24, r25
    2006:	8c 93       	st	X, r24
		Local_enuErrorState = ES_OK;
    2008:	81 e0       	ldi	r24, 0x01	; 1
    200a:	89 83       	std	Y+1, r24	; 0x01

	}
		return Local_enuErrorState;
    200c:	89 81       	ldd	r24, Y+1	; 0x01
}
    200e:	0f 90       	pop	r0
    2010:	0f 90       	pop	r0
    2012:	cf 91       	pop	r28
    2014:	df 91       	pop	r29
    2016:	08 95       	ret

00002018 <ADC_enuEnableTriggeringMode>:

ES_t ADC_enuEnableTriggeringMode(u8 Copy_u8TriggeringSource)
{
    2018:	df 93       	push	r29
    201a:	cf 93       	push	r28
    201c:	00 d0       	rcall	.+0      	; 0x201e <ADC_enuEnableTriggeringMode+0x6>
    201e:	00 d0       	rcall	.+0      	; 0x2020 <ADC_enuEnableTriggeringMode+0x8>
    2020:	cd b7       	in	r28, 0x3d	; 61
    2022:	de b7       	in	r29, 0x3e	; 62
    2024:	8a 83       	std	Y+2, r24	; 0x02
	ES_t Local_enuErrorState = ES_NOK;
    2026:	19 82       	std	Y+1, r1	; 0x01

		ADCSRA &=~(1<<ADATE);
    2028:	a6 e2       	ldi	r26, 0x26	; 38
    202a:	b0 e0       	ldi	r27, 0x00	; 0
    202c:	e6 e2       	ldi	r30, 0x26	; 38
    202e:	f0 e0       	ldi	r31, 0x00	; 0
    2030:	80 81       	ld	r24, Z
    2032:	8f 7d       	andi	r24, 0xDF	; 223
    2034:	8c 93       	st	X, r24

		switch(Copy_u8TriggeringSource)
    2036:	8a 81       	ldd	r24, Y+2	; 0x02
    2038:	28 2f       	mov	r18, r24
    203a:	30 e0       	ldi	r19, 0x00	; 0
    203c:	3c 83       	std	Y+4, r19	; 0x04
    203e:	2b 83       	std	Y+3, r18	; 0x03
    2040:	8b 81       	ldd	r24, Y+3	; 0x03
    2042:	9c 81       	ldd	r25, Y+4	; 0x04
    2044:	8a 30       	cpi	r24, 0x0A	; 10
    2046:	91 05       	cpc	r25, r1
    2048:	31 f0       	breq	.+12     	; 0x2056 <ADC_enuEnableTriggeringMode+0x3e>
    204a:	2b 81       	ldd	r18, Y+3	; 0x03
    204c:	3c 81       	ldd	r19, Y+4	; 0x04
    204e:	2e 30       	cpi	r18, 0x0E	; 14
    2050:	31 05       	cpc	r19, r1
    2052:	b9 f0       	breq	.+46     	; 0x2082 <ADC_enuEnableTriggeringMode+0x6a>
    2054:	2b c0       	rjmp	.+86     	; 0x20ac <ADC_enuEnableTriggeringMode+0x94>
		{
		case FREE_RUNNING:
			SFIOR &=~(1<<5);
    2056:	a0 e5       	ldi	r26, 0x50	; 80
    2058:	b0 e0       	ldi	r27, 0x00	; 0
    205a:	e0 e5       	ldi	r30, 0x50	; 80
    205c:	f0 e0       	ldi	r31, 0x00	; 0
    205e:	80 81       	ld	r24, Z
    2060:	8f 7d       	andi	r24, 0xDF	; 223
    2062:	8c 93       	st	X, r24
			SFIOR &=~(1<<6);
    2064:	a0 e5       	ldi	r26, 0x50	; 80
    2066:	b0 e0       	ldi	r27, 0x00	; 0
    2068:	e0 e5       	ldi	r30, 0x50	; 80
    206a:	f0 e0       	ldi	r31, 0x00	; 0
    206c:	80 81       	ld	r24, Z
    206e:	8f 7b       	andi	r24, 0xBF	; 191
    2070:	8c 93       	st	X, r24
			SFIOR &=~(1<<7);
    2072:	a0 e5       	ldi	r26, 0x50	; 80
    2074:	b0 e0       	ldi	r27, 0x00	; 0
    2076:	e0 e5       	ldi	r30, 0x50	; 80
    2078:	f0 e0       	ldi	r31, 0x00	; 0
    207a:	80 81       	ld	r24, Z
    207c:	8f 77       	andi	r24, 0x7F	; 127
    207e:	8c 93       	st	X, r24
    2080:	15 c0       	rjmp	.+42     	; 0x20ac <ADC_enuEnableTriggeringMode+0x94>
			break;
		case EXTI0_TRIG:
			SFIOR &=~(1<<5);
    2082:	a0 e5       	ldi	r26, 0x50	; 80
    2084:	b0 e0       	ldi	r27, 0x00	; 0
    2086:	e0 e5       	ldi	r30, 0x50	; 80
    2088:	f0 e0       	ldi	r31, 0x00	; 0
    208a:	80 81       	ld	r24, Z
    208c:	8f 7d       	andi	r24, 0xDF	; 223
    208e:	8c 93       	st	X, r24
			SFIOR |= (1<<6);
    2090:	a0 e5       	ldi	r26, 0x50	; 80
    2092:	b0 e0       	ldi	r27, 0x00	; 0
    2094:	e0 e5       	ldi	r30, 0x50	; 80
    2096:	f0 e0       	ldi	r31, 0x00	; 0
    2098:	80 81       	ld	r24, Z
    209a:	80 64       	ori	r24, 0x40	; 64
    209c:	8c 93       	st	X, r24
			SFIOR &=~(1<<7);
    209e:	a0 e5       	ldi	r26, 0x50	; 80
    20a0:	b0 e0       	ldi	r27, 0x00	; 0
    20a2:	e0 e5       	ldi	r30, 0x50	; 80
    20a4:	f0 e0       	ldi	r31, 0x00	; 0
    20a6:	80 81       	ld	r24, Z
    20a8:	8f 77       	andi	r24, 0x7F	; 127
    20aa:	8c 93       	st	X, r24
			break;
		}

		ADCSRA |=(1<<ADATE);
    20ac:	a6 e2       	ldi	r26, 0x26	; 38
    20ae:	b0 e0       	ldi	r27, 0x00	; 0
    20b0:	e6 e2       	ldi	r30, 0x26	; 38
    20b2:	f0 e0       	ldi	r31, 0x00	; 0
    20b4:	80 81       	ld	r24, Z
    20b6:	80 62       	ori	r24, 0x20	; 32
    20b8:	8c 93       	st	X, r24

		Local_enuErrorState = ES_OK;
    20ba:	81 e0       	ldi	r24, 0x01	; 1
    20bc:	89 83       	std	Y+1, r24	; 0x01
		return Local_enuErrorState;
    20be:	89 81       	ldd	r24, Y+1	; 0x01
}
    20c0:	0f 90       	pop	r0
    20c2:	0f 90       	pop	r0
    20c4:	0f 90       	pop	r0
    20c6:	0f 90       	pop	r0
    20c8:	cf 91       	pop	r28
    20ca:	df 91       	pop	r29
    20cc:	08 95       	ret

000020ce <ADC_enuDisableTriggeringMode>:

ES_t ADC_enuDisableTriggeringMode(void)
{
    20ce:	df 93       	push	r29
    20d0:	cf 93       	push	r28
    20d2:	0f 92       	push	r0
    20d4:	cd b7       	in	r28, 0x3d	; 61
    20d6:	de b7       	in	r29, 0x3e	; 62
	ES_t Local_enuErrorState = ES_NOK;
    20d8:	19 82       	std	Y+1, r1	; 0x01

	   ADCSRA &=~(1<<ADATE);
    20da:	a6 e2       	ldi	r26, 0x26	; 38
    20dc:	b0 e0       	ldi	r27, 0x00	; 0
    20de:	e6 e2       	ldi	r30, 0x26	; 38
    20e0:	f0 e0       	ldi	r31, 0x00	; 0
    20e2:	80 81       	ld	r24, Z
    20e4:	8f 7d       	andi	r24, 0xDF	; 223
    20e6:	8c 93       	st	X, r24

	  Local_enuErrorState = ES_OK;
    20e8:	81 e0       	ldi	r24, 0x01	; 1
    20ea:	89 83       	std	Y+1, r24	; 0x01
		return Local_enuErrorState;
    20ec:	89 81       	ldd	r24, Y+1	; 0x01
}
    20ee:	0f 90       	pop	r0
    20f0:	cf 91       	pop	r28
    20f2:	df 91       	pop	r29
    20f4:	08 95       	ret

000020f6 <ADC_enuEnableInterruptMode>:

ES_t ADC_enuEnableInterruptMode(void)
{
    20f6:	df 93       	push	r29
    20f8:	cf 93       	push	r28
    20fa:	0f 92       	push	r0
    20fc:	cd b7       	in	r28, 0x3d	; 61
    20fe:	de b7       	in	r29, 0x3e	; 62
	ES_t Local_enuErrorState = ES_NOK;
    2100:	19 82       	std	Y+1, r1	; 0x01
	  ADCSRA |=(1<<ADIE);
    2102:	a6 e2       	ldi	r26, 0x26	; 38
    2104:	b0 e0       	ldi	r27, 0x00	; 0
    2106:	e6 e2       	ldi	r30, 0x26	; 38
    2108:	f0 e0       	ldi	r31, 0x00	; 0
    210a:	80 81       	ld	r24, Z
    210c:	88 60       	ori	r24, 0x08	; 8
    210e:	8c 93       	st	X, r24
	  Local_enuErrorState = ES_OK;
    2110:	81 e0       	ldi	r24, 0x01	; 1
    2112:	89 83       	std	Y+1, r24	; 0x01
		return Local_enuErrorState;
    2114:	89 81       	ldd	r24, Y+1	; 0x01
}
    2116:	0f 90       	pop	r0
    2118:	cf 91       	pop	r28
    211a:	df 91       	pop	r29
    211c:	08 95       	ret

0000211e <App>:

u8 Car_Red,Car_Yellow,Car_Green=1;
u8 flag;

void App(void *p)
{
    211e:	df 93       	push	r29
    2120:	cf 93       	push	r28
    2122:	00 d0       	rcall	.+0      	; 0x2124 <App+0x6>
    2124:	cd b7       	in	r28, 0x3d	; 61
    2126:	de b7       	in	r29, 0x3e	; 62
    2128:	9a 83       	std	Y+2, r25	; 0x02
    212a:	89 83       	std	Y+1, r24	; 0x01

	 if(Car_Green == 1)
    212c:	80 91 68 01 	lds	r24, 0x0168
    2130:	81 30       	cpi	r24, 0x01	; 1
    2132:	51 f4       	brne	.+20     	; 0x2148 <App+0x2a>
	 {
		 Car_Green=0;
    2134:	10 92 68 01 	sts	0x0168, r1
		 Car_Red=0;
    2138:	10 92 7c 01 	sts	0x017C, r1
		 Car_Yellow=1;
    213c:	81 e0       	ldi	r24, 0x01	; 1
    213e:	80 93 7b 01 	sts	0x017B, r24
		 flag=0;
    2142:	10 92 7a 01 	sts	0x017A, r1
    2146:	24 c0       	rjmp	.+72     	; 0x2190 <App+0x72>

	 }
	 else if(Car_Yellow == 1)
    2148:	80 91 7b 01 	lds	r24, 0x017B
    214c:	81 30       	cpi	r24, 0x01	; 1
    214e:	91 f4       	brne	.+36     	; 0x2174 <App+0x56>
	 	 {
	 		 Car_Yellow=0;
    2150:	10 92 7b 01 	sts	0x017B, r1
	 		 if(flag)
    2154:	80 91 7a 01 	lds	r24, 0x017A
    2158:	88 23       	and	r24, r24
    215a:	31 f0       	breq	.+12     	; 0x2168 <App+0x4a>
	 		 {
	 		 Car_Green=1;
    215c:	81 e0       	ldi	r24, 0x01	; 1
    215e:	80 93 68 01 	sts	0x0168, r24
	 		 Car_Red=0;
    2162:	10 92 7c 01 	sts	0x017C, r1
    2166:	14 c0       	rjmp	.+40     	; 0x2190 <App+0x72>
	 		 }
	 		 else
	 		 {
	 		 Car_Red=1;
    2168:	81 e0       	ldi	r24, 0x01	; 1
    216a:	80 93 7c 01 	sts	0x017C, r24
	 		Car_Green=0;
    216e:	10 92 68 01 	sts	0x0168, r1
    2172:	0e c0       	rjmp	.+28     	; 0x2190 <App+0x72>
	 		 }

	 	 }
	 else if(Car_Red == 1)
    2174:	80 91 7c 01 	lds	r24, 0x017C
    2178:	81 30       	cpi	r24, 0x01	; 1
    217a:	51 f4       	brne	.+20     	; 0x2190 <App+0x72>
	 	 	 {
	 	 		 Car_Yellow=1;
    217c:	81 e0       	ldi	r24, 0x01	; 1
    217e:	80 93 7b 01 	sts	0x017B, r24
	 	 		 Car_Red=0;
    2182:	10 92 7c 01 	sts	0x017C, r1
	 	 		 Car_Green=0;
    2186:	10 92 68 01 	sts	0x0168, r1
	 	 		 flag=1;
    218a:	81 e0       	ldi	r24, 0x01	; 1
    218c:	80 93 7a 01 	sts	0x017A, r24

	 	 	 }
}
    2190:	0f 90       	pop	r0
    2192:	0f 90       	pop	r0
    2194:	cf 91       	pop	r28
    2196:	df 91       	pop	r29
    2198:	08 95       	ret

0000219a <main>:
int main(void)
{
    219a:	df 93       	push	r29
    219c:	cf 93       	push	r28
    219e:	0f 92       	push	r0
    21a0:	cd b7       	in	r28, 0x3d	; 61
    21a2:	de b7       	in	r29, 0x3e	; 62
	DIO_enuSetPinDirection( DIO_u8PORTA ,DIO_u8PIN0,DIO_u8OUTPUT);
    21a4:	80 e0       	ldi	r24, 0x00	; 0
    21a6:	60 e0       	ldi	r22, 0x00	; 0
    21a8:	41 e0       	ldi	r20, 0x01	; 1
    21aa:	0e 94 0c 0c 	call	0x1818	; 0x1818 <DIO_enuSetPinDirection>
	DIO_enuSetPinDirection( DIO_u8PORTA ,DIO_u8PIN1,DIO_u8OUTPUT);
    21ae:	80 e0       	ldi	r24, 0x00	; 0
    21b0:	61 e0       	ldi	r22, 0x01	; 1
    21b2:	41 e0       	ldi	r20, 0x01	; 1
    21b4:	0e 94 0c 0c 	call	0x1818	; 0x1818 <DIO_enuSetPinDirection>
	DIO_enuSetPinDirection( DIO_u8PORTA ,DIO_u8PIN2,DIO_u8OUTPUT);
    21b8:	80 e0       	ldi	r24, 0x00	; 0
    21ba:	62 e0       	ldi	r22, 0x02	; 2
    21bc:	41 e0       	ldi	r20, 0x01	; 1
    21be:	0e 94 0c 0c 	call	0x1818	; 0x1818 <DIO_enuSetPinDirection>

	DIO_enuSetPinDirection( DIO_u8PORTD ,DIO_u8PIN0,DIO_u8OUTPUT);
    21c2:	83 e0       	ldi	r24, 0x03	; 3
    21c4:	60 e0       	ldi	r22, 0x00	; 0
    21c6:	41 e0       	ldi	r20, 0x01	; 1
    21c8:	0e 94 0c 0c 	call	0x1818	; 0x1818 <DIO_enuSetPinDirection>
	DIO_enuSetPinDirection( DIO_u8PORTD ,DIO_u8PIN1,DIO_u8OUTPUT);
    21cc:	83 e0       	ldi	r24, 0x03	; 3
    21ce:	61 e0       	ldi	r22, 0x01	; 1
    21d0:	41 e0       	ldi	r20, 0x01	; 1
    21d2:	0e 94 0c 0c 	call	0x1818	; 0x1818 <DIO_enuSetPinDirection>
	DIO_enuSetPinDirection( DIO_u8PORTD ,DIO_u8PIN2,DIO_u8OUTPUT);
    21d6:	83 e0       	ldi	r24, 0x03	; 3
    21d8:	62 e0       	ldi	r22, 0x02	; 2
    21da:	41 e0       	ldi	r20, 0x01	; 1
    21dc:	0e 94 0c 0c 	call	0x1818	; 0x1818 <DIO_enuSetPinDirection>

	DIO_enuSetPinDirection( DIO_u8PORTD ,DIO_u8PIN6,DIO_u8INPUT);
    21e0:	83 e0       	ldi	r24, 0x03	; 3
    21e2:	66 e0       	ldi	r22, 0x06	; 6
    21e4:	40 e0       	ldi	r20, 0x00	; 0
    21e6:	0e 94 0c 0c 	call	0x1818	; 0x1818 <DIO_enuSetPinDirection>

	DIO_enuSetPortValue(DIO_u8PORTA,0x00);
    21ea:	80 e0       	ldi	r24, 0x00	; 0
    21ec:	60 e0       	ldi	r22, 0x00	; 0
    21ee:	0e 94 09 0b 	call	0x1612	; 0x1612 <DIO_enuSetPortValue>
	DIO_enuSetPinValue(DIO_u8PORTA ,DIO_u8PIN0,DIO_u8HIGH);
    21f2:	80 e0       	ldi	r24, 0x00	; 0
    21f4:	60 e0       	ldi	r22, 0x00	; 0
    21f6:	41 e0       	ldi	r20, 0x01	; 1
    21f8:	0e 94 f8 0c 	call	0x19f0	; 0x19f0 <DIO_enuSetPinValue>

	TIMER_enuInit();
    21fc:	0e 94 e7 06 	call	0xdce	; 0xdce <TIMER_enuInit>
	TIMER_enuSetAsychDelay(3000,App,NULL);
    2200:	2f e8       	ldi	r18, 0x8F	; 143
    2202:	30 e1       	ldi	r19, 0x10	; 16
    2204:	68 eb       	ldi	r22, 0xB8	; 184
    2206:	7b e0       	ldi	r23, 0x0B	; 11
    2208:	80 e0       	ldi	r24, 0x00	; 0
    220a:	90 e0       	ldi	r25, 0x00	; 0
    220c:	a9 01       	movw	r20, r18
    220e:	20 e0       	ldi	r18, 0x00	; 0
    2210:	30 e0       	ldi	r19, 0x00	; 0
    2212:	0e 94 31 07 	call	0xe62	; 0xe62 <TIMER_enuSetAsychDelay>


	GIE_Enable();
    2216:	0e 94 74 0a 	call	0x14e8	; 0x14e8 <GIE_Enable>
	while(1)
	{
		u8 Switch_Read;
		DIO_enuGetPinValue( DIO_u8PORTD ,DIO_u8PIN6,&Switch_Read);
    221a:	83 e0       	ldi	r24, 0x03	; 3
    221c:	66 e0       	ldi	r22, 0x06	; 6
    221e:	9e 01       	movw	r18, r28
    2220:	2f 5f       	subi	r18, 0xFF	; 255
    2222:	3f 4f       	sbci	r19, 0xFF	; 255
    2224:	a9 01       	movw	r20, r18
    2226:	0e 94 72 0e 	call	0x1ce4	; 0x1ce4 <DIO_enuGetPinValue>
		if( Switch_Read ==0 )
    222a:	89 81       	ldd	r24, Y+1	; 0x01
    222c:	88 23       	and	r24, r24
    222e:	e1 f5       	brne	.+120    	; 0x22a8 <main+0x10e>
		{
			if(Car_Green == 1 )
    2230:	80 91 68 01 	lds	r24, 0x0168
    2234:	81 30       	cpi	r24, 0x01	; 1
    2236:	81 f4       	brne	.+32     	; 0x2258 <main+0xbe>
				 {
				DIO_enuSetPinValue(DIO_u8PORTD ,DIO_u8PIN2,DIO_u8HIGH);
    2238:	83 e0       	ldi	r24, 0x03	; 3
    223a:	62 e0       	ldi	r22, 0x02	; 2
    223c:	41 e0       	ldi	r20, 0x01	; 1
    223e:	0e 94 f8 0c 	call	0x19f0	; 0x19f0 <DIO_enuSetPinValue>
				DIO_enuSetPinValue(DIO_u8PORTD ,DIO_u8PIN1,DIO_u8LOW);
    2242:	83 e0       	ldi	r24, 0x03	; 3
    2244:	61 e0       	ldi	r22, 0x01	; 1
    2246:	40 e0       	ldi	r20, 0x00	; 0
    2248:	0e 94 f8 0c 	call	0x19f0	; 0x19f0 <DIO_enuSetPinValue>
				DIO_enuSetPinValue(DIO_u8PORTD ,DIO_u8PIN0,DIO_u8LOW);
    224c:	83 e0       	ldi	r24, 0x03	; 3
    224e:	60 e0       	ldi	r22, 0x00	; 0
    2250:	40 e0       	ldi	r20, 0x00	; 0
    2252:	0e 94 f8 0c 	call	0x19f0	; 0x19f0 <DIO_enuSetPinValue>
    2256:	3a c0       	rjmp	.+116    	; 0x22cc <main+0x132>
				 }
			else if(Car_Red == 1)
    2258:	80 91 7c 01 	lds	r24, 0x017C
    225c:	81 30       	cpi	r24, 0x01	; 1
    225e:	81 f4       	brne	.+32     	; 0x2280 <main+0xe6>
			{
				DIO_enuSetPinValue(DIO_u8PORTD ,DIO_u8PIN0,DIO_u8HIGH);
    2260:	83 e0       	ldi	r24, 0x03	; 3
    2262:	60 e0       	ldi	r22, 0x00	; 0
    2264:	41 e0       	ldi	r20, 0x01	; 1
    2266:	0e 94 f8 0c 	call	0x19f0	; 0x19f0 <DIO_enuSetPinValue>
				DIO_enuSetPinValue(DIO_u8PORTD ,DIO_u8PIN1,DIO_u8LOW);
    226a:	83 e0       	ldi	r24, 0x03	; 3
    226c:	61 e0       	ldi	r22, 0x01	; 1
    226e:	40 e0       	ldi	r20, 0x00	; 0
    2270:	0e 94 f8 0c 	call	0x19f0	; 0x19f0 <DIO_enuSetPinValue>
				DIO_enuSetPinValue(DIO_u8PORTD ,DIO_u8PIN2,DIO_u8LOW);
    2274:	83 e0       	ldi	r24, 0x03	; 3
    2276:	62 e0       	ldi	r22, 0x02	; 2
    2278:	40 e0       	ldi	r20, 0x00	; 0
    227a:	0e 94 f8 0c 	call	0x19f0	; 0x19f0 <DIO_enuSetPinValue>
    227e:	26 c0       	rjmp	.+76     	; 0x22cc <main+0x132>

			}
			else if( Car_Yellow == 1 )
    2280:	80 91 7b 01 	lds	r24, 0x017B
    2284:	81 30       	cpi	r24, 0x01	; 1
    2286:	11 f5       	brne	.+68     	; 0x22cc <main+0x132>
				{
					DIO_enuSetPinValue(DIO_u8PORTD ,DIO_u8PIN1,DIO_u8HIGH);
    2288:	83 e0       	ldi	r24, 0x03	; 3
    228a:	61 e0       	ldi	r22, 0x01	; 1
    228c:	41 e0       	ldi	r20, 0x01	; 1
    228e:	0e 94 f8 0c 	call	0x19f0	; 0x19f0 <DIO_enuSetPinValue>
					DIO_enuSetPinValue(DIO_u8PORTD ,DIO_u8PIN0,DIO_u8LOW);
    2292:	83 e0       	ldi	r24, 0x03	; 3
    2294:	60 e0       	ldi	r22, 0x00	; 0
    2296:	40 e0       	ldi	r20, 0x00	; 0
    2298:	0e 94 f8 0c 	call	0x19f0	; 0x19f0 <DIO_enuSetPinValue>
					DIO_enuSetPinValue(DIO_u8PORTD ,DIO_u8PIN2,DIO_u8LOW);
    229c:	83 e0       	ldi	r24, 0x03	; 3
    229e:	62 e0       	ldi	r22, 0x02	; 2
    22a0:	40 e0       	ldi	r20, 0x00	; 0
    22a2:	0e 94 f8 0c 	call	0x19f0	; 0x19f0 <DIO_enuSetPinValue>
    22a6:	12 c0       	rjmp	.+36     	; 0x22cc <main+0x132>

				}

		}
		else if(Switch_Read == 1)
    22a8:	89 81       	ldd	r24, Y+1	; 0x01
    22aa:	81 30       	cpi	r24, 0x01	; 1
    22ac:	79 f4       	brne	.+30     	; 0x22cc <main+0x132>
		{
			DIO_enuSetPinValue(DIO_u8PORTD ,DIO_u8PIN1,DIO_u8LOW);
    22ae:	83 e0       	ldi	r24, 0x03	; 3
    22b0:	61 e0       	ldi	r22, 0x01	; 1
    22b2:	40 e0       	ldi	r20, 0x00	; 0
    22b4:	0e 94 f8 0c 	call	0x19f0	; 0x19f0 <DIO_enuSetPinValue>
		    DIO_enuSetPinValue(DIO_u8PORTD ,DIO_u8PIN0,DIO_u8LOW);
    22b8:	83 e0       	ldi	r24, 0x03	; 3
    22ba:	60 e0       	ldi	r22, 0x00	; 0
    22bc:	40 e0       	ldi	r20, 0x00	; 0
    22be:	0e 94 f8 0c 	call	0x19f0	; 0x19f0 <DIO_enuSetPinValue>
		    DIO_enuSetPinValue(DIO_u8PORTD ,DIO_u8PIN2,DIO_u8LOW);
    22c2:	83 e0       	ldi	r24, 0x03	; 3
    22c4:	62 e0       	ldi	r22, 0x02	; 2
    22c6:	40 e0       	ldi	r20, 0x00	; 0
    22c8:	0e 94 f8 0c 	call	0x19f0	; 0x19f0 <DIO_enuSetPinValue>
		}



		if(Car_Green == 1)
    22cc:	80 91 68 01 	lds	r24, 0x0168
    22d0:	81 30       	cpi	r24, 0x01	; 1
    22d2:	81 f4       	brne	.+32     	; 0x22f4 <main+0x15a>
			 {
			DIO_enuSetPinValue(DIO_u8PORTA ,DIO_u8PIN0,DIO_u8HIGH);
    22d4:	80 e0       	ldi	r24, 0x00	; 0
    22d6:	60 e0       	ldi	r22, 0x00	; 0
    22d8:	41 e0       	ldi	r20, 0x01	; 1
    22da:	0e 94 f8 0c 	call	0x19f0	; 0x19f0 <DIO_enuSetPinValue>
			DIO_enuSetPinValue(DIO_u8PORTA ,DIO_u8PIN1,DIO_u8LOW);
    22de:	80 e0       	ldi	r24, 0x00	; 0
    22e0:	61 e0       	ldi	r22, 0x01	; 1
    22e2:	40 e0       	ldi	r20, 0x00	; 0
    22e4:	0e 94 f8 0c 	call	0x19f0	; 0x19f0 <DIO_enuSetPinValue>
			DIO_enuSetPinValue(DIO_u8PORTA ,DIO_u8PIN2,DIO_u8LOW);
    22e8:	80 e0       	ldi	r24, 0x00	; 0
    22ea:	62 e0       	ldi	r22, 0x02	; 2
    22ec:	40 e0       	ldi	r20, 0x00	; 0
    22ee:	0e 94 f8 0c 	call	0x19f0	; 0x19f0 <DIO_enuSetPinValue>
    22f2:	93 cf       	rjmp	.-218    	; 0x221a <main+0x80>
			 }
		 else if(Car_Red == 1)
    22f4:	80 91 7c 01 	lds	r24, 0x017C
    22f8:	81 30       	cpi	r24, 0x01	; 1
    22fa:	81 f4       	brne	.+32     	; 0x231c <main+0x182>
			 	 {
			 DIO_enuSetPinValue(DIO_u8PORTA ,DIO_u8PIN2,DIO_u8HIGH);
    22fc:	80 e0       	ldi	r24, 0x00	; 0
    22fe:	62 e0       	ldi	r22, 0x02	; 2
    2300:	41 e0       	ldi	r20, 0x01	; 1
    2302:	0e 94 f8 0c 	call	0x19f0	; 0x19f0 <DIO_enuSetPinValue>
			 DIO_enuSetPinValue(DIO_u8PORTA ,DIO_u8PIN1,DIO_u8LOW);
    2306:	80 e0       	ldi	r24, 0x00	; 0
    2308:	61 e0       	ldi	r22, 0x01	; 1
    230a:	40 e0       	ldi	r20, 0x00	; 0
    230c:	0e 94 f8 0c 	call	0x19f0	; 0x19f0 <DIO_enuSetPinValue>
			 DIO_enuSetPinValue(DIO_u8PORTA ,DIO_u8PIN0,DIO_u8LOW);
    2310:	80 e0       	ldi	r24, 0x00	; 0
    2312:	60 e0       	ldi	r22, 0x00	; 0
    2314:	40 e0       	ldi	r20, 0x00	; 0
    2316:	0e 94 f8 0c 	call	0x19f0	; 0x19f0 <DIO_enuSetPinValue>
    231a:	7f cf       	rjmp	.-258    	; 0x221a <main+0x80>
			 	 }
		 else if(Car_Yellow == 1)
    231c:	80 91 7b 01 	lds	r24, 0x017B
    2320:	81 30       	cpi	r24, 0x01	; 1
    2322:	09 f0       	breq	.+2      	; 0x2326 <main+0x18c>
    2324:	7a cf       	rjmp	.-268    	; 0x221a <main+0x80>
		 {
			 DIO_enuSetPinValue(DIO_u8PORTA ,DIO_u8PIN2,DIO_u8LOW);
    2326:	80 e0       	ldi	r24, 0x00	; 0
    2328:	62 e0       	ldi	r22, 0x02	; 2
    232a:	40 e0       	ldi	r20, 0x00	; 0
    232c:	0e 94 f8 0c 	call	0x19f0	; 0x19f0 <DIO_enuSetPinValue>
			 DIO_enuSetPinValue(DIO_u8PORTA ,DIO_u8PIN0,DIO_u8LOW);
    2330:	80 e0       	ldi	r24, 0x00	; 0
    2332:	60 e0       	ldi	r22, 0x00	; 0
    2334:	40 e0       	ldi	r20, 0x00	; 0
    2336:	0e 94 f8 0c 	call	0x19f0	; 0x19f0 <DIO_enuSetPinValue>
			 DIO_enuSetPinValue(DIO_u8PORTA ,DIO_u8PIN1,DIO_u8HIGH);
    233a:	80 e0       	ldi	r24, 0x00	; 0
    233c:	61 e0       	ldi	r22, 0x01	; 1
    233e:	41 e0       	ldi	r20, 0x01	; 1
    2340:	0e 94 f8 0c 	call	0x19f0	; 0x19f0 <DIO_enuSetPinValue>
    2344:	6a cf       	rjmp	.-300    	; 0x221a <main+0x80>

00002346 <__prologue_saves__>:
    2346:	2f 92       	push	r2
    2348:	3f 92       	push	r3
    234a:	4f 92       	push	r4
    234c:	5f 92       	push	r5
    234e:	6f 92       	push	r6
    2350:	7f 92       	push	r7
    2352:	8f 92       	push	r8
    2354:	9f 92       	push	r9
    2356:	af 92       	push	r10
    2358:	bf 92       	push	r11
    235a:	cf 92       	push	r12
    235c:	df 92       	push	r13
    235e:	ef 92       	push	r14
    2360:	ff 92       	push	r15
    2362:	0f 93       	push	r16
    2364:	1f 93       	push	r17
    2366:	cf 93       	push	r28
    2368:	df 93       	push	r29
    236a:	cd b7       	in	r28, 0x3d	; 61
    236c:	de b7       	in	r29, 0x3e	; 62
    236e:	ca 1b       	sub	r28, r26
    2370:	db 0b       	sbc	r29, r27
    2372:	0f b6       	in	r0, 0x3f	; 63
    2374:	f8 94       	cli
    2376:	de bf       	out	0x3e, r29	; 62
    2378:	0f be       	out	0x3f, r0	; 63
    237a:	cd bf       	out	0x3d, r28	; 61
    237c:	09 94       	ijmp

0000237e <__epilogue_restores__>:
    237e:	2a 88       	ldd	r2, Y+18	; 0x12
    2380:	39 88       	ldd	r3, Y+17	; 0x11
    2382:	48 88       	ldd	r4, Y+16	; 0x10
    2384:	5f 84       	ldd	r5, Y+15	; 0x0f
    2386:	6e 84       	ldd	r6, Y+14	; 0x0e
    2388:	7d 84       	ldd	r7, Y+13	; 0x0d
    238a:	8c 84       	ldd	r8, Y+12	; 0x0c
    238c:	9b 84       	ldd	r9, Y+11	; 0x0b
    238e:	aa 84       	ldd	r10, Y+10	; 0x0a
    2390:	b9 84       	ldd	r11, Y+9	; 0x09
    2392:	c8 84       	ldd	r12, Y+8	; 0x08
    2394:	df 80       	ldd	r13, Y+7	; 0x07
    2396:	ee 80       	ldd	r14, Y+6	; 0x06
    2398:	fd 80       	ldd	r15, Y+5	; 0x05
    239a:	0c 81       	ldd	r16, Y+4	; 0x04
    239c:	1b 81       	ldd	r17, Y+3	; 0x03
    239e:	aa 81       	ldd	r26, Y+2	; 0x02
    23a0:	b9 81       	ldd	r27, Y+1	; 0x01
    23a2:	ce 0f       	add	r28, r30
    23a4:	d1 1d       	adc	r29, r1
    23a6:	0f b6       	in	r0, 0x3f	; 63
    23a8:	f8 94       	cli
    23aa:	de bf       	out	0x3e, r29	; 62
    23ac:	0f be       	out	0x3f, r0	; 63
    23ae:	cd bf       	out	0x3d, r28	; 61
    23b0:	ed 01       	movw	r28, r26
    23b2:	08 95       	ret

000023b4 <_exit>:
    23b4:	f8 94       	cli

000023b6 <__stop_program>:
    23b6:	ff cf       	rjmp	.-2      	; 0x23b6 <__stop_program>
