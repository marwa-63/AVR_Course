
LM35.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002834  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000108  00800060  00002834  000028a8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .stab         0000249c  00000000  00000000  000029b0  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000e06  00000000  00000000  00004e4c  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_aranges 000001a0  00000000  00000000  00005c52  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_pubnames 000001f2  00000000  00000000  00005df2  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000240b  00000000  00000000  00005fe4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001386  00000000  00000000  000083ef  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000011d6  00000000  00000000  00009775  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001c0  00000000  00000000  0000a94c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000002f6  00000000  00000000  0000ab0c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000096e  00000000  00000000  0000ae02  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000050  00000000  00000000  0000b770  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
       8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
       c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e4 e3       	ldi	r30, 0x34	; 52
      68:	f8 e2       	ldi	r31, 0x28	; 40
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a8 36       	cpi	r26, 0x68	; 104
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>
      76:	0e 94 ef 12 	call	0x25de	; 0x25de <main>
      7a:	0c 94 18 14 	jmp	0x2830	; 0x2830 <_exit>

0000007e <__bad_interrupt>:
      7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <__fixunssfsi>:
      82:	ef 92       	push	r14
      84:	ff 92       	push	r15
      86:	0f 93       	push	r16
      88:	1f 93       	push	r17
      8a:	7b 01       	movw	r14, r22
      8c:	8c 01       	movw	r16, r24
      8e:	20 e0       	ldi	r18, 0x00	; 0
      90:	30 e0       	ldi	r19, 0x00	; 0
      92:	40 e0       	ldi	r20, 0x00	; 0
      94:	5f e4       	ldi	r21, 0x4F	; 79
      96:	0e 94 ed 03 	call	0x7da	; 0x7da <__gesf2>
      9a:	88 23       	and	r24, r24
      9c:	8c f0       	brlt	.+34     	; 0xc0 <__fixunssfsi+0x3e>
      9e:	c8 01       	movw	r24, r16
      a0:	b7 01       	movw	r22, r14
      a2:	20 e0       	ldi	r18, 0x00	; 0
      a4:	30 e0       	ldi	r19, 0x00	; 0
      a6:	40 e0       	ldi	r20, 0x00	; 0
      a8:	5f e4       	ldi	r21, 0x4F	; 79
      aa:	0e 94 b9 01 	call	0x372	; 0x372 <__subsf3>
      ae:	0e 94 4d 04 	call	0x89a	; 0x89a <__fixsfsi>
      b2:	9b 01       	movw	r18, r22
      b4:	ac 01       	movw	r20, r24
      b6:	20 50       	subi	r18, 0x00	; 0
      b8:	30 40       	sbci	r19, 0x00	; 0
      ba:	40 40       	sbci	r20, 0x00	; 0
      bc:	50 48       	sbci	r21, 0x80	; 128
      be:	06 c0       	rjmp	.+12     	; 0xcc <__fixunssfsi+0x4a>
      c0:	c8 01       	movw	r24, r16
      c2:	b7 01       	movw	r22, r14
      c4:	0e 94 4d 04 	call	0x89a	; 0x89a <__fixsfsi>
      c8:	9b 01       	movw	r18, r22
      ca:	ac 01       	movw	r20, r24
      cc:	b9 01       	movw	r22, r18
      ce:	ca 01       	movw	r24, r20
      d0:	1f 91       	pop	r17
      d2:	0f 91       	pop	r16
      d4:	ff 90       	pop	r15
      d6:	ef 90       	pop	r14
      d8:	08 95       	ret

000000da <_fpadd_parts>:
      da:	a0 e0       	ldi	r26, 0x00	; 0
      dc:	b0 e0       	ldi	r27, 0x00	; 0
      de:	e3 e7       	ldi	r30, 0x73	; 115
      e0:	f0 e0       	ldi	r31, 0x00	; 0
      e2:	0c 94 e1 13 	jmp	0x27c2	; 0x27c2 <__prologue_saves__>
      e6:	dc 01       	movw	r26, r24
      e8:	2b 01       	movw	r4, r22
      ea:	fa 01       	movw	r30, r20
      ec:	9c 91       	ld	r25, X
      ee:	92 30       	cpi	r25, 0x02	; 2
      f0:	08 f4       	brcc	.+2      	; 0xf4 <_fpadd_parts+0x1a>
      f2:	39 c1       	rjmp	.+626    	; 0x366 <_fpadd_parts+0x28c>
      f4:	eb 01       	movw	r28, r22
      f6:	88 81       	ld	r24, Y
      f8:	82 30       	cpi	r24, 0x02	; 2
      fa:	08 f4       	brcc	.+2      	; 0xfe <_fpadd_parts+0x24>
      fc:	33 c1       	rjmp	.+614    	; 0x364 <_fpadd_parts+0x28a>
      fe:	94 30       	cpi	r25, 0x04	; 4
     100:	69 f4       	brne	.+26     	; 0x11c <_fpadd_parts+0x42>
     102:	84 30       	cpi	r24, 0x04	; 4
     104:	09 f0       	breq	.+2      	; 0x108 <_fpadd_parts+0x2e>
     106:	2f c1       	rjmp	.+606    	; 0x366 <_fpadd_parts+0x28c>
     108:	11 96       	adiw	r26, 0x01	; 1
     10a:	9c 91       	ld	r25, X
     10c:	11 97       	sbiw	r26, 0x01	; 1
     10e:	89 81       	ldd	r24, Y+1	; 0x01
     110:	98 17       	cp	r25, r24
     112:	09 f4       	brne	.+2      	; 0x116 <_fpadd_parts+0x3c>
     114:	28 c1       	rjmp	.+592    	; 0x366 <_fpadd_parts+0x28c>
     116:	a0 e6       	ldi	r26, 0x60	; 96
     118:	b0 e0       	ldi	r27, 0x00	; 0
     11a:	25 c1       	rjmp	.+586    	; 0x366 <_fpadd_parts+0x28c>
     11c:	84 30       	cpi	r24, 0x04	; 4
     11e:	09 f4       	brne	.+2      	; 0x122 <_fpadd_parts+0x48>
     120:	21 c1       	rjmp	.+578    	; 0x364 <_fpadd_parts+0x28a>
     122:	82 30       	cpi	r24, 0x02	; 2
     124:	a9 f4       	brne	.+42     	; 0x150 <_fpadd_parts+0x76>
     126:	92 30       	cpi	r25, 0x02	; 2
     128:	09 f0       	breq	.+2      	; 0x12c <_fpadd_parts+0x52>
     12a:	1d c1       	rjmp	.+570    	; 0x366 <_fpadd_parts+0x28c>
     12c:	9a 01       	movw	r18, r20
     12e:	ad 01       	movw	r20, r26
     130:	88 e0       	ldi	r24, 0x08	; 8
     132:	ea 01       	movw	r28, r20
     134:	09 90       	ld	r0, Y+
     136:	ae 01       	movw	r20, r28
     138:	e9 01       	movw	r28, r18
     13a:	09 92       	st	Y+, r0
     13c:	9e 01       	movw	r18, r28
     13e:	81 50       	subi	r24, 0x01	; 1
     140:	c1 f7       	brne	.-16     	; 0x132 <_fpadd_parts+0x58>
     142:	e2 01       	movw	r28, r4
     144:	89 81       	ldd	r24, Y+1	; 0x01
     146:	11 96       	adiw	r26, 0x01	; 1
     148:	9c 91       	ld	r25, X
     14a:	89 23       	and	r24, r25
     14c:	81 83       	std	Z+1, r24	; 0x01
     14e:	08 c1       	rjmp	.+528    	; 0x360 <_fpadd_parts+0x286>
     150:	92 30       	cpi	r25, 0x02	; 2
     152:	09 f4       	brne	.+2      	; 0x156 <_fpadd_parts+0x7c>
     154:	07 c1       	rjmp	.+526    	; 0x364 <_fpadd_parts+0x28a>
     156:	12 96       	adiw	r26, 0x02	; 2
     158:	2d 90       	ld	r2, X+
     15a:	3c 90       	ld	r3, X
     15c:	13 97       	sbiw	r26, 0x03	; 3
     15e:	eb 01       	movw	r28, r22
     160:	8a 81       	ldd	r24, Y+2	; 0x02
     162:	9b 81       	ldd	r25, Y+3	; 0x03
     164:	14 96       	adiw	r26, 0x04	; 4
     166:	ad 90       	ld	r10, X+
     168:	bd 90       	ld	r11, X+
     16a:	cd 90       	ld	r12, X+
     16c:	dc 90       	ld	r13, X
     16e:	17 97       	sbiw	r26, 0x07	; 7
     170:	ec 80       	ldd	r14, Y+4	; 0x04
     172:	fd 80       	ldd	r15, Y+5	; 0x05
     174:	0e 81       	ldd	r16, Y+6	; 0x06
     176:	1f 81       	ldd	r17, Y+7	; 0x07
     178:	91 01       	movw	r18, r2
     17a:	28 1b       	sub	r18, r24
     17c:	39 0b       	sbc	r19, r25
     17e:	b9 01       	movw	r22, r18
     180:	37 ff       	sbrs	r19, 7
     182:	04 c0       	rjmp	.+8      	; 0x18c <_fpadd_parts+0xb2>
     184:	66 27       	eor	r22, r22
     186:	77 27       	eor	r23, r23
     188:	62 1b       	sub	r22, r18
     18a:	73 0b       	sbc	r23, r19
     18c:	60 32       	cpi	r22, 0x20	; 32
     18e:	71 05       	cpc	r23, r1
     190:	0c f0       	brlt	.+2      	; 0x194 <_fpadd_parts+0xba>
     192:	61 c0       	rjmp	.+194    	; 0x256 <_fpadd_parts+0x17c>
     194:	12 16       	cp	r1, r18
     196:	13 06       	cpc	r1, r19
     198:	6c f5       	brge	.+90     	; 0x1f4 <_fpadd_parts+0x11a>
     19a:	37 01       	movw	r6, r14
     19c:	48 01       	movw	r8, r16
     19e:	06 2e       	mov	r0, r22
     1a0:	04 c0       	rjmp	.+8      	; 0x1aa <_fpadd_parts+0xd0>
     1a2:	96 94       	lsr	r9
     1a4:	87 94       	ror	r8
     1a6:	77 94       	ror	r7
     1a8:	67 94       	ror	r6
     1aa:	0a 94       	dec	r0
     1ac:	d2 f7       	brpl	.-12     	; 0x1a2 <_fpadd_parts+0xc8>
     1ae:	21 e0       	ldi	r18, 0x01	; 1
     1b0:	30 e0       	ldi	r19, 0x00	; 0
     1b2:	40 e0       	ldi	r20, 0x00	; 0
     1b4:	50 e0       	ldi	r21, 0x00	; 0
     1b6:	04 c0       	rjmp	.+8      	; 0x1c0 <_fpadd_parts+0xe6>
     1b8:	22 0f       	add	r18, r18
     1ba:	33 1f       	adc	r19, r19
     1bc:	44 1f       	adc	r20, r20
     1be:	55 1f       	adc	r21, r21
     1c0:	6a 95       	dec	r22
     1c2:	d2 f7       	brpl	.-12     	; 0x1b8 <_fpadd_parts+0xde>
     1c4:	21 50       	subi	r18, 0x01	; 1
     1c6:	30 40       	sbci	r19, 0x00	; 0
     1c8:	40 40       	sbci	r20, 0x00	; 0
     1ca:	50 40       	sbci	r21, 0x00	; 0
     1cc:	2e 21       	and	r18, r14
     1ce:	3f 21       	and	r19, r15
     1d0:	40 23       	and	r20, r16
     1d2:	51 23       	and	r21, r17
     1d4:	21 15       	cp	r18, r1
     1d6:	31 05       	cpc	r19, r1
     1d8:	41 05       	cpc	r20, r1
     1da:	51 05       	cpc	r21, r1
     1dc:	21 f0       	breq	.+8      	; 0x1e6 <_fpadd_parts+0x10c>
     1de:	21 e0       	ldi	r18, 0x01	; 1
     1e0:	30 e0       	ldi	r19, 0x00	; 0
     1e2:	40 e0       	ldi	r20, 0x00	; 0
     1e4:	50 e0       	ldi	r21, 0x00	; 0
     1e6:	79 01       	movw	r14, r18
     1e8:	8a 01       	movw	r16, r20
     1ea:	e6 28       	or	r14, r6
     1ec:	f7 28       	or	r15, r7
     1ee:	08 29       	or	r16, r8
     1f0:	19 29       	or	r17, r9
     1f2:	3c c0       	rjmp	.+120    	; 0x26c <_fpadd_parts+0x192>
     1f4:	23 2b       	or	r18, r19
     1f6:	d1 f1       	breq	.+116    	; 0x26c <_fpadd_parts+0x192>
     1f8:	26 0e       	add	r2, r22
     1fa:	37 1e       	adc	r3, r23
     1fc:	35 01       	movw	r6, r10
     1fe:	46 01       	movw	r8, r12
     200:	06 2e       	mov	r0, r22
     202:	04 c0       	rjmp	.+8      	; 0x20c <_fpadd_parts+0x132>
     204:	96 94       	lsr	r9
     206:	87 94       	ror	r8
     208:	77 94       	ror	r7
     20a:	67 94       	ror	r6
     20c:	0a 94       	dec	r0
     20e:	d2 f7       	brpl	.-12     	; 0x204 <_fpadd_parts+0x12a>
     210:	21 e0       	ldi	r18, 0x01	; 1
     212:	30 e0       	ldi	r19, 0x00	; 0
     214:	40 e0       	ldi	r20, 0x00	; 0
     216:	50 e0       	ldi	r21, 0x00	; 0
     218:	04 c0       	rjmp	.+8      	; 0x222 <_fpadd_parts+0x148>
     21a:	22 0f       	add	r18, r18
     21c:	33 1f       	adc	r19, r19
     21e:	44 1f       	adc	r20, r20
     220:	55 1f       	adc	r21, r21
     222:	6a 95       	dec	r22
     224:	d2 f7       	brpl	.-12     	; 0x21a <_fpadd_parts+0x140>
     226:	21 50       	subi	r18, 0x01	; 1
     228:	30 40       	sbci	r19, 0x00	; 0
     22a:	40 40       	sbci	r20, 0x00	; 0
     22c:	50 40       	sbci	r21, 0x00	; 0
     22e:	2a 21       	and	r18, r10
     230:	3b 21       	and	r19, r11
     232:	4c 21       	and	r20, r12
     234:	5d 21       	and	r21, r13
     236:	21 15       	cp	r18, r1
     238:	31 05       	cpc	r19, r1
     23a:	41 05       	cpc	r20, r1
     23c:	51 05       	cpc	r21, r1
     23e:	21 f0       	breq	.+8      	; 0x248 <_fpadd_parts+0x16e>
     240:	21 e0       	ldi	r18, 0x01	; 1
     242:	30 e0       	ldi	r19, 0x00	; 0
     244:	40 e0       	ldi	r20, 0x00	; 0
     246:	50 e0       	ldi	r21, 0x00	; 0
     248:	59 01       	movw	r10, r18
     24a:	6a 01       	movw	r12, r20
     24c:	a6 28       	or	r10, r6
     24e:	b7 28       	or	r11, r7
     250:	c8 28       	or	r12, r8
     252:	d9 28       	or	r13, r9
     254:	0b c0       	rjmp	.+22     	; 0x26c <_fpadd_parts+0x192>
     256:	82 15       	cp	r24, r2
     258:	93 05       	cpc	r25, r3
     25a:	2c f0       	brlt	.+10     	; 0x266 <_fpadd_parts+0x18c>
     25c:	1c 01       	movw	r2, r24
     25e:	aa 24       	eor	r10, r10
     260:	bb 24       	eor	r11, r11
     262:	65 01       	movw	r12, r10
     264:	03 c0       	rjmp	.+6      	; 0x26c <_fpadd_parts+0x192>
     266:	ee 24       	eor	r14, r14
     268:	ff 24       	eor	r15, r15
     26a:	87 01       	movw	r16, r14
     26c:	11 96       	adiw	r26, 0x01	; 1
     26e:	9c 91       	ld	r25, X
     270:	d2 01       	movw	r26, r4
     272:	11 96       	adiw	r26, 0x01	; 1
     274:	8c 91       	ld	r24, X
     276:	98 17       	cp	r25, r24
     278:	09 f4       	brne	.+2      	; 0x27c <_fpadd_parts+0x1a2>
     27a:	45 c0       	rjmp	.+138    	; 0x306 <_fpadd_parts+0x22c>
     27c:	99 23       	and	r25, r25
     27e:	39 f0       	breq	.+14     	; 0x28e <_fpadd_parts+0x1b4>
     280:	a8 01       	movw	r20, r16
     282:	97 01       	movw	r18, r14
     284:	2a 19       	sub	r18, r10
     286:	3b 09       	sbc	r19, r11
     288:	4c 09       	sbc	r20, r12
     28a:	5d 09       	sbc	r21, r13
     28c:	06 c0       	rjmp	.+12     	; 0x29a <_fpadd_parts+0x1c0>
     28e:	a6 01       	movw	r20, r12
     290:	95 01       	movw	r18, r10
     292:	2e 19       	sub	r18, r14
     294:	3f 09       	sbc	r19, r15
     296:	40 0b       	sbc	r20, r16
     298:	51 0b       	sbc	r21, r17
     29a:	57 fd       	sbrc	r21, 7
     29c:	08 c0       	rjmp	.+16     	; 0x2ae <_fpadd_parts+0x1d4>
     29e:	11 82       	std	Z+1, r1	; 0x01
     2a0:	33 82       	std	Z+3, r3	; 0x03
     2a2:	22 82       	std	Z+2, r2	; 0x02
     2a4:	24 83       	std	Z+4, r18	; 0x04
     2a6:	35 83       	std	Z+5, r19	; 0x05
     2a8:	46 83       	std	Z+6, r20	; 0x06
     2aa:	57 83       	std	Z+7, r21	; 0x07
     2ac:	1d c0       	rjmp	.+58     	; 0x2e8 <_fpadd_parts+0x20e>
     2ae:	81 e0       	ldi	r24, 0x01	; 1
     2b0:	81 83       	std	Z+1, r24	; 0x01
     2b2:	33 82       	std	Z+3, r3	; 0x03
     2b4:	22 82       	std	Z+2, r2	; 0x02
     2b6:	88 27       	eor	r24, r24
     2b8:	99 27       	eor	r25, r25
     2ba:	dc 01       	movw	r26, r24
     2bc:	82 1b       	sub	r24, r18
     2be:	93 0b       	sbc	r25, r19
     2c0:	a4 0b       	sbc	r26, r20
     2c2:	b5 0b       	sbc	r27, r21
     2c4:	84 83       	std	Z+4, r24	; 0x04
     2c6:	95 83       	std	Z+5, r25	; 0x05
     2c8:	a6 83       	std	Z+6, r26	; 0x06
     2ca:	b7 83       	std	Z+7, r27	; 0x07
     2cc:	0d c0       	rjmp	.+26     	; 0x2e8 <_fpadd_parts+0x20e>
     2ce:	22 0f       	add	r18, r18
     2d0:	33 1f       	adc	r19, r19
     2d2:	44 1f       	adc	r20, r20
     2d4:	55 1f       	adc	r21, r21
     2d6:	24 83       	std	Z+4, r18	; 0x04
     2d8:	35 83       	std	Z+5, r19	; 0x05
     2da:	46 83       	std	Z+6, r20	; 0x06
     2dc:	57 83       	std	Z+7, r21	; 0x07
     2de:	82 81       	ldd	r24, Z+2	; 0x02
     2e0:	93 81       	ldd	r25, Z+3	; 0x03
     2e2:	01 97       	sbiw	r24, 0x01	; 1
     2e4:	93 83       	std	Z+3, r25	; 0x03
     2e6:	82 83       	std	Z+2, r24	; 0x02
     2e8:	24 81       	ldd	r18, Z+4	; 0x04
     2ea:	35 81       	ldd	r19, Z+5	; 0x05
     2ec:	46 81       	ldd	r20, Z+6	; 0x06
     2ee:	57 81       	ldd	r21, Z+7	; 0x07
     2f0:	da 01       	movw	r26, r20
     2f2:	c9 01       	movw	r24, r18
     2f4:	01 97       	sbiw	r24, 0x01	; 1
     2f6:	a1 09       	sbc	r26, r1
     2f8:	b1 09       	sbc	r27, r1
     2fa:	8f 5f       	subi	r24, 0xFF	; 255
     2fc:	9f 4f       	sbci	r25, 0xFF	; 255
     2fe:	af 4f       	sbci	r26, 0xFF	; 255
     300:	bf 43       	sbci	r27, 0x3F	; 63
     302:	28 f3       	brcs	.-54     	; 0x2ce <_fpadd_parts+0x1f4>
     304:	0b c0       	rjmp	.+22     	; 0x31c <_fpadd_parts+0x242>
     306:	91 83       	std	Z+1, r25	; 0x01
     308:	33 82       	std	Z+3, r3	; 0x03
     30a:	22 82       	std	Z+2, r2	; 0x02
     30c:	ea 0c       	add	r14, r10
     30e:	fb 1c       	adc	r15, r11
     310:	0c 1d       	adc	r16, r12
     312:	1d 1d       	adc	r17, r13
     314:	e4 82       	std	Z+4, r14	; 0x04
     316:	f5 82       	std	Z+5, r15	; 0x05
     318:	06 83       	std	Z+6, r16	; 0x06
     31a:	17 83       	std	Z+7, r17	; 0x07
     31c:	83 e0       	ldi	r24, 0x03	; 3
     31e:	80 83       	st	Z, r24
     320:	24 81       	ldd	r18, Z+4	; 0x04
     322:	35 81       	ldd	r19, Z+5	; 0x05
     324:	46 81       	ldd	r20, Z+6	; 0x06
     326:	57 81       	ldd	r21, Z+7	; 0x07
     328:	57 ff       	sbrs	r21, 7
     32a:	1a c0       	rjmp	.+52     	; 0x360 <_fpadd_parts+0x286>
     32c:	c9 01       	movw	r24, r18
     32e:	aa 27       	eor	r26, r26
     330:	97 fd       	sbrc	r25, 7
     332:	a0 95       	com	r26
     334:	ba 2f       	mov	r27, r26
     336:	81 70       	andi	r24, 0x01	; 1
     338:	90 70       	andi	r25, 0x00	; 0
     33a:	a0 70       	andi	r26, 0x00	; 0
     33c:	b0 70       	andi	r27, 0x00	; 0
     33e:	56 95       	lsr	r21
     340:	47 95       	ror	r20
     342:	37 95       	ror	r19
     344:	27 95       	ror	r18
     346:	82 2b       	or	r24, r18
     348:	93 2b       	or	r25, r19
     34a:	a4 2b       	or	r26, r20
     34c:	b5 2b       	or	r27, r21
     34e:	84 83       	std	Z+4, r24	; 0x04
     350:	95 83       	std	Z+5, r25	; 0x05
     352:	a6 83       	std	Z+6, r26	; 0x06
     354:	b7 83       	std	Z+7, r27	; 0x07
     356:	82 81       	ldd	r24, Z+2	; 0x02
     358:	93 81       	ldd	r25, Z+3	; 0x03
     35a:	01 96       	adiw	r24, 0x01	; 1
     35c:	93 83       	std	Z+3, r25	; 0x03
     35e:	82 83       	std	Z+2, r24	; 0x02
     360:	df 01       	movw	r26, r30
     362:	01 c0       	rjmp	.+2      	; 0x366 <_fpadd_parts+0x28c>
     364:	d2 01       	movw	r26, r4
     366:	cd 01       	movw	r24, r26
     368:	cd b7       	in	r28, 0x3d	; 61
     36a:	de b7       	in	r29, 0x3e	; 62
     36c:	e2 e1       	ldi	r30, 0x12	; 18
     36e:	0c 94 fd 13 	jmp	0x27fa	; 0x27fa <__epilogue_restores__>

00000372 <__subsf3>:
     372:	a0 e2       	ldi	r26, 0x20	; 32
     374:	b0 e0       	ldi	r27, 0x00	; 0
     376:	ef eb       	ldi	r30, 0xBF	; 191
     378:	f1 e0       	ldi	r31, 0x01	; 1
     37a:	0c 94 ed 13 	jmp	0x27da	; 0x27da <__prologue_saves__+0x18>
     37e:	69 83       	std	Y+1, r22	; 0x01
     380:	7a 83       	std	Y+2, r23	; 0x02
     382:	8b 83       	std	Y+3, r24	; 0x03
     384:	9c 83       	std	Y+4, r25	; 0x04
     386:	2d 83       	std	Y+5, r18	; 0x05
     388:	3e 83       	std	Y+6, r19	; 0x06
     38a:	4f 83       	std	Y+7, r20	; 0x07
     38c:	58 87       	std	Y+8, r21	; 0x08
     38e:	e9 e0       	ldi	r30, 0x09	; 9
     390:	ee 2e       	mov	r14, r30
     392:	f1 2c       	mov	r15, r1
     394:	ec 0e       	add	r14, r28
     396:	fd 1e       	adc	r15, r29
     398:	ce 01       	movw	r24, r28
     39a:	01 96       	adiw	r24, 0x01	; 1
     39c:	b7 01       	movw	r22, r14
     39e:	0e 94 3e 06 	call	0xc7c	; 0xc7c <__unpack_f>
     3a2:	8e 01       	movw	r16, r28
     3a4:	0f 5e       	subi	r16, 0xEF	; 239
     3a6:	1f 4f       	sbci	r17, 0xFF	; 255
     3a8:	ce 01       	movw	r24, r28
     3aa:	05 96       	adiw	r24, 0x05	; 5
     3ac:	b8 01       	movw	r22, r16
     3ae:	0e 94 3e 06 	call	0xc7c	; 0xc7c <__unpack_f>
     3b2:	8a 89       	ldd	r24, Y+18	; 0x12
     3b4:	91 e0       	ldi	r25, 0x01	; 1
     3b6:	89 27       	eor	r24, r25
     3b8:	8a 8b       	std	Y+18, r24	; 0x12
     3ba:	c7 01       	movw	r24, r14
     3bc:	b8 01       	movw	r22, r16
     3be:	ae 01       	movw	r20, r28
     3c0:	47 5e       	subi	r20, 0xE7	; 231
     3c2:	5f 4f       	sbci	r21, 0xFF	; 255
     3c4:	0e 94 6d 00 	call	0xda	; 0xda <_fpadd_parts>
     3c8:	0e 94 69 05 	call	0xad2	; 0xad2 <__pack_f>
     3cc:	a0 96       	adiw	r28, 0x20	; 32
     3ce:	e6 e0       	ldi	r30, 0x06	; 6
     3d0:	0c 94 09 14 	jmp	0x2812	; 0x2812 <__epilogue_restores__+0x18>

000003d4 <__addsf3>:
     3d4:	a0 e2       	ldi	r26, 0x20	; 32
     3d6:	b0 e0       	ldi	r27, 0x00	; 0
     3d8:	e0 ef       	ldi	r30, 0xF0	; 240
     3da:	f1 e0       	ldi	r31, 0x01	; 1
     3dc:	0c 94 ed 13 	jmp	0x27da	; 0x27da <__prologue_saves__+0x18>
     3e0:	69 83       	std	Y+1, r22	; 0x01
     3e2:	7a 83       	std	Y+2, r23	; 0x02
     3e4:	8b 83       	std	Y+3, r24	; 0x03
     3e6:	9c 83       	std	Y+4, r25	; 0x04
     3e8:	2d 83       	std	Y+5, r18	; 0x05
     3ea:	3e 83       	std	Y+6, r19	; 0x06
     3ec:	4f 83       	std	Y+7, r20	; 0x07
     3ee:	58 87       	std	Y+8, r21	; 0x08
     3f0:	f9 e0       	ldi	r31, 0x09	; 9
     3f2:	ef 2e       	mov	r14, r31
     3f4:	f1 2c       	mov	r15, r1
     3f6:	ec 0e       	add	r14, r28
     3f8:	fd 1e       	adc	r15, r29
     3fa:	ce 01       	movw	r24, r28
     3fc:	01 96       	adiw	r24, 0x01	; 1
     3fe:	b7 01       	movw	r22, r14
     400:	0e 94 3e 06 	call	0xc7c	; 0xc7c <__unpack_f>
     404:	8e 01       	movw	r16, r28
     406:	0f 5e       	subi	r16, 0xEF	; 239
     408:	1f 4f       	sbci	r17, 0xFF	; 255
     40a:	ce 01       	movw	r24, r28
     40c:	05 96       	adiw	r24, 0x05	; 5
     40e:	b8 01       	movw	r22, r16
     410:	0e 94 3e 06 	call	0xc7c	; 0xc7c <__unpack_f>
     414:	c7 01       	movw	r24, r14
     416:	b8 01       	movw	r22, r16
     418:	ae 01       	movw	r20, r28
     41a:	47 5e       	subi	r20, 0xE7	; 231
     41c:	5f 4f       	sbci	r21, 0xFF	; 255
     41e:	0e 94 6d 00 	call	0xda	; 0xda <_fpadd_parts>
     422:	0e 94 69 05 	call	0xad2	; 0xad2 <__pack_f>
     426:	a0 96       	adiw	r28, 0x20	; 32
     428:	e6 e0       	ldi	r30, 0x06	; 6
     42a:	0c 94 09 14 	jmp	0x2812	; 0x2812 <__epilogue_restores__+0x18>

0000042e <__mulsf3>:
     42e:	a0 e2       	ldi	r26, 0x20	; 32
     430:	b0 e0       	ldi	r27, 0x00	; 0
     432:	ed e1       	ldi	r30, 0x1D	; 29
     434:	f2 e0       	ldi	r31, 0x02	; 2
     436:	0c 94 e1 13 	jmp	0x27c2	; 0x27c2 <__prologue_saves__>
     43a:	69 83       	std	Y+1, r22	; 0x01
     43c:	7a 83       	std	Y+2, r23	; 0x02
     43e:	8b 83       	std	Y+3, r24	; 0x03
     440:	9c 83       	std	Y+4, r25	; 0x04
     442:	2d 83       	std	Y+5, r18	; 0x05
     444:	3e 83       	std	Y+6, r19	; 0x06
     446:	4f 83       	std	Y+7, r20	; 0x07
     448:	58 87       	std	Y+8, r21	; 0x08
     44a:	ce 01       	movw	r24, r28
     44c:	01 96       	adiw	r24, 0x01	; 1
     44e:	be 01       	movw	r22, r28
     450:	67 5f       	subi	r22, 0xF7	; 247
     452:	7f 4f       	sbci	r23, 0xFF	; 255
     454:	0e 94 3e 06 	call	0xc7c	; 0xc7c <__unpack_f>
     458:	ce 01       	movw	r24, r28
     45a:	05 96       	adiw	r24, 0x05	; 5
     45c:	be 01       	movw	r22, r28
     45e:	6f 5e       	subi	r22, 0xEF	; 239
     460:	7f 4f       	sbci	r23, 0xFF	; 255
     462:	0e 94 3e 06 	call	0xc7c	; 0xc7c <__unpack_f>
     466:	99 85       	ldd	r25, Y+9	; 0x09
     468:	92 30       	cpi	r25, 0x02	; 2
     46a:	88 f0       	brcs	.+34     	; 0x48e <__mulsf3+0x60>
     46c:	89 89       	ldd	r24, Y+17	; 0x11
     46e:	82 30       	cpi	r24, 0x02	; 2
     470:	c8 f0       	brcs	.+50     	; 0x4a4 <__mulsf3+0x76>
     472:	94 30       	cpi	r25, 0x04	; 4
     474:	19 f4       	brne	.+6      	; 0x47c <__mulsf3+0x4e>
     476:	82 30       	cpi	r24, 0x02	; 2
     478:	51 f4       	brne	.+20     	; 0x48e <__mulsf3+0x60>
     47a:	04 c0       	rjmp	.+8      	; 0x484 <__mulsf3+0x56>
     47c:	84 30       	cpi	r24, 0x04	; 4
     47e:	29 f4       	brne	.+10     	; 0x48a <__mulsf3+0x5c>
     480:	92 30       	cpi	r25, 0x02	; 2
     482:	81 f4       	brne	.+32     	; 0x4a4 <__mulsf3+0x76>
     484:	80 e6       	ldi	r24, 0x60	; 96
     486:	90 e0       	ldi	r25, 0x00	; 0
     488:	c6 c0       	rjmp	.+396    	; 0x616 <__mulsf3+0x1e8>
     48a:	92 30       	cpi	r25, 0x02	; 2
     48c:	49 f4       	brne	.+18     	; 0x4a0 <__mulsf3+0x72>
     48e:	20 e0       	ldi	r18, 0x00	; 0
     490:	9a 85       	ldd	r25, Y+10	; 0x0a
     492:	8a 89       	ldd	r24, Y+18	; 0x12
     494:	98 13       	cpse	r25, r24
     496:	21 e0       	ldi	r18, 0x01	; 1
     498:	2a 87       	std	Y+10, r18	; 0x0a
     49a:	ce 01       	movw	r24, r28
     49c:	09 96       	adiw	r24, 0x09	; 9
     49e:	bb c0       	rjmp	.+374    	; 0x616 <__mulsf3+0x1e8>
     4a0:	82 30       	cpi	r24, 0x02	; 2
     4a2:	49 f4       	brne	.+18     	; 0x4b6 <__mulsf3+0x88>
     4a4:	20 e0       	ldi	r18, 0x00	; 0
     4a6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a8:	8a 89       	ldd	r24, Y+18	; 0x12
     4aa:	98 13       	cpse	r25, r24
     4ac:	21 e0       	ldi	r18, 0x01	; 1
     4ae:	2a 8b       	std	Y+18, r18	; 0x12
     4b0:	ce 01       	movw	r24, r28
     4b2:	41 96       	adiw	r24, 0x11	; 17
     4b4:	b0 c0       	rjmp	.+352    	; 0x616 <__mulsf3+0x1e8>
     4b6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4b8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ba:	4f 84       	ldd	r4, Y+15	; 0x0f
     4bc:	58 88       	ldd	r5, Y+16	; 0x10
     4be:	6d 88       	ldd	r6, Y+21	; 0x15
     4c0:	7e 88       	ldd	r7, Y+22	; 0x16
     4c2:	8f 88       	ldd	r8, Y+23	; 0x17
     4c4:	98 8c       	ldd	r9, Y+24	; 0x18
     4c6:	ee 24       	eor	r14, r14
     4c8:	ff 24       	eor	r15, r15
     4ca:	87 01       	movw	r16, r14
     4cc:	aa 24       	eor	r10, r10
     4ce:	bb 24       	eor	r11, r11
     4d0:	65 01       	movw	r12, r10
     4d2:	40 e0       	ldi	r20, 0x00	; 0
     4d4:	50 e0       	ldi	r21, 0x00	; 0
     4d6:	60 e0       	ldi	r22, 0x00	; 0
     4d8:	70 e0       	ldi	r23, 0x00	; 0
     4da:	e0 e0       	ldi	r30, 0x00	; 0
     4dc:	f0 e0       	ldi	r31, 0x00	; 0
     4de:	c1 01       	movw	r24, r2
     4e0:	81 70       	andi	r24, 0x01	; 1
     4e2:	90 70       	andi	r25, 0x00	; 0
     4e4:	89 2b       	or	r24, r25
     4e6:	e9 f0       	breq	.+58     	; 0x522 <__mulsf3+0xf4>
     4e8:	e6 0c       	add	r14, r6
     4ea:	f7 1c       	adc	r15, r7
     4ec:	08 1d       	adc	r16, r8
     4ee:	19 1d       	adc	r17, r9
     4f0:	9a 01       	movw	r18, r20
     4f2:	ab 01       	movw	r20, r22
     4f4:	2a 0d       	add	r18, r10
     4f6:	3b 1d       	adc	r19, r11
     4f8:	4c 1d       	adc	r20, r12
     4fa:	5d 1d       	adc	r21, r13
     4fc:	80 e0       	ldi	r24, 0x00	; 0
     4fe:	90 e0       	ldi	r25, 0x00	; 0
     500:	a0 e0       	ldi	r26, 0x00	; 0
     502:	b0 e0       	ldi	r27, 0x00	; 0
     504:	e6 14       	cp	r14, r6
     506:	f7 04       	cpc	r15, r7
     508:	08 05       	cpc	r16, r8
     50a:	19 05       	cpc	r17, r9
     50c:	20 f4       	brcc	.+8      	; 0x516 <__mulsf3+0xe8>
     50e:	81 e0       	ldi	r24, 0x01	; 1
     510:	90 e0       	ldi	r25, 0x00	; 0
     512:	a0 e0       	ldi	r26, 0x00	; 0
     514:	b0 e0       	ldi	r27, 0x00	; 0
     516:	ba 01       	movw	r22, r20
     518:	a9 01       	movw	r20, r18
     51a:	48 0f       	add	r20, r24
     51c:	59 1f       	adc	r21, r25
     51e:	6a 1f       	adc	r22, r26
     520:	7b 1f       	adc	r23, r27
     522:	aa 0c       	add	r10, r10
     524:	bb 1c       	adc	r11, r11
     526:	cc 1c       	adc	r12, r12
     528:	dd 1c       	adc	r13, r13
     52a:	97 fe       	sbrs	r9, 7
     52c:	08 c0       	rjmp	.+16     	; 0x53e <__mulsf3+0x110>
     52e:	81 e0       	ldi	r24, 0x01	; 1
     530:	90 e0       	ldi	r25, 0x00	; 0
     532:	a0 e0       	ldi	r26, 0x00	; 0
     534:	b0 e0       	ldi	r27, 0x00	; 0
     536:	a8 2a       	or	r10, r24
     538:	b9 2a       	or	r11, r25
     53a:	ca 2a       	or	r12, r26
     53c:	db 2a       	or	r13, r27
     53e:	31 96       	adiw	r30, 0x01	; 1
     540:	e0 32       	cpi	r30, 0x20	; 32
     542:	f1 05       	cpc	r31, r1
     544:	49 f0       	breq	.+18     	; 0x558 <__mulsf3+0x12a>
     546:	66 0c       	add	r6, r6
     548:	77 1c       	adc	r7, r7
     54a:	88 1c       	adc	r8, r8
     54c:	99 1c       	adc	r9, r9
     54e:	56 94       	lsr	r5
     550:	47 94       	ror	r4
     552:	37 94       	ror	r3
     554:	27 94       	ror	r2
     556:	c3 cf       	rjmp	.-122    	; 0x4de <__mulsf3+0xb0>
     558:	fa 85       	ldd	r31, Y+10	; 0x0a
     55a:	ea 89       	ldd	r30, Y+18	; 0x12
     55c:	2b 89       	ldd	r18, Y+19	; 0x13
     55e:	3c 89       	ldd	r19, Y+20	; 0x14
     560:	8b 85       	ldd	r24, Y+11	; 0x0b
     562:	9c 85       	ldd	r25, Y+12	; 0x0c
     564:	28 0f       	add	r18, r24
     566:	39 1f       	adc	r19, r25
     568:	2e 5f       	subi	r18, 0xFE	; 254
     56a:	3f 4f       	sbci	r19, 0xFF	; 255
     56c:	17 c0       	rjmp	.+46     	; 0x59c <__mulsf3+0x16e>
     56e:	ca 01       	movw	r24, r20
     570:	81 70       	andi	r24, 0x01	; 1
     572:	90 70       	andi	r25, 0x00	; 0
     574:	89 2b       	or	r24, r25
     576:	61 f0       	breq	.+24     	; 0x590 <__mulsf3+0x162>
     578:	16 95       	lsr	r17
     57a:	07 95       	ror	r16
     57c:	f7 94       	ror	r15
     57e:	e7 94       	ror	r14
     580:	80 e0       	ldi	r24, 0x00	; 0
     582:	90 e0       	ldi	r25, 0x00	; 0
     584:	a0 e0       	ldi	r26, 0x00	; 0
     586:	b0 e8       	ldi	r27, 0x80	; 128
     588:	e8 2a       	or	r14, r24
     58a:	f9 2a       	or	r15, r25
     58c:	0a 2b       	or	r16, r26
     58e:	1b 2b       	or	r17, r27
     590:	76 95       	lsr	r23
     592:	67 95       	ror	r22
     594:	57 95       	ror	r21
     596:	47 95       	ror	r20
     598:	2f 5f       	subi	r18, 0xFF	; 255
     59a:	3f 4f       	sbci	r19, 0xFF	; 255
     59c:	77 fd       	sbrc	r23, 7
     59e:	e7 cf       	rjmp	.-50     	; 0x56e <__mulsf3+0x140>
     5a0:	0c c0       	rjmp	.+24     	; 0x5ba <__mulsf3+0x18c>
     5a2:	44 0f       	add	r20, r20
     5a4:	55 1f       	adc	r21, r21
     5a6:	66 1f       	adc	r22, r22
     5a8:	77 1f       	adc	r23, r23
     5aa:	17 fd       	sbrc	r17, 7
     5ac:	41 60       	ori	r20, 0x01	; 1
     5ae:	ee 0c       	add	r14, r14
     5b0:	ff 1c       	adc	r15, r15
     5b2:	00 1f       	adc	r16, r16
     5b4:	11 1f       	adc	r17, r17
     5b6:	21 50       	subi	r18, 0x01	; 1
     5b8:	30 40       	sbci	r19, 0x00	; 0
     5ba:	40 30       	cpi	r20, 0x00	; 0
     5bc:	90 e0       	ldi	r25, 0x00	; 0
     5be:	59 07       	cpc	r21, r25
     5c0:	90 e0       	ldi	r25, 0x00	; 0
     5c2:	69 07       	cpc	r22, r25
     5c4:	90 e4       	ldi	r25, 0x40	; 64
     5c6:	79 07       	cpc	r23, r25
     5c8:	60 f3       	brcs	.-40     	; 0x5a2 <__mulsf3+0x174>
     5ca:	2b 8f       	std	Y+27, r18	; 0x1b
     5cc:	3c 8f       	std	Y+28, r19	; 0x1c
     5ce:	db 01       	movw	r26, r22
     5d0:	ca 01       	movw	r24, r20
     5d2:	8f 77       	andi	r24, 0x7F	; 127
     5d4:	90 70       	andi	r25, 0x00	; 0
     5d6:	a0 70       	andi	r26, 0x00	; 0
     5d8:	b0 70       	andi	r27, 0x00	; 0
     5da:	80 34       	cpi	r24, 0x40	; 64
     5dc:	91 05       	cpc	r25, r1
     5de:	a1 05       	cpc	r26, r1
     5e0:	b1 05       	cpc	r27, r1
     5e2:	61 f4       	brne	.+24     	; 0x5fc <__mulsf3+0x1ce>
     5e4:	47 fd       	sbrc	r20, 7
     5e6:	0a c0       	rjmp	.+20     	; 0x5fc <__mulsf3+0x1ce>
     5e8:	e1 14       	cp	r14, r1
     5ea:	f1 04       	cpc	r15, r1
     5ec:	01 05       	cpc	r16, r1
     5ee:	11 05       	cpc	r17, r1
     5f0:	29 f0       	breq	.+10     	; 0x5fc <__mulsf3+0x1ce>
     5f2:	40 5c       	subi	r20, 0xC0	; 192
     5f4:	5f 4f       	sbci	r21, 0xFF	; 255
     5f6:	6f 4f       	sbci	r22, 0xFF	; 255
     5f8:	7f 4f       	sbci	r23, 0xFF	; 255
     5fa:	40 78       	andi	r20, 0x80	; 128
     5fc:	1a 8e       	std	Y+26, r1	; 0x1a
     5fe:	fe 17       	cp	r31, r30
     600:	11 f0       	breq	.+4      	; 0x606 <__mulsf3+0x1d8>
     602:	81 e0       	ldi	r24, 0x01	; 1
     604:	8a 8f       	std	Y+26, r24	; 0x1a
     606:	4d 8f       	std	Y+29, r20	; 0x1d
     608:	5e 8f       	std	Y+30, r21	; 0x1e
     60a:	6f 8f       	std	Y+31, r22	; 0x1f
     60c:	78 a3       	std	Y+32, r23	; 0x20
     60e:	83 e0       	ldi	r24, 0x03	; 3
     610:	89 8f       	std	Y+25, r24	; 0x19
     612:	ce 01       	movw	r24, r28
     614:	49 96       	adiw	r24, 0x19	; 25
     616:	0e 94 69 05 	call	0xad2	; 0xad2 <__pack_f>
     61a:	a0 96       	adiw	r28, 0x20	; 32
     61c:	e2 e1       	ldi	r30, 0x12	; 18
     61e:	0c 94 fd 13 	jmp	0x27fa	; 0x27fa <__epilogue_restores__>

00000622 <__divsf3>:
     622:	a8 e1       	ldi	r26, 0x18	; 24
     624:	b0 e0       	ldi	r27, 0x00	; 0
     626:	e7 e1       	ldi	r30, 0x17	; 23
     628:	f3 e0       	ldi	r31, 0x03	; 3
     62a:	0c 94 e9 13 	jmp	0x27d2	; 0x27d2 <__prologue_saves__+0x10>
     62e:	69 83       	std	Y+1, r22	; 0x01
     630:	7a 83       	std	Y+2, r23	; 0x02
     632:	8b 83       	std	Y+3, r24	; 0x03
     634:	9c 83       	std	Y+4, r25	; 0x04
     636:	2d 83       	std	Y+5, r18	; 0x05
     638:	3e 83       	std	Y+6, r19	; 0x06
     63a:	4f 83       	std	Y+7, r20	; 0x07
     63c:	58 87       	std	Y+8, r21	; 0x08
     63e:	b9 e0       	ldi	r27, 0x09	; 9
     640:	eb 2e       	mov	r14, r27
     642:	f1 2c       	mov	r15, r1
     644:	ec 0e       	add	r14, r28
     646:	fd 1e       	adc	r15, r29
     648:	ce 01       	movw	r24, r28
     64a:	01 96       	adiw	r24, 0x01	; 1
     64c:	b7 01       	movw	r22, r14
     64e:	0e 94 3e 06 	call	0xc7c	; 0xc7c <__unpack_f>
     652:	8e 01       	movw	r16, r28
     654:	0f 5e       	subi	r16, 0xEF	; 239
     656:	1f 4f       	sbci	r17, 0xFF	; 255
     658:	ce 01       	movw	r24, r28
     65a:	05 96       	adiw	r24, 0x05	; 5
     65c:	b8 01       	movw	r22, r16
     65e:	0e 94 3e 06 	call	0xc7c	; 0xc7c <__unpack_f>
     662:	29 85       	ldd	r18, Y+9	; 0x09
     664:	22 30       	cpi	r18, 0x02	; 2
     666:	08 f4       	brcc	.+2      	; 0x66a <__divsf3+0x48>
     668:	7e c0       	rjmp	.+252    	; 0x766 <__divsf3+0x144>
     66a:	39 89       	ldd	r19, Y+17	; 0x11
     66c:	32 30       	cpi	r19, 0x02	; 2
     66e:	10 f4       	brcc	.+4      	; 0x674 <__divsf3+0x52>
     670:	b8 01       	movw	r22, r16
     672:	7c c0       	rjmp	.+248    	; 0x76c <__divsf3+0x14a>
     674:	8a 85       	ldd	r24, Y+10	; 0x0a
     676:	9a 89       	ldd	r25, Y+18	; 0x12
     678:	89 27       	eor	r24, r25
     67a:	8a 87       	std	Y+10, r24	; 0x0a
     67c:	24 30       	cpi	r18, 0x04	; 4
     67e:	11 f0       	breq	.+4      	; 0x684 <__divsf3+0x62>
     680:	22 30       	cpi	r18, 0x02	; 2
     682:	31 f4       	brne	.+12     	; 0x690 <__divsf3+0x6e>
     684:	23 17       	cp	r18, r19
     686:	09 f0       	breq	.+2      	; 0x68a <__divsf3+0x68>
     688:	6e c0       	rjmp	.+220    	; 0x766 <__divsf3+0x144>
     68a:	60 e6       	ldi	r22, 0x60	; 96
     68c:	70 e0       	ldi	r23, 0x00	; 0
     68e:	6e c0       	rjmp	.+220    	; 0x76c <__divsf3+0x14a>
     690:	34 30       	cpi	r19, 0x04	; 4
     692:	39 f4       	brne	.+14     	; 0x6a2 <__divsf3+0x80>
     694:	1d 86       	std	Y+13, r1	; 0x0d
     696:	1e 86       	std	Y+14, r1	; 0x0e
     698:	1f 86       	std	Y+15, r1	; 0x0f
     69a:	18 8a       	std	Y+16, r1	; 0x10
     69c:	1c 86       	std	Y+12, r1	; 0x0c
     69e:	1b 86       	std	Y+11, r1	; 0x0b
     6a0:	04 c0       	rjmp	.+8      	; 0x6aa <__divsf3+0x88>
     6a2:	32 30       	cpi	r19, 0x02	; 2
     6a4:	21 f4       	brne	.+8      	; 0x6ae <__divsf3+0x8c>
     6a6:	84 e0       	ldi	r24, 0x04	; 4
     6a8:	89 87       	std	Y+9, r24	; 0x09
     6aa:	b7 01       	movw	r22, r14
     6ac:	5f c0       	rjmp	.+190    	; 0x76c <__divsf3+0x14a>
     6ae:	2b 85       	ldd	r18, Y+11	; 0x0b
     6b0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6b2:	8b 89       	ldd	r24, Y+19	; 0x13
     6b4:	9c 89       	ldd	r25, Y+20	; 0x14
     6b6:	28 1b       	sub	r18, r24
     6b8:	39 0b       	sbc	r19, r25
     6ba:	3c 87       	std	Y+12, r19	; 0x0c
     6bc:	2b 87       	std	Y+11, r18	; 0x0b
     6be:	ed 84       	ldd	r14, Y+13	; 0x0d
     6c0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6c2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6c4:	18 89       	ldd	r17, Y+16	; 0x10
     6c6:	ad 88       	ldd	r10, Y+21	; 0x15
     6c8:	be 88       	ldd	r11, Y+22	; 0x16
     6ca:	cf 88       	ldd	r12, Y+23	; 0x17
     6cc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6ce:	ea 14       	cp	r14, r10
     6d0:	fb 04       	cpc	r15, r11
     6d2:	0c 05       	cpc	r16, r12
     6d4:	1d 05       	cpc	r17, r13
     6d6:	40 f4       	brcc	.+16     	; 0x6e8 <__divsf3+0xc6>
     6d8:	ee 0c       	add	r14, r14
     6da:	ff 1c       	adc	r15, r15
     6dc:	00 1f       	adc	r16, r16
     6de:	11 1f       	adc	r17, r17
     6e0:	21 50       	subi	r18, 0x01	; 1
     6e2:	30 40       	sbci	r19, 0x00	; 0
     6e4:	3c 87       	std	Y+12, r19	; 0x0c
     6e6:	2b 87       	std	Y+11, r18	; 0x0b
     6e8:	20 e0       	ldi	r18, 0x00	; 0
     6ea:	30 e0       	ldi	r19, 0x00	; 0
     6ec:	40 e0       	ldi	r20, 0x00	; 0
     6ee:	50 e0       	ldi	r21, 0x00	; 0
     6f0:	80 e0       	ldi	r24, 0x00	; 0
     6f2:	90 e0       	ldi	r25, 0x00	; 0
     6f4:	a0 e0       	ldi	r26, 0x00	; 0
     6f6:	b0 e4       	ldi	r27, 0x40	; 64
     6f8:	60 e0       	ldi	r22, 0x00	; 0
     6fa:	70 e0       	ldi	r23, 0x00	; 0
     6fc:	ea 14       	cp	r14, r10
     6fe:	fb 04       	cpc	r15, r11
     700:	0c 05       	cpc	r16, r12
     702:	1d 05       	cpc	r17, r13
     704:	40 f0       	brcs	.+16     	; 0x716 <__divsf3+0xf4>
     706:	28 2b       	or	r18, r24
     708:	39 2b       	or	r19, r25
     70a:	4a 2b       	or	r20, r26
     70c:	5b 2b       	or	r21, r27
     70e:	ea 18       	sub	r14, r10
     710:	fb 08       	sbc	r15, r11
     712:	0c 09       	sbc	r16, r12
     714:	1d 09       	sbc	r17, r13
     716:	b6 95       	lsr	r27
     718:	a7 95       	ror	r26
     71a:	97 95       	ror	r25
     71c:	87 95       	ror	r24
     71e:	ee 0c       	add	r14, r14
     720:	ff 1c       	adc	r15, r15
     722:	00 1f       	adc	r16, r16
     724:	11 1f       	adc	r17, r17
     726:	6f 5f       	subi	r22, 0xFF	; 255
     728:	7f 4f       	sbci	r23, 0xFF	; 255
     72a:	6f 31       	cpi	r22, 0x1F	; 31
     72c:	71 05       	cpc	r23, r1
     72e:	31 f7       	brne	.-52     	; 0x6fc <__divsf3+0xda>
     730:	da 01       	movw	r26, r20
     732:	c9 01       	movw	r24, r18
     734:	8f 77       	andi	r24, 0x7F	; 127
     736:	90 70       	andi	r25, 0x00	; 0
     738:	a0 70       	andi	r26, 0x00	; 0
     73a:	b0 70       	andi	r27, 0x00	; 0
     73c:	80 34       	cpi	r24, 0x40	; 64
     73e:	91 05       	cpc	r25, r1
     740:	a1 05       	cpc	r26, r1
     742:	b1 05       	cpc	r27, r1
     744:	61 f4       	brne	.+24     	; 0x75e <__divsf3+0x13c>
     746:	27 fd       	sbrc	r18, 7
     748:	0a c0       	rjmp	.+20     	; 0x75e <__divsf3+0x13c>
     74a:	e1 14       	cp	r14, r1
     74c:	f1 04       	cpc	r15, r1
     74e:	01 05       	cpc	r16, r1
     750:	11 05       	cpc	r17, r1
     752:	29 f0       	breq	.+10     	; 0x75e <__divsf3+0x13c>
     754:	20 5c       	subi	r18, 0xC0	; 192
     756:	3f 4f       	sbci	r19, 0xFF	; 255
     758:	4f 4f       	sbci	r20, 0xFF	; 255
     75a:	5f 4f       	sbci	r21, 0xFF	; 255
     75c:	20 78       	andi	r18, 0x80	; 128
     75e:	2d 87       	std	Y+13, r18	; 0x0d
     760:	3e 87       	std	Y+14, r19	; 0x0e
     762:	4f 87       	std	Y+15, r20	; 0x0f
     764:	58 8b       	std	Y+16, r21	; 0x10
     766:	be 01       	movw	r22, r28
     768:	67 5f       	subi	r22, 0xF7	; 247
     76a:	7f 4f       	sbci	r23, 0xFF	; 255
     76c:	cb 01       	movw	r24, r22
     76e:	0e 94 69 05 	call	0xad2	; 0xad2 <__pack_f>
     772:	68 96       	adiw	r28, 0x18	; 24
     774:	ea e0       	ldi	r30, 0x0A	; 10
     776:	0c 94 05 14 	jmp	0x280a	; 0x280a <__epilogue_restores__+0x10>

0000077a <__gtsf2>:
     77a:	a8 e1       	ldi	r26, 0x18	; 24
     77c:	b0 e0       	ldi	r27, 0x00	; 0
     77e:	e3 ec       	ldi	r30, 0xC3	; 195
     780:	f3 e0       	ldi	r31, 0x03	; 3
     782:	0c 94 ed 13 	jmp	0x27da	; 0x27da <__prologue_saves__+0x18>
     786:	69 83       	std	Y+1, r22	; 0x01
     788:	7a 83       	std	Y+2, r23	; 0x02
     78a:	8b 83       	std	Y+3, r24	; 0x03
     78c:	9c 83       	std	Y+4, r25	; 0x04
     78e:	2d 83       	std	Y+5, r18	; 0x05
     790:	3e 83       	std	Y+6, r19	; 0x06
     792:	4f 83       	std	Y+7, r20	; 0x07
     794:	58 87       	std	Y+8, r21	; 0x08
     796:	89 e0       	ldi	r24, 0x09	; 9
     798:	e8 2e       	mov	r14, r24
     79a:	f1 2c       	mov	r15, r1
     79c:	ec 0e       	add	r14, r28
     79e:	fd 1e       	adc	r15, r29
     7a0:	ce 01       	movw	r24, r28
     7a2:	01 96       	adiw	r24, 0x01	; 1
     7a4:	b7 01       	movw	r22, r14
     7a6:	0e 94 3e 06 	call	0xc7c	; 0xc7c <__unpack_f>
     7aa:	8e 01       	movw	r16, r28
     7ac:	0f 5e       	subi	r16, 0xEF	; 239
     7ae:	1f 4f       	sbci	r17, 0xFF	; 255
     7b0:	ce 01       	movw	r24, r28
     7b2:	05 96       	adiw	r24, 0x05	; 5
     7b4:	b8 01       	movw	r22, r16
     7b6:	0e 94 3e 06 	call	0xc7c	; 0xc7c <__unpack_f>
     7ba:	89 85       	ldd	r24, Y+9	; 0x09
     7bc:	82 30       	cpi	r24, 0x02	; 2
     7be:	40 f0       	brcs	.+16     	; 0x7d0 <__gtsf2+0x56>
     7c0:	89 89       	ldd	r24, Y+17	; 0x11
     7c2:	82 30       	cpi	r24, 0x02	; 2
     7c4:	28 f0       	brcs	.+10     	; 0x7d0 <__gtsf2+0x56>
     7c6:	c7 01       	movw	r24, r14
     7c8:	b8 01       	movw	r22, r16
     7ca:	0e 94 b6 06 	call	0xd6c	; 0xd6c <__fpcmp_parts_f>
     7ce:	01 c0       	rjmp	.+2      	; 0x7d2 <__gtsf2+0x58>
     7d0:	8f ef       	ldi	r24, 0xFF	; 255
     7d2:	68 96       	adiw	r28, 0x18	; 24
     7d4:	e6 e0       	ldi	r30, 0x06	; 6
     7d6:	0c 94 09 14 	jmp	0x2812	; 0x2812 <__epilogue_restores__+0x18>

000007da <__gesf2>:
     7da:	a8 e1       	ldi	r26, 0x18	; 24
     7dc:	b0 e0       	ldi	r27, 0x00	; 0
     7de:	e3 ef       	ldi	r30, 0xF3	; 243
     7e0:	f3 e0       	ldi	r31, 0x03	; 3
     7e2:	0c 94 ed 13 	jmp	0x27da	; 0x27da <__prologue_saves__+0x18>
     7e6:	69 83       	std	Y+1, r22	; 0x01
     7e8:	7a 83       	std	Y+2, r23	; 0x02
     7ea:	8b 83       	std	Y+3, r24	; 0x03
     7ec:	9c 83       	std	Y+4, r25	; 0x04
     7ee:	2d 83       	std	Y+5, r18	; 0x05
     7f0:	3e 83       	std	Y+6, r19	; 0x06
     7f2:	4f 83       	std	Y+7, r20	; 0x07
     7f4:	58 87       	std	Y+8, r21	; 0x08
     7f6:	89 e0       	ldi	r24, 0x09	; 9
     7f8:	e8 2e       	mov	r14, r24
     7fa:	f1 2c       	mov	r15, r1
     7fc:	ec 0e       	add	r14, r28
     7fe:	fd 1e       	adc	r15, r29
     800:	ce 01       	movw	r24, r28
     802:	01 96       	adiw	r24, 0x01	; 1
     804:	b7 01       	movw	r22, r14
     806:	0e 94 3e 06 	call	0xc7c	; 0xc7c <__unpack_f>
     80a:	8e 01       	movw	r16, r28
     80c:	0f 5e       	subi	r16, 0xEF	; 239
     80e:	1f 4f       	sbci	r17, 0xFF	; 255
     810:	ce 01       	movw	r24, r28
     812:	05 96       	adiw	r24, 0x05	; 5
     814:	b8 01       	movw	r22, r16
     816:	0e 94 3e 06 	call	0xc7c	; 0xc7c <__unpack_f>
     81a:	89 85       	ldd	r24, Y+9	; 0x09
     81c:	82 30       	cpi	r24, 0x02	; 2
     81e:	40 f0       	brcs	.+16     	; 0x830 <__gesf2+0x56>
     820:	89 89       	ldd	r24, Y+17	; 0x11
     822:	82 30       	cpi	r24, 0x02	; 2
     824:	28 f0       	brcs	.+10     	; 0x830 <__gesf2+0x56>
     826:	c7 01       	movw	r24, r14
     828:	b8 01       	movw	r22, r16
     82a:	0e 94 b6 06 	call	0xd6c	; 0xd6c <__fpcmp_parts_f>
     82e:	01 c0       	rjmp	.+2      	; 0x832 <__gesf2+0x58>
     830:	8f ef       	ldi	r24, 0xFF	; 255
     832:	68 96       	adiw	r28, 0x18	; 24
     834:	e6 e0       	ldi	r30, 0x06	; 6
     836:	0c 94 09 14 	jmp	0x2812	; 0x2812 <__epilogue_restores__+0x18>

0000083a <__ltsf2>:
     83a:	a8 e1       	ldi	r26, 0x18	; 24
     83c:	b0 e0       	ldi	r27, 0x00	; 0
     83e:	e3 e2       	ldi	r30, 0x23	; 35
     840:	f4 e0       	ldi	r31, 0x04	; 4
     842:	0c 94 ed 13 	jmp	0x27da	; 0x27da <__prologue_saves__+0x18>
     846:	69 83       	std	Y+1, r22	; 0x01
     848:	7a 83       	std	Y+2, r23	; 0x02
     84a:	8b 83       	std	Y+3, r24	; 0x03
     84c:	9c 83       	std	Y+4, r25	; 0x04
     84e:	2d 83       	std	Y+5, r18	; 0x05
     850:	3e 83       	std	Y+6, r19	; 0x06
     852:	4f 83       	std	Y+7, r20	; 0x07
     854:	58 87       	std	Y+8, r21	; 0x08
     856:	89 e0       	ldi	r24, 0x09	; 9
     858:	e8 2e       	mov	r14, r24
     85a:	f1 2c       	mov	r15, r1
     85c:	ec 0e       	add	r14, r28
     85e:	fd 1e       	adc	r15, r29
     860:	ce 01       	movw	r24, r28
     862:	01 96       	adiw	r24, 0x01	; 1
     864:	b7 01       	movw	r22, r14
     866:	0e 94 3e 06 	call	0xc7c	; 0xc7c <__unpack_f>
     86a:	8e 01       	movw	r16, r28
     86c:	0f 5e       	subi	r16, 0xEF	; 239
     86e:	1f 4f       	sbci	r17, 0xFF	; 255
     870:	ce 01       	movw	r24, r28
     872:	05 96       	adiw	r24, 0x05	; 5
     874:	b8 01       	movw	r22, r16
     876:	0e 94 3e 06 	call	0xc7c	; 0xc7c <__unpack_f>
     87a:	89 85       	ldd	r24, Y+9	; 0x09
     87c:	82 30       	cpi	r24, 0x02	; 2
     87e:	40 f0       	brcs	.+16     	; 0x890 <__stack+0x31>
     880:	89 89       	ldd	r24, Y+17	; 0x11
     882:	82 30       	cpi	r24, 0x02	; 2
     884:	28 f0       	brcs	.+10     	; 0x890 <__stack+0x31>
     886:	c7 01       	movw	r24, r14
     888:	b8 01       	movw	r22, r16
     88a:	0e 94 b6 06 	call	0xd6c	; 0xd6c <__fpcmp_parts_f>
     88e:	01 c0       	rjmp	.+2      	; 0x892 <__stack+0x33>
     890:	81 e0       	ldi	r24, 0x01	; 1
     892:	68 96       	adiw	r28, 0x18	; 24
     894:	e6 e0       	ldi	r30, 0x06	; 6
     896:	0c 94 09 14 	jmp	0x2812	; 0x2812 <__epilogue_restores__+0x18>

0000089a <__fixsfsi>:
     89a:	ac e0       	ldi	r26, 0x0C	; 12
     89c:	b0 e0       	ldi	r27, 0x00	; 0
     89e:	e3 e5       	ldi	r30, 0x53	; 83
     8a0:	f4 e0       	ldi	r31, 0x04	; 4
     8a2:	0c 94 f1 13 	jmp	0x27e2	; 0x27e2 <__prologue_saves__+0x20>
     8a6:	69 83       	std	Y+1, r22	; 0x01
     8a8:	7a 83       	std	Y+2, r23	; 0x02
     8aa:	8b 83       	std	Y+3, r24	; 0x03
     8ac:	9c 83       	std	Y+4, r25	; 0x04
     8ae:	ce 01       	movw	r24, r28
     8b0:	01 96       	adiw	r24, 0x01	; 1
     8b2:	be 01       	movw	r22, r28
     8b4:	6b 5f       	subi	r22, 0xFB	; 251
     8b6:	7f 4f       	sbci	r23, 0xFF	; 255
     8b8:	0e 94 3e 06 	call	0xc7c	; 0xc7c <__unpack_f>
     8bc:	8d 81       	ldd	r24, Y+5	; 0x05
     8be:	82 30       	cpi	r24, 0x02	; 2
     8c0:	61 f1       	breq	.+88     	; 0x91a <__fixsfsi+0x80>
     8c2:	82 30       	cpi	r24, 0x02	; 2
     8c4:	50 f1       	brcs	.+84     	; 0x91a <__fixsfsi+0x80>
     8c6:	84 30       	cpi	r24, 0x04	; 4
     8c8:	21 f4       	brne	.+8      	; 0x8d2 <__fixsfsi+0x38>
     8ca:	8e 81       	ldd	r24, Y+6	; 0x06
     8cc:	88 23       	and	r24, r24
     8ce:	51 f1       	breq	.+84     	; 0x924 <__fixsfsi+0x8a>
     8d0:	2e c0       	rjmp	.+92     	; 0x92e <__fixsfsi+0x94>
     8d2:	2f 81       	ldd	r18, Y+7	; 0x07
     8d4:	38 85       	ldd	r19, Y+8	; 0x08
     8d6:	37 fd       	sbrc	r19, 7
     8d8:	20 c0       	rjmp	.+64     	; 0x91a <__fixsfsi+0x80>
     8da:	6e 81       	ldd	r22, Y+6	; 0x06
     8dc:	2f 31       	cpi	r18, 0x1F	; 31
     8de:	31 05       	cpc	r19, r1
     8e0:	1c f0       	brlt	.+6      	; 0x8e8 <__fixsfsi+0x4e>
     8e2:	66 23       	and	r22, r22
     8e4:	f9 f0       	breq	.+62     	; 0x924 <__fixsfsi+0x8a>
     8e6:	23 c0       	rjmp	.+70     	; 0x92e <__fixsfsi+0x94>
     8e8:	8e e1       	ldi	r24, 0x1E	; 30
     8ea:	90 e0       	ldi	r25, 0x00	; 0
     8ec:	82 1b       	sub	r24, r18
     8ee:	93 0b       	sbc	r25, r19
     8f0:	29 85       	ldd	r18, Y+9	; 0x09
     8f2:	3a 85       	ldd	r19, Y+10	; 0x0a
     8f4:	4b 85       	ldd	r20, Y+11	; 0x0b
     8f6:	5c 85       	ldd	r21, Y+12	; 0x0c
     8f8:	04 c0       	rjmp	.+8      	; 0x902 <__fixsfsi+0x68>
     8fa:	56 95       	lsr	r21
     8fc:	47 95       	ror	r20
     8fe:	37 95       	ror	r19
     900:	27 95       	ror	r18
     902:	8a 95       	dec	r24
     904:	d2 f7       	brpl	.-12     	; 0x8fa <__fixsfsi+0x60>
     906:	66 23       	and	r22, r22
     908:	b1 f0       	breq	.+44     	; 0x936 <__fixsfsi+0x9c>
     90a:	50 95       	com	r21
     90c:	40 95       	com	r20
     90e:	30 95       	com	r19
     910:	21 95       	neg	r18
     912:	3f 4f       	sbci	r19, 0xFF	; 255
     914:	4f 4f       	sbci	r20, 0xFF	; 255
     916:	5f 4f       	sbci	r21, 0xFF	; 255
     918:	0e c0       	rjmp	.+28     	; 0x936 <__fixsfsi+0x9c>
     91a:	20 e0       	ldi	r18, 0x00	; 0
     91c:	30 e0       	ldi	r19, 0x00	; 0
     91e:	40 e0       	ldi	r20, 0x00	; 0
     920:	50 e0       	ldi	r21, 0x00	; 0
     922:	09 c0       	rjmp	.+18     	; 0x936 <__fixsfsi+0x9c>
     924:	2f ef       	ldi	r18, 0xFF	; 255
     926:	3f ef       	ldi	r19, 0xFF	; 255
     928:	4f ef       	ldi	r20, 0xFF	; 255
     92a:	5f e7       	ldi	r21, 0x7F	; 127
     92c:	04 c0       	rjmp	.+8      	; 0x936 <__fixsfsi+0x9c>
     92e:	20 e0       	ldi	r18, 0x00	; 0
     930:	30 e0       	ldi	r19, 0x00	; 0
     932:	40 e0       	ldi	r20, 0x00	; 0
     934:	50 e8       	ldi	r21, 0x80	; 128
     936:	b9 01       	movw	r22, r18
     938:	ca 01       	movw	r24, r20
     93a:	2c 96       	adiw	r28, 0x0c	; 12
     93c:	e2 e0       	ldi	r30, 0x02	; 2
     93e:	0c 94 0d 14 	jmp	0x281a	; 0x281a <__epilogue_restores__+0x20>

00000942 <__floatunsisf>:
     942:	a8 e0       	ldi	r26, 0x08	; 8
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e7 ea       	ldi	r30, 0xA7	; 167
     948:	f4 e0       	ldi	r31, 0x04	; 4
     94a:	0c 94 e9 13 	jmp	0x27d2	; 0x27d2 <__prologue_saves__+0x10>
     94e:	7b 01       	movw	r14, r22
     950:	8c 01       	movw	r16, r24
     952:	61 15       	cp	r22, r1
     954:	71 05       	cpc	r23, r1
     956:	81 05       	cpc	r24, r1
     958:	91 05       	cpc	r25, r1
     95a:	19 f4       	brne	.+6      	; 0x962 <__floatunsisf+0x20>
     95c:	82 e0       	ldi	r24, 0x02	; 2
     95e:	89 83       	std	Y+1, r24	; 0x01
     960:	60 c0       	rjmp	.+192    	; 0xa22 <__floatunsisf+0xe0>
     962:	83 e0       	ldi	r24, 0x03	; 3
     964:	89 83       	std	Y+1, r24	; 0x01
     966:	8e e1       	ldi	r24, 0x1E	; 30
     968:	c8 2e       	mov	r12, r24
     96a:	d1 2c       	mov	r13, r1
     96c:	dc 82       	std	Y+4, r13	; 0x04
     96e:	cb 82       	std	Y+3, r12	; 0x03
     970:	ed 82       	std	Y+5, r14	; 0x05
     972:	fe 82       	std	Y+6, r15	; 0x06
     974:	0f 83       	std	Y+7, r16	; 0x07
     976:	18 87       	std	Y+8, r17	; 0x08
     978:	c8 01       	movw	r24, r16
     97a:	b7 01       	movw	r22, r14
     97c:	0e 94 1a 05 	call	0xa34	; 0xa34 <__clzsi2>
     980:	fc 01       	movw	r30, r24
     982:	31 97       	sbiw	r30, 0x01	; 1
     984:	f7 ff       	sbrs	r31, 7
     986:	3b c0       	rjmp	.+118    	; 0x9fe <__floatunsisf+0xbc>
     988:	22 27       	eor	r18, r18
     98a:	33 27       	eor	r19, r19
     98c:	2e 1b       	sub	r18, r30
     98e:	3f 0b       	sbc	r19, r31
     990:	57 01       	movw	r10, r14
     992:	68 01       	movw	r12, r16
     994:	02 2e       	mov	r0, r18
     996:	04 c0       	rjmp	.+8      	; 0x9a0 <__floatunsisf+0x5e>
     998:	d6 94       	lsr	r13
     99a:	c7 94       	ror	r12
     99c:	b7 94       	ror	r11
     99e:	a7 94       	ror	r10
     9a0:	0a 94       	dec	r0
     9a2:	d2 f7       	brpl	.-12     	; 0x998 <__floatunsisf+0x56>
     9a4:	40 e0       	ldi	r20, 0x00	; 0
     9a6:	50 e0       	ldi	r21, 0x00	; 0
     9a8:	60 e0       	ldi	r22, 0x00	; 0
     9aa:	70 e0       	ldi	r23, 0x00	; 0
     9ac:	81 e0       	ldi	r24, 0x01	; 1
     9ae:	90 e0       	ldi	r25, 0x00	; 0
     9b0:	a0 e0       	ldi	r26, 0x00	; 0
     9b2:	b0 e0       	ldi	r27, 0x00	; 0
     9b4:	04 c0       	rjmp	.+8      	; 0x9be <__floatunsisf+0x7c>
     9b6:	88 0f       	add	r24, r24
     9b8:	99 1f       	adc	r25, r25
     9ba:	aa 1f       	adc	r26, r26
     9bc:	bb 1f       	adc	r27, r27
     9be:	2a 95       	dec	r18
     9c0:	d2 f7       	brpl	.-12     	; 0x9b6 <__floatunsisf+0x74>
     9c2:	01 97       	sbiw	r24, 0x01	; 1
     9c4:	a1 09       	sbc	r26, r1
     9c6:	b1 09       	sbc	r27, r1
     9c8:	8e 21       	and	r24, r14
     9ca:	9f 21       	and	r25, r15
     9cc:	a0 23       	and	r26, r16
     9ce:	b1 23       	and	r27, r17
     9d0:	00 97       	sbiw	r24, 0x00	; 0
     9d2:	a1 05       	cpc	r26, r1
     9d4:	b1 05       	cpc	r27, r1
     9d6:	21 f0       	breq	.+8      	; 0x9e0 <__floatunsisf+0x9e>
     9d8:	41 e0       	ldi	r20, 0x01	; 1
     9da:	50 e0       	ldi	r21, 0x00	; 0
     9dc:	60 e0       	ldi	r22, 0x00	; 0
     9de:	70 e0       	ldi	r23, 0x00	; 0
     9e0:	4a 29       	or	r20, r10
     9e2:	5b 29       	or	r21, r11
     9e4:	6c 29       	or	r22, r12
     9e6:	7d 29       	or	r23, r13
     9e8:	4d 83       	std	Y+5, r20	; 0x05
     9ea:	5e 83       	std	Y+6, r21	; 0x06
     9ec:	6f 83       	std	Y+7, r22	; 0x07
     9ee:	78 87       	std	Y+8, r23	; 0x08
     9f0:	8e e1       	ldi	r24, 0x1E	; 30
     9f2:	90 e0       	ldi	r25, 0x00	; 0
     9f4:	8e 1b       	sub	r24, r30
     9f6:	9f 0b       	sbc	r25, r31
     9f8:	9c 83       	std	Y+4, r25	; 0x04
     9fa:	8b 83       	std	Y+3, r24	; 0x03
     9fc:	12 c0       	rjmp	.+36     	; 0xa22 <__floatunsisf+0xe0>
     9fe:	30 97       	sbiw	r30, 0x00	; 0
     a00:	81 f0       	breq	.+32     	; 0xa22 <__floatunsisf+0xe0>
     a02:	0e 2e       	mov	r0, r30
     a04:	04 c0       	rjmp	.+8      	; 0xa0e <__floatunsisf+0xcc>
     a06:	ee 0c       	add	r14, r14
     a08:	ff 1c       	adc	r15, r15
     a0a:	00 1f       	adc	r16, r16
     a0c:	11 1f       	adc	r17, r17
     a0e:	0a 94       	dec	r0
     a10:	d2 f7       	brpl	.-12     	; 0xa06 <__floatunsisf+0xc4>
     a12:	ed 82       	std	Y+5, r14	; 0x05
     a14:	fe 82       	std	Y+6, r15	; 0x06
     a16:	0f 83       	std	Y+7, r16	; 0x07
     a18:	18 87       	std	Y+8, r17	; 0x08
     a1a:	ce 1a       	sub	r12, r30
     a1c:	df 0a       	sbc	r13, r31
     a1e:	dc 82       	std	Y+4, r13	; 0x04
     a20:	cb 82       	std	Y+3, r12	; 0x03
     a22:	1a 82       	std	Y+2, r1	; 0x02
     a24:	ce 01       	movw	r24, r28
     a26:	01 96       	adiw	r24, 0x01	; 1
     a28:	0e 94 69 05 	call	0xad2	; 0xad2 <__pack_f>
     a2c:	28 96       	adiw	r28, 0x08	; 8
     a2e:	ea e0       	ldi	r30, 0x0A	; 10
     a30:	0c 94 05 14 	jmp	0x280a	; 0x280a <__epilogue_restores__+0x10>

00000a34 <__clzsi2>:
     a34:	ef 92       	push	r14
     a36:	ff 92       	push	r15
     a38:	0f 93       	push	r16
     a3a:	1f 93       	push	r17
     a3c:	7b 01       	movw	r14, r22
     a3e:	8c 01       	movw	r16, r24
     a40:	80 e0       	ldi	r24, 0x00	; 0
     a42:	e8 16       	cp	r14, r24
     a44:	80 e0       	ldi	r24, 0x00	; 0
     a46:	f8 06       	cpc	r15, r24
     a48:	81 e0       	ldi	r24, 0x01	; 1
     a4a:	08 07       	cpc	r16, r24
     a4c:	80 e0       	ldi	r24, 0x00	; 0
     a4e:	18 07       	cpc	r17, r24
     a50:	88 f4       	brcc	.+34     	; 0xa74 <__clzsi2+0x40>
     a52:	8f ef       	ldi	r24, 0xFF	; 255
     a54:	e8 16       	cp	r14, r24
     a56:	f1 04       	cpc	r15, r1
     a58:	01 05       	cpc	r16, r1
     a5a:	11 05       	cpc	r17, r1
     a5c:	31 f0       	breq	.+12     	; 0xa6a <__clzsi2+0x36>
     a5e:	28 f0       	brcs	.+10     	; 0xa6a <__clzsi2+0x36>
     a60:	88 e0       	ldi	r24, 0x08	; 8
     a62:	90 e0       	ldi	r25, 0x00	; 0
     a64:	a0 e0       	ldi	r26, 0x00	; 0
     a66:	b0 e0       	ldi	r27, 0x00	; 0
     a68:	17 c0       	rjmp	.+46     	; 0xa98 <__clzsi2+0x64>
     a6a:	80 e0       	ldi	r24, 0x00	; 0
     a6c:	90 e0       	ldi	r25, 0x00	; 0
     a6e:	a0 e0       	ldi	r26, 0x00	; 0
     a70:	b0 e0       	ldi	r27, 0x00	; 0
     a72:	12 c0       	rjmp	.+36     	; 0xa98 <__clzsi2+0x64>
     a74:	80 e0       	ldi	r24, 0x00	; 0
     a76:	e8 16       	cp	r14, r24
     a78:	80 e0       	ldi	r24, 0x00	; 0
     a7a:	f8 06       	cpc	r15, r24
     a7c:	80 e0       	ldi	r24, 0x00	; 0
     a7e:	08 07       	cpc	r16, r24
     a80:	81 e0       	ldi	r24, 0x01	; 1
     a82:	18 07       	cpc	r17, r24
     a84:	28 f0       	brcs	.+10     	; 0xa90 <__clzsi2+0x5c>
     a86:	88 e1       	ldi	r24, 0x18	; 24
     a88:	90 e0       	ldi	r25, 0x00	; 0
     a8a:	a0 e0       	ldi	r26, 0x00	; 0
     a8c:	b0 e0       	ldi	r27, 0x00	; 0
     a8e:	04 c0       	rjmp	.+8      	; 0xa98 <__clzsi2+0x64>
     a90:	80 e1       	ldi	r24, 0x10	; 16
     a92:	90 e0       	ldi	r25, 0x00	; 0
     a94:	a0 e0       	ldi	r26, 0x00	; 0
     a96:	b0 e0       	ldi	r27, 0x00	; 0
     a98:	20 e2       	ldi	r18, 0x20	; 32
     a9a:	30 e0       	ldi	r19, 0x00	; 0
     a9c:	40 e0       	ldi	r20, 0x00	; 0
     a9e:	50 e0       	ldi	r21, 0x00	; 0
     aa0:	28 1b       	sub	r18, r24
     aa2:	39 0b       	sbc	r19, r25
     aa4:	4a 0b       	sbc	r20, r26
     aa6:	5b 0b       	sbc	r21, r27
     aa8:	04 c0       	rjmp	.+8      	; 0xab2 <__clzsi2+0x7e>
     aaa:	16 95       	lsr	r17
     aac:	07 95       	ror	r16
     aae:	f7 94       	ror	r15
     ab0:	e7 94       	ror	r14
     ab2:	8a 95       	dec	r24
     ab4:	d2 f7       	brpl	.-12     	; 0xaaa <__clzsi2+0x76>
     ab6:	f7 01       	movw	r30, r14
     ab8:	e8 59       	subi	r30, 0x98	; 152
     aba:	ff 4f       	sbci	r31, 0xFF	; 255
     abc:	80 81       	ld	r24, Z
     abe:	28 1b       	sub	r18, r24
     ac0:	31 09       	sbc	r19, r1
     ac2:	41 09       	sbc	r20, r1
     ac4:	51 09       	sbc	r21, r1
     ac6:	c9 01       	movw	r24, r18
     ac8:	1f 91       	pop	r17
     aca:	0f 91       	pop	r16
     acc:	ff 90       	pop	r15
     ace:	ef 90       	pop	r14
     ad0:	08 95       	ret

00000ad2 <__pack_f>:
     ad2:	df 92       	push	r13
     ad4:	ef 92       	push	r14
     ad6:	ff 92       	push	r15
     ad8:	0f 93       	push	r16
     ada:	1f 93       	push	r17
     adc:	fc 01       	movw	r30, r24
     ade:	e4 80       	ldd	r14, Z+4	; 0x04
     ae0:	f5 80       	ldd	r15, Z+5	; 0x05
     ae2:	06 81       	ldd	r16, Z+6	; 0x06
     ae4:	17 81       	ldd	r17, Z+7	; 0x07
     ae6:	d1 80       	ldd	r13, Z+1	; 0x01
     ae8:	80 81       	ld	r24, Z
     aea:	82 30       	cpi	r24, 0x02	; 2
     aec:	48 f4       	brcc	.+18     	; 0xb00 <__pack_f+0x2e>
     aee:	80 e0       	ldi	r24, 0x00	; 0
     af0:	90 e0       	ldi	r25, 0x00	; 0
     af2:	a0 e1       	ldi	r26, 0x10	; 16
     af4:	b0 e0       	ldi	r27, 0x00	; 0
     af6:	e8 2a       	or	r14, r24
     af8:	f9 2a       	or	r15, r25
     afa:	0a 2b       	or	r16, r26
     afc:	1b 2b       	or	r17, r27
     afe:	a5 c0       	rjmp	.+330    	; 0xc4a <__pack_f+0x178>
     b00:	84 30       	cpi	r24, 0x04	; 4
     b02:	09 f4       	brne	.+2      	; 0xb06 <__pack_f+0x34>
     b04:	9f c0       	rjmp	.+318    	; 0xc44 <__pack_f+0x172>
     b06:	82 30       	cpi	r24, 0x02	; 2
     b08:	21 f4       	brne	.+8      	; 0xb12 <__pack_f+0x40>
     b0a:	ee 24       	eor	r14, r14
     b0c:	ff 24       	eor	r15, r15
     b0e:	87 01       	movw	r16, r14
     b10:	05 c0       	rjmp	.+10     	; 0xb1c <__pack_f+0x4a>
     b12:	e1 14       	cp	r14, r1
     b14:	f1 04       	cpc	r15, r1
     b16:	01 05       	cpc	r16, r1
     b18:	11 05       	cpc	r17, r1
     b1a:	19 f4       	brne	.+6      	; 0xb22 <__pack_f+0x50>
     b1c:	e0 e0       	ldi	r30, 0x00	; 0
     b1e:	f0 e0       	ldi	r31, 0x00	; 0
     b20:	96 c0       	rjmp	.+300    	; 0xc4e <__pack_f+0x17c>
     b22:	62 81       	ldd	r22, Z+2	; 0x02
     b24:	73 81       	ldd	r23, Z+3	; 0x03
     b26:	9f ef       	ldi	r25, 0xFF	; 255
     b28:	62 38       	cpi	r22, 0x82	; 130
     b2a:	79 07       	cpc	r23, r25
     b2c:	0c f0       	brlt	.+2      	; 0xb30 <__pack_f+0x5e>
     b2e:	5b c0       	rjmp	.+182    	; 0xbe6 <__pack_f+0x114>
     b30:	22 e8       	ldi	r18, 0x82	; 130
     b32:	3f ef       	ldi	r19, 0xFF	; 255
     b34:	26 1b       	sub	r18, r22
     b36:	37 0b       	sbc	r19, r23
     b38:	2a 31       	cpi	r18, 0x1A	; 26
     b3a:	31 05       	cpc	r19, r1
     b3c:	2c f0       	brlt	.+10     	; 0xb48 <__pack_f+0x76>
     b3e:	20 e0       	ldi	r18, 0x00	; 0
     b40:	30 e0       	ldi	r19, 0x00	; 0
     b42:	40 e0       	ldi	r20, 0x00	; 0
     b44:	50 e0       	ldi	r21, 0x00	; 0
     b46:	2a c0       	rjmp	.+84     	; 0xb9c <__pack_f+0xca>
     b48:	b8 01       	movw	r22, r16
     b4a:	a7 01       	movw	r20, r14
     b4c:	02 2e       	mov	r0, r18
     b4e:	04 c0       	rjmp	.+8      	; 0xb58 <__pack_f+0x86>
     b50:	76 95       	lsr	r23
     b52:	67 95       	ror	r22
     b54:	57 95       	ror	r21
     b56:	47 95       	ror	r20
     b58:	0a 94       	dec	r0
     b5a:	d2 f7       	brpl	.-12     	; 0xb50 <__pack_f+0x7e>
     b5c:	81 e0       	ldi	r24, 0x01	; 1
     b5e:	90 e0       	ldi	r25, 0x00	; 0
     b60:	a0 e0       	ldi	r26, 0x00	; 0
     b62:	b0 e0       	ldi	r27, 0x00	; 0
     b64:	04 c0       	rjmp	.+8      	; 0xb6e <__pack_f+0x9c>
     b66:	88 0f       	add	r24, r24
     b68:	99 1f       	adc	r25, r25
     b6a:	aa 1f       	adc	r26, r26
     b6c:	bb 1f       	adc	r27, r27
     b6e:	2a 95       	dec	r18
     b70:	d2 f7       	brpl	.-12     	; 0xb66 <__pack_f+0x94>
     b72:	01 97       	sbiw	r24, 0x01	; 1
     b74:	a1 09       	sbc	r26, r1
     b76:	b1 09       	sbc	r27, r1
     b78:	8e 21       	and	r24, r14
     b7a:	9f 21       	and	r25, r15
     b7c:	a0 23       	and	r26, r16
     b7e:	b1 23       	and	r27, r17
     b80:	00 97       	sbiw	r24, 0x00	; 0
     b82:	a1 05       	cpc	r26, r1
     b84:	b1 05       	cpc	r27, r1
     b86:	21 f0       	breq	.+8      	; 0xb90 <__pack_f+0xbe>
     b88:	81 e0       	ldi	r24, 0x01	; 1
     b8a:	90 e0       	ldi	r25, 0x00	; 0
     b8c:	a0 e0       	ldi	r26, 0x00	; 0
     b8e:	b0 e0       	ldi	r27, 0x00	; 0
     b90:	9a 01       	movw	r18, r20
     b92:	ab 01       	movw	r20, r22
     b94:	28 2b       	or	r18, r24
     b96:	39 2b       	or	r19, r25
     b98:	4a 2b       	or	r20, r26
     b9a:	5b 2b       	or	r21, r27
     b9c:	da 01       	movw	r26, r20
     b9e:	c9 01       	movw	r24, r18
     ba0:	8f 77       	andi	r24, 0x7F	; 127
     ba2:	90 70       	andi	r25, 0x00	; 0
     ba4:	a0 70       	andi	r26, 0x00	; 0
     ba6:	b0 70       	andi	r27, 0x00	; 0
     ba8:	80 34       	cpi	r24, 0x40	; 64
     baa:	91 05       	cpc	r25, r1
     bac:	a1 05       	cpc	r26, r1
     bae:	b1 05       	cpc	r27, r1
     bb0:	39 f4       	brne	.+14     	; 0xbc0 <__pack_f+0xee>
     bb2:	27 ff       	sbrs	r18, 7
     bb4:	09 c0       	rjmp	.+18     	; 0xbc8 <__pack_f+0xf6>
     bb6:	20 5c       	subi	r18, 0xC0	; 192
     bb8:	3f 4f       	sbci	r19, 0xFF	; 255
     bba:	4f 4f       	sbci	r20, 0xFF	; 255
     bbc:	5f 4f       	sbci	r21, 0xFF	; 255
     bbe:	04 c0       	rjmp	.+8      	; 0xbc8 <__pack_f+0xf6>
     bc0:	21 5c       	subi	r18, 0xC1	; 193
     bc2:	3f 4f       	sbci	r19, 0xFF	; 255
     bc4:	4f 4f       	sbci	r20, 0xFF	; 255
     bc6:	5f 4f       	sbci	r21, 0xFF	; 255
     bc8:	e0 e0       	ldi	r30, 0x00	; 0
     bca:	f0 e0       	ldi	r31, 0x00	; 0
     bcc:	20 30       	cpi	r18, 0x00	; 0
     bce:	a0 e0       	ldi	r26, 0x00	; 0
     bd0:	3a 07       	cpc	r19, r26
     bd2:	a0 e0       	ldi	r26, 0x00	; 0
     bd4:	4a 07       	cpc	r20, r26
     bd6:	a0 e4       	ldi	r26, 0x40	; 64
     bd8:	5a 07       	cpc	r21, r26
     bda:	10 f0       	brcs	.+4      	; 0xbe0 <__pack_f+0x10e>
     bdc:	e1 e0       	ldi	r30, 0x01	; 1
     bde:	f0 e0       	ldi	r31, 0x00	; 0
     be0:	79 01       	movw	r14, r18
     be2:	8a 01       	movw	r16, r20
     be4:	27 c0       	rjmp	.+78     	; 0xc34 <__pack_f+0x162>
     be6:	60 38       	cpi	r22, 0x80	; 128
     be8:	71 05       	cpc	r23, r1
     bea:	64 f5       	brge	.+88     	; 0xc44 <__pack_f+0x172>
     bec:	fb 01       	movw	r30, r22
     bee:	e1 58       	subi	r30, 0x81	; 129
     bf0:	ff 4f       	sbci	r31, 0xFF	; 255
     bf2:	d8 01       	movw	r26, r16
     bf4:	c7 01       	movw	r24, r14
     bf6:	8f 77       	andi	r24, 0x7F	; 127
     bf8:	90 70       	andi	r25, 0x00	; 0
     bfa:	a0 70       	andi	r26, 0x00	; 0
     bfc:	b0 70       	andi	r27, 0x00	; 0
     bfe:	80 34       	cpi	r24, 0x40	; 64
     c00:	91 05       	cpc	r25, r1
     c02:	a1 05       	cpc	r26, r1
     c04:	b1 05       	cpc	r27, r1
     c06:	39 f4       	brne	.+14     	; 0xc16 <__pack_f+0x144>
     c08:	e7 fe       	sbrs	r14, 7
     c0a:	0d c0       	rjmp	.+26     	; 0xc26 <__pack_f+0x154>
     c0c:	80 e4       	ldi	r24, 0x40	; 64
     c0e:	90 e0       	ldi	r25, 0x00	; 0
     c10:	a0 e0       	ldi	r26, 0x00	; 0
     c12:	b0 e0       	ldi	r27, 0x00	; 0
     c14:	04 c0       	rjmp	.+8      	; 0xc1e <__pack_f+0x14c>
     c16:	8f e3       	ldi	r24, 0x3F	; 63
     c18:	90 e0       	ldi	r25, 0x00	; 0
     c1a:	a0 e0       	ldi	r26, 0x00	; 0
     c1c:	b0 e0       	ldi	r27, 0x00	; 0
     c1e:	e8 0e       	add	r14, r24
     c20:	f9 1e       	adc	r15, r25
     c22:	0a 1f       	adc	r16, r26
     c24:	1b 1f       	adc	r17, r27
     c26:	17 ff       	sbrs	r17, 7
     c28:	05 c0       	rjmp	.+10     	; 0xc34 <__pack_f+0x162>
     c2a:	16 95       	lsr	r17
     c2c:	07 95       	ror	r16
     c2e:	f7 94       	ror	r15
     c30:	e7 94       	ror	r14
     c32:	31 96       	adiw	r30, 0x01	; 1
     c34:	87 e0       	ldi	r24, 0x07	; 7
     c36:	16 95       	lsr	r17
     c38:	07 95       	ror	r16
     c3a:	f7 94       	ror	r15
     c3c:	e7 94       	ror	r14
     c3e:	8a 95       	dec	r24
     c40:	d1 f7       	brne	.-12     	; 0xc36 <__pack_f+0x164>
     c42:	05 c0       	rjmp	.+10     	; 0xc4e <__pack_f+0x17c>
     c44:	ee 24       	eor	r14, r14
     c46:	ff 24       	eor	r15, r15
     c48:	87 01       	movw	r16, r14
     c4a:	ef ef       	ldi	r30, 0xFF	; 255
     c4c:	f0 e0       	ldi	r31, 0x00	; 0
     c4e:	6e 2f       	mov	r22, r30
     c50:	67 95       	ror	r22
     c52:	66 27       	eor	r22, r22
     c54:	67 95       	ror	r22
     c56:	90 2f       	mov	r25, r16
     c58:	9f 77       	andi	r25, 0x7F	; 127
     c5a:	d7 94       	ror	r13
     c5c:	dd 24       	eor	r13, r13
     c5e:	d7 94       	ror	r13
     c60:	8e 2f       	mov	r24, r30
     c62:	86 95       	lsr	r24
     c64:	49 2f       	mov	r20, r25
     c66:	46 2b       	or	r20, r22
     c68:	58 2f       	mov	r21, r24
     c6a:	5d 29       	or	r21, r13
     c6c:	b7 01       	movw	r22, r14
     c6e:	ca 01       	movw	r24, r20
     c70:	1f 91       	pop	r17
     c72:	0f 91       	pop	r16
     c74:	ff 90       	pop	r15
     c76:	ef 90       	pop	r14
     c78:	df 90       	pop	r13
     c7a:	08 95       	ret

00000c7c <__unpack_f>:
     c7c:	fc 01       	movw	r30, r24
     c7e:	db 01       	movw	r26, r22
     c80:	40 81       	ld	r20, Z
     c82:	51 81       	ldd	r21, Z+1	; 0x01
     c84:	22 81       	ldd	r18, Z+2	; 0x02
     c86:	62 2f       	mov	r22, r18
     c88:	6f 77       	andi	r22, 0x7F	; 127
     c8a:	70 e0       	ldi	r23, 0x00	; 0
     c8c:	22 1f       	adc	r18, r18
     c8e:	22 27       	eor	r18, r18
     c90:	22 1f       	adc	r18, r18
     c92:	93 81       	ldd	r25, Z+3	; 0x03
     c94:	89 2f       	mov	r24, r25
     c96:	88 0f       	add	r24, r24
     c98:	82 2b       	or	r24, r18
     c9a:	28 2f       	mov	r18, r24
     c9c:	30 e0       	ldi	r19, 0x00	; 0
     c9e:	99 1f       	adc	r25, r25
     ca0:	99 27       	eor	r25, r25
     ca2:	99 1f       	adc	r25, r25
     ca4:	11 96       	adiw	r26, 0x01	; 1
     ca6:	9c 93       	st	X, r25
     ca8:	11 97       	sbiw	r26, 0x01	; 1
     caa:	21 15       	cp	r18, r1
     cac:	31 05       	cpc	r19, r1
     cae:	a9 f5       	brne	.+106    	; 0xd1a <__unpack_f+0x9e>
     cb0:	41 15       	cp	r20, r1
     cb2:	51 05       	cpc	r21, r1
     cb4:	61 05       	cpc	r22, r1
     cb6:	71 05       	cpc	r23, r1
     cb8:	11 f4       	brne	.+4      	; 0xcbe <__unpack_f+0x42>
     cba:	82 e0       	ldi	r24, 0x02	; 2
     cbc:	37 c0       	rjmp	.+110    	; 0xd2c <__unpack_f+0xb0>
     cbe:	82 e8       	ldi	r24, 0x82	; 130
     cc0:	9f ef       	ldi	r25, 0xFF	; 255
     cc2:	13 96       	adiw	r26, 0x03	; 3
     cc4:	9c 93       	st	X, r25
     cc6:	8e 93       	st	-X, r24
     cc8:	12 97       	sbiw	r26, 0x02	; 2
     cca:	9a 01       	movw	r18, r20
     ccc:	ab 01       	movw	r20, r22
     cce:	67 e0       	ldi	r22, 0x07	; 7
     cd0:	22 0f       	add	r18, r18
     cd2:	33 1f       	adc	r19, r19
     cd4:	44 1f       	adc	r20, r20
     cd6:	55 1f       	adc	r21, r21
     cd8:	6a 95       	dec	r22
     cda:	d1 f7       	brne	.-12     	; 0xcd0 <__unpack_f+0x54>
     cdc:	83 e0       	ldi	r24, 0x03	; 3
     cde:	8c 93       	st	X, r24
     ce0:	0d c0       	rjmp	.+26     	; 0xcfc <__unpack_f+0x80>
     ce2:	22 0f       	add	r18, r18
     ce4:	33 1f       	adc	r19, r19
     ce6:	44 1f       	adc	r20, r20
     ce8:	55 1f       	adc	r21, r21
     cea:	12 96       	adiw	r26, 0x02	; 2
     cec:	8d 91       	ld	r24, X+
     cee:	9c 91       	ld	r25, X
     cf0:	13 97       	sbiw	r26, 0x03	; 3
     cf2:	01 97       	sbiw	r24, 0x01	; 1
     cf4:	13 96       	adiw	r26, 0x03	; 3
     cf6:	9c 93       	st	X, r25
     cf8:	8e 93       	st	-X, r24
     cfa:	12 97       	sbiw	r26, 0x02	; 2
     cfc:	20 30       	cpi	r18, 0x00	; 0
     cfe:	80 e0       	ldi	r24, 0x00	; 0
     d00:	38 07       	cpc	r19, r24
     d02:	80 e0       	ldi	r24, 0x00	; 0
     d04:	48 07       	cpc	r20, r24
     d06:	80 e4       	ldi	r24, 0x40	; 64
     d08:	58 07       	cpc	r21, r24
     d0a:	58 f3       	brcs	.-42     	; 0xce2 <__unpack_f+0x66>
     d0c:	14 96       	adiw	r26, 0x04	; 4
     d0e:	2d 93       	st	X+, r18
     d10:	3d 93       	st	X+, r19
     d12:	4d 93       	st	X+, r20
     d14:	5c 93       	st	X, r21
     d16:	17 97       	sbiw	r26, 0x07	; 7
     d18:	08 95       	ret
     d1a:	2f 3f       	cpi	r18, 0xFF	; 255
     d1c:	31 05       	cpc	r19, r1
     d1e:	79 f4       	brne	.+30     	; 0xd3e <__unpack_f+0xc2>
     d20:	41 15       	cp	r20, r1
     d22:	51 05       	cpc	r21, r1
     d24:	61 05       	cpc	r22, r1
     d26:	71 05       	cpc	r23, r1
     d28:	19 f4       	brne	.+6      	; 0xd30 <__unpack_f+0xb4>
     d2a:	84 e0       	ldi	r24, 0x04	; 4
     d2c:	8c 93       	st	X, r24
     d2e:	08 95       	ret
     d30:	64 ff       	sbrs	r22, 4
     d32:	03 c0       	rjmp	.+6      	; 0xd3a <__unpack_f+0xbe>
     d34:	81 e0       	ldi	r24, 0x01	; 1
     d36:	8c 93       	st	X, r24
     d38:	12 c0       	rjmp	.+36     	; 0xd5e <__unpack_f+0xe2>
     d3a:	1c 92       	st	X, r1
     d3c:	10 c0       	rjmp	.+32     	; 0xd5e <__unpack_f+0xe2>
     d3e:	2f 57       	subi	r18, 0x7F	; 127
     d40:	30 40       	sbci	r19, 0x00	; 0
     d42:	13 96       	adiw	r26, 0x03	; 3
     d44:	3c 93       	st	X, r19
     d46:	2e 93       	st	-X, r18
     d48:	12 97       	sbiw	r26, 0x02	; 2
     d4a:	83 e0       	ldi	r24, 0x03	; 3
     d4c:	8c 93       	st	X, r24
     d4e:	87 e0       	ldi	r24, 0x07	; 7
     d50:	44 0f       	add	r20, r20
     d52:	55 1f       	adc	r21, r21
     d54:	66 1f       	adc	r22, r22
     d56:	77 1f       	adc	r23, r23
     d58:	8a 95       	dec	r24
     d5a:	d1 f7       	brne	.-12     	; 0xd50 <__unpack_f+0xd4>
     d5c:	70 64       	ori	r23, 0x40	; 64
     d5e:	14 96       	adiw	r26, 0x04	; 4
     d60:	4d 93       	st	X+, r20
     d62:	5d 93       	st	X+, r21
     d64:	6d 93       	st	X+, r22
     d66:	7c 93       	st	X, r23
     d68:	17 97       	sbiw	r26, 0x07	; 7
     d6a:	08 95       	ret

00000d6c <__fpcmp_parts_f>:
     d6c:	1f 93       	push	r17
     d6e:	dc 01       	movw	r26, r24
     d70:	fb 01       	movw	r30, r22
     d72:	9c 91       	ld	r25, X
     d74:	92 30       	cpi	r25, 0x02	; 2
     d76:	08 f4       	brcc	.+2      	; 0xd7a <__fpcmp_parts_f+0xe>
     d78:	47 c0       	rjmp	.+142    	; 0xe08 <__fpcmp_parts_f+0x9c>
     d7a:	80 81       	ld	r24, Z
     d7c:	82 30       	cpi	r24, 0x02	; 2
     d7e:	08 f4       	brcc	.+2      	; 0xd82 <__fpcmp_parts_f+0x16>
     d80:	43 c0       	rjmp	.+134    	; 0xe08 <__fpcmp_parts_f+0x9c>
     d82:	94 30       	cpi	r25, 0x04	; 4
     d84:	51 f4       	brne	.+20     	; 0xd9a <__fpcmp_parts_f+0x2e>
     d86:	11 96       	adiw	r26, 0x01	; 1
     d88:	1c 91       	ld	r17, X
     d8a:	84 30       	cpi	r24, 0x04	; 4
     d8c:	99 f5       	brne	.+102    	; 0xdf4 <__fpcmp_parts_f+0x88>
     d8e:	81 81       	ldd	r24, Z+1	; 0x01
     d90:	68 2f       	mov	r22, r24
     d92:	70 e0       	ldi	r23, 0x00	; 0
     d94:	61 1b       	sub	r22, r17
     d96:	71 09       	sbc	r23, r1
     d98:	3f c0       	rjmp	.+126    	; 0xe18 <__fpcmp_parts_f+0xac>
     d9a:	84 30       	cpi	r24, 0x04	; 4
     d9c:	21 f0       	breq	.+8      	; 0xda6 <__fpcmp_parts_f+0x3a>
     d9e:	92 30       	cpi	r25, 0x02	; 2
     da0:	31 f4       	brne	.+12     	; 0xdae <__fpcmp_parts_f+0x42>
     da2:	82 30       	cpi	r24, 0x02	; 2
     da4:	b9 f1       	breq	.+110    	; 0xe14 <__fpcmp_parts_f+0xa8>
     da6:	81 81       	ldd	r24, Z+1	; 0x01
     da8:	88 23       	and	r24, r24
     daa:	89 f1       	breq	.+98     	; 0xe0e <__fpcmp_parts_f+0xa2>
     dac:	2d c0       	rjmp	.+90     	; 0xe08 <__fpcmp_parts_f+0x9c>
     dae:	11 96       	adiw	r26, 0x01	; 1
     db0:	1c 91       	ld	r17, X
     db2:	11 97       	sbiw	r26, 0x01	; 1
     db4:	82 30       	cpi	r24, 0x02	; 2
     db6:	f1 f0       	breq	.+60     	; 0xdf4 <__fpcmp_parts_f+0x88>
     db8:	81 81       	ldd	r24, Z+1	; 0x01
     dba:	18 17       	cp	r17, r24
     dbc:	d9 f4       	brne	.+54     	; 0xdf4 <__fpcmp_parts_f+0x88>
     dbe:	12 96       	adiw	r26, 0x02	; 2
     dc0:	2d 91       	ld	r18, X+
     dc2:	3c 91       	ld	r19, X
     dc4:	13 97       	sbiw	r26, 0x03	; 3
     dc6:	82 81       	ldd	r24, Z+2	; 0x02
     dc8:	93 81       	ldd	r25, Z+3	; 0x03
     dca:	82 17       	cp	r24, r18
     dcc:	93 07       	cpc	r25, r19
     dce:	94 f0       	brlt	.+36     	; 0xdf4 <__fpcmp_parts_f+0x88>
     dd0:	28 17       	cp	r18, r24
     dd2:	39 07       	cpc	r19, r25
     dd4:	bc f0       	brlt	.+46     	; 0xe04 <__fpcmp_parts_f+0x98>
     dd6:	14 96       	adiw	r26, 0x04	; 4
     dd8:	8d 91       	ld	r24, X+
     dda:	9d 91       	ld	r25, X+
     ddc:	0d 90       	ld	r0, X+
     dde:	bc 91       	ld	r27, X
     de0:	a0 2d       	mov	r26, r0
     de2:	24 81       	ldd	r18, Z+4	; 0x04
     de4:	35 81       	ldd	r19, Z+5	; 0x05
     de6:	46 81       	ldd	r20, Z+6	; 0x06
     de8:	57 81       	ldd	r21, Z+7	; 0x07
     dea:	28 17       	cp	r18, r24
     dec:	39 07       	cpc	r19, r25
     dee:	4a 07       	cpc	r20, r26
     df0:	5b 07       	cpc	r21, r27
     df2:	18 f4       	brcc	.+6      	; 0xdfa <__fpcmp_parts_f+0x8e>
     df4:	11 23       	and	r17, r17
     df6:	41 f0       	breq	.+16     	; 0xe08 <__fpcmp_parts_f+0x9c>
     df8:	0a c0       	rjmp	.+20     	; 0xe0e <__fpcmp_parts_f+0xa2>
     dfa:	82 17       	cp	r24, r18
     dfc:	93 07       	cpc	r25, r19
     dfe:	a4 07       	cpc	r26, r20
     e00:	b5 07       	cpc	r27, r21
     e02:	40 f4       	brcc	.+16     	; 0xe14 <__fpcmp_parts_f+0xa8>
     e04:	11 23       	and	r17, r17
     e06:	19 f0       	breq	.+6      	; 0xe0e <__fpcmp_parts_f+0xa2>
     e08:	61 e0       	ldi	r22, 0x01	; 1
     e0a:	70 e0       	ldi	r23, 0x00	; 0
     e0c:	05 c0       	rjmp	.+10     	; 0xe18 <__fpcmp_parts_f+0xac>
     e0e:	6f ef       	ldi	r22, 0xFF	; 255
     e10:	7f ef       	ldi	r23, 0xFF	; 255
     e12:	02 c0       	rjmp	.+4      	; 0xe18 <__fpcmp_parts_f+0xac>
     e14:	60 e0       	ldi	r22, 0x00	; 0
     e16:	70 e0       	ldi	r23, 0x00	; 0
     e18:	cb 01       	movw	r24, r22
     e1a:	1f 91       	pop	r17
     e1c:	08 95       	ret

00000e1e <DIO_enuInit>:

#include "DIO_priv.h"
#include "DIO_config.h"

ES_t DIO_enuInit(void)
{
     e1e:	df 93       	push	r29
     e20:	cf 93       	push	r28
     e22:	0f 92       	push	r0
     e24:	cd b7       	in	r28, 0x3d	; 61
     e26:	de b7       	in	r29, 0x3e	; 62
	ES_t Local_enuErrorstate = ES_NOK;
     e28:	19 82       	std	Y+1, r1	; 0x01

	DDRA = CONC(PA_PIN7_DIR,PA_PIN6_DIR,PA_PIN5_DIR,PA_PIN4_DIR,PA_PIN3_DIR,PA_PIN2_DIR,PA_PIN1_DIR,PA_PIN0_DIR);
     e2a:	ea e3       	ldi	r30, 0x3A	; 58
     e2c:	f0 e0       	ldi	r31, 0x00	; 0
     e2e:	8f ef       	ldi	r24, 0xFF	; 255
     e30:	80 83       	st	Z, r24
	DDRB = CONC(PB_PIN7_DIR,PB_PIN6_DIR,PB_PIN5_DIR,PB_PIN4_DIR,PB_PIN3_DIR,PB_PIN2_DIR,PB_PIN1_DIR,PB_PIN0_DIR);
     e32:	e7 e3       	ldi	r30, 0x37	; 55
     e34:	f0 e0       	ldi	r31, 0x00	; 0
     e36:	8f ef       	ldi	r24, 0xFF	; 255
     e38:	80 83       	st	Z, r24
	DDRC = CONC(PC_PIN7_DIR,PC_PIN6_DIR,PC_PIN5_DIR,PC_PIN4_DIR,PC_PIN3_DIR,PC_PIN2_DIR,PC_PIN1_DIR,PC_PIN0_DIR);
     e3a:	e4 e3       	ldi	r30, 0x34	; 52
     e3c:	f0 e0       	ldi	r31, 0x00	; 0
     e3e:	86 e9       	ldi	r24, 0x96	; 150
     e40:	80 83       	st	Z, r24
	DDRD = CONC(PD_PIN7_DIR,PD_PIN6_DIR,PD_PIN5_DIR,PD_PIN4_DIR,PD_PIN3_DIR,PD_PIN2_DIR,PD_PIN1_DIR,PD_PIN0_DIR);
     e42:	e1 e3       	ldi	r30, 0x31	; 49
     e44:	f0 e0       	ldi	r31, 0x00	; 0
     e46:	86 e9       	ldi	r24, 0x96	; 150
     e48:	80 83       	st	Z, r24

	PORTA =CONC(PA_PIN7_VAL,PA_PIN6_VAL,PA_PIN5_VAL,PA_PIN4_VAL,PA_PIN3_VAL,PA_PIN2_VAL,PA_PIN1_VAL,PA_PIN0_VAL);
     e4a:	eb e3       	ldi	r30, 0x3B	; 59
     e4c:	f0 e0       	ldi	r31, 0x00	; 0
     e4e:	10 82       	st	Z, r1

	Local_enuErrorstate = ES_OK;
     e50:	81 e0       	ldi	r24, 0x01	; 1
     e52:	89 83       	std	Y+1, r24	; 0x01

	return Local_enuErrorstate;
     e54:	89 81       	ldd	r24, Y+1	; 0x01
}
     e56:	0f 90       	pop	r0
     e58:	cf 91       	pop	r28
     e5a:	df 91       	pop	r29
     e5c:	08 95       	ret

00000e5e <DIO_enuSetPortDirection>:

ES_t DIO_enuSetPortDirection(u8 Copy_u8PortID , u8 Copy_u8Value)
{
     e5e:	df 93       	push	r29
     e60:	cf 93       	push	r28
     e62:	00 d0       	rcall	.+0      	; 0xe64 <DIO_enuSetPortDirection+0x6>
     e64:	00 d0       	rcall	.+0      	; 0xe66 <DIO_enuSetPortDirection+0x8>
     e66:	0f 92       	push	r0
     e68:	cd b7       	in	r28, 0x3d	; 61
     e6a:	de b7       	in	r29, 0x3e	; 62
     e6c:	8a 83       	std	Y+2, r24	; 0x02
     e6e:	6b 83       	std	Y+3, r22	; 0x03
	ES_t Local_enuErrorstate = ES_NOK;
     e70:	19 82       	std	Y+1, r1	; 0x01

	if (Copy_u8PortID <= DIO_PORTD)
     e72:	8a 81       	ldd	r24, Y+2	; 0x02
     e74:	84 30       	cpi	r24, 0x04	; 4
     e76:	a8 f5       	brcc	.+106    	; 0xee2 <DIO_enuSetPortDirection+0x84>
	{
		switch (Copy_u8PortID)
     e78:	8a 81       	ldd	r24, Y+2	; 0x02
     e7a:	28 2f       	mov	r18, r24
     e7c:	30 e0       	ldi	r19, 0x00	; 0
     e7e:	3d 83       	std	Y+5, r19	; 0x05
     e80:	2c 83       	std	Y+4, r18	; 0x04
     e82:	8c 81       	ldd	r24, Y+4	; 0x04
     e84:	9d 81       	ldd	r25, Y+5	; 0x05
     e86:	81 30       	cpi	r24, 0x01	; 1
     e88:	91 05       	cpc	r25, r1
     e8a:	d1 f0       	breq	.+52     	; 0xec0 <DIO_enuSetPortDirection+0x62>
     e8c:	2c 81       	ldd	r18, Y+4	; 0x04
     e8e:	3d 81       	ldd	r19, Y+5	; 0x05
     e90:	22 30       	cpi	r18, 0x02	; 2
     e92:	31 05       	cpc	r19, r1
     e94:	2c f4       	brge	.+10     	; 0xea0 <DIO_enuSetPortDirection+0x42>
     e96:	8c 81       	ldd	r24, Y+4	; 0x04
     e98:	9d 81       	ldd	r25, Y+5	; 0x05
     e9a:	00 97       	sbiw	r24, 0x00	; 0
     e9c:	61 f0       	breq	.+24     	; 0xeb6 <DIO_enuSetPortDirection+0x58>
     e9e:	1e c0       	rjmp	.+60     	; 0xedc <DIO_enuSetPortDirection+0x7e>
     ea0:	2c 81       	ldd	r18, Y+4	; 0x04
     ea2:	3d 81       	ldd	r19, Y+5	; 0x05
     ea4:	22 30       	cpi	r18, 0x02	; 2
     ea6:	31 05       	cpc	r19, r1
     ea8:	81 f0       	breq	.+32     	; 0xeca <DIO_enuSetPortDirection+0x6c>
     eaa:	8c 81       	ldd	r24, Y+4	; 0x04
     eac:	9d 81       	ldd	r25, Y+5	; 0x05
     eae:	83 30       	cpi	r24, 0x03	; 3
     eb0:	91 05       	cpc	r25, r1
     eb2:	81 f0       	breq	.+32     	; 0xed4 <DIO_enuSetPortDirection+0x76>
     eb4:	13 c0       	rjmp	.+38     	; 0xedc <DIO_enuSetPortDirection+0x7e>
		{
		case DIO_PORTA:
			DDRA = Copy_u8Value;
     eb6:	ea e3       	ldi	r30, 0x3A	; 58
     eb8:	f0 e0       	ldi	r31, 0x00	; 0
     eba:	8b 81       	ldd	r24, Y+3	; 0x03
     ebc:	80 83       	st	Z, r24
     ebe:	0e c0       	rjmp	.+28     	; 0xedc <DIO_enuSetPortDirection+0x7e>
			break;
		case DIO_PORTB:
			DDRB = Copy_u8Value;
     ec0:	e7 e3       	ldi	r30, 0x37	; 55
     ec2:	f0 e0       	ldi	r31, 0x00	; 0
     ec4:	8b 81       	ldd	r24, Y+3	; 0x03
     ec6:	80 83       	st	Z, r24
     ec8:	09 c0       	rjmp	.+18     	; 0xedc <DIO_enuSetPortDirection+0x7e>
			break;
		case DIO_PORTC:
			DDRC = Copy_u8Value;
     eca:	e4 e3       	ldi	r30, 0x34	; 52
     ecc:	f0 e0       	ldi	r31, 0x00	; 0
     ece:	8b 81       	ldd	r24, Y+3	; 0x03
     ed0:	80 83       	st	Z, r24
     ed2:	04 c0       	rjmp	.+8      	; 0xedc <DIO_enuSetPortDirection+0x7e>
			break;
		case DIO_PORTD:
			DDRD = Copy_u8Value;
     ed4:	e1 e3       	ldi	r30, 0x31	; 49
     ed6:	f0 e0       	ldi	r31, 0x00	; 0
     ed8:	8b 81       	ldd	r24, Y+3	; 0x03
     eda:	80 83       	st	Z, r24
			break;
		}
		Local_enuErrorstate = ES_OK;
     edc:	81 e0       	ldi	r24, 0x01	; 1
     ede:	89 83       	std	Y+1, r24	; 0x01
     ee0:	02 c0       	rjmp	.+4      	; 0xee6 <DIO_enuSetPortDirection+0x88>
	}
	else
	{
		Local_enuErrorstate = ES_OUT_OF_RANGE;
     ee2:	83 e0       	ldi	r24, 0x03	; 3
     ee4:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_enuErrorstate;
     ee6:	89 81       	ldd	r24, Y+1	; 0x01
}
     ee8:	0f 90       	pop	r0
     eea:	0f 90       	pop	r0
     eec:	0f 90       	pop	r0
     eee:	0f 90       	pop	r0
     ef0:	0f 90       	pop	r0
     ef2:	cf 91       	pop	r28
     ef4:	df 91       	pop	r29
     ef6:	08 95       	ret

00000ef8 <DIO_enuSetPortValue>:

ES_t DIO_enuSetPortValue(u8 Copy_u8PortID , u8 Copy_u8Value)
{
     ef8:	df 93       	push	r29
     efa:	cf 93       	push	r28
     efc:	00 d0       	rcall	.+0      	; 0xefe <DIO_enuSetPortValue+0x6>
     efe:	00 d0       	rcall	.+0      	; 0xf00 <DIO_enuSetPortValue+0x8>
     f00:	0f 92       	push	r0
     f02:	cd b7       	in	r28, 0x3d	; 61
     f04:	de b7       	in	r29, 0x3e	; 62
     f06:	8a 83       	std	Y+2, r24	; 0x02
     f08:	6b 83       	std	Y+3, r22	; 0x03
	ES_t Local_enuErrorstate = ES_NOK;
     f0a:	19 82       	std	Y+1, r1	; 0x01

	if (Copy_u8PortID <= DIO_PORTD)
     f0c:	8a 81       	ldd	r24, Y+2	; 0x02
     f0e:	84 30       	cpi	r24, 0x04	; 4
     f10:	a8 f5       	brcc	.+106    	; 0xf7c <DIO_enuSetPortValue+0x84>
	{
		switch (Copy_u8PortID)
     f12:	8a 81       	ldd	r24, Y+2	; 0x02
     f14:	28 2f       	mov	r18, r24
     f16:	30 e0       	ldi	r19, 0x00	; 0
     f18:	3d 83       	std	Y+5, r19	; 0x05
     f1a:	2c 83       	std	Y+4, r18	; 0x04
     f1c:	8c 81       	ldd	r24, Y+4	; 0x04
     f1e:	9d 81       	ldd	r25, Y+5	; 0x05
     f20:	81 30       	cpi	r24, 0x01	; 1
     f22:	91 05       	cpc	r25, r1
     f24:	d1 f0       	breq	.+52     	; 0xf5a <DIO_enuSetPortValue+0x62>
     f26:	2c 81       	ldd	r18, Y+4	; 0x04
     f28:	3d 81       	ldd	r19, Y+5	; 0x05
     f2a:	22 30       	cpi	r18, 0x02	; 2
     f2c:	31 05       	cpc	r19, r1
     f2e:	2c f4       	brge	.+10     	; 0xf3a <DIO_enuSetPortValue+0x42>
     f30:	8c 81       	ldd	r24, Y+4	; 0x04
     f32:	9d 81       	ldd	r25, Y+5	; 0x05
     f34:	00 97       	sbiw	r24, 0x00	; 0
     f36:	61 f0       	breq	.+24     	; 0xf50 <DIO_enuSetPortValue+0x58>
     f38:	1e c0       	rjmp	.+60     	; 0xf76 <DIO_enuSetPortValue+0x7e>
     f3a:	2c 81       	ldd	r18, Y+4	; 0x04
     f3c:	3d 81       	ldd	r19, Y+5	; 0x05
     f3e:	22 30       	cpi	r18, 0x02	; 2
     f40:	31 05       	cpc	r19, r1
     f42:	81 f0       	breq	.+32     	; 0xf64 <DIO_enuSetPortValue+0x6c>
     f44:	8c 81       	ldd	r24, Y+4	; 0x04
     f46:	9d 81       	ldd	r25, Y+5	; 0x05
     f48:	83 30       	cpi	r24, 0x03	; 3
     f4a:	91 05       	cpc	r25, r1
     f4c:	81 f0       	breq	.+32     	; 0xf6e <DIO_enuSetPortValue+0x76>
     f4e:	13 c0       	rjmp	.+38     	; 0xf76 <DIO_enuSetPortValue+0x7e>
		{
		case DIO_PORTA:
			PORTA = Copy_u8Value;
     f50:	eb e3       	ldi	r30, 0x3B	; 59
     f52:	f0 e0       	ldi	r31, 0x00	; 0
     f54:	8b 81       	ldd	r24, Y+3	; 0x03
     f56:	80 83       	st	Z, r24
     f58:	0e c0       	rjmp	.+28     	; 0xf76 <DIO_enuSetPortValue+0x7e>
			break;
		case DIO_PORTB:
			PORTB = Copy_u8Value;
     f5a:	e8 e3       	ldi	r30, 0x38	; 56
     f5c:	f0 e0       	ldi	r31, 0x00	; 0
     f5e:	8b 81       	ldd	r24, Y+3	; 0x03
     f60:	80 83       	st	Z, r24
     f62:	09 c0       	rjmp	.+18     	; 0xf76 <DIO_enuSetPortValue+0x7e>
			break;
		case DIO_PORTC:
			PORTC = Copy_u8Value;
     f64:	e5 e3       	ldi	r30, 0x35	; 53
     f66:	f0 e0       	ldi	r31, 0x00	; 0
     f68:	8b 81       	ldd	r24, Y+3	; 0x03
     f6a:	80 83       	st	Z, r24
     f6c:	04 c0       	rjmp	.+8      	; 0xf76 <DIO_enuSetPortValue+0x7e>
			break;
		case DIO_PORTD:
			PORTD = Copy_u8Value;
     f6e:	e2 e3       	ldi	r30, 0x32	; 50
     f70:	f0 e0       	ldi	r31, 0x00	; 0
     f72:	8b 81       	ldd	r24, Y+3	; 0x03
     f74:	80 83       	st	Z, r24
			break;
		}
		Local_enuErrorstate = ES_OK;
     f76:	81 e0       	ldi	r24, 0x01	; 1
     f78:	89 83       	std	Y+1, r24	; 0x01
     f7a:	02 c0       	rjmp	.+4      	; 0xf80 <DIO_enuSetPortValue+0x88>
	}
	else
	{
		Local_enuErrorstate = ES_OUT_OF_RANGE;
     f7c:	83 e0       	ldi	r24, 0x03	; 3
     f7e:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_enuErrorstate;
     f80:	89 81       	ldd	r24, Y+1	; 0x01
}
     f82:	0f 90       	pop	r0
     f84:	0f 90       	pop	r0
     f86:	0f 90       	pop	r0
     f88:	0f 90       	pop	r0
     f8a:	0f 90       	pop	r0
     f8c:	cf 91       	pop	r28
     f8e:	df 91       	pop	r29
     f90:	08 95       	ret

00000f92 <DIO_enuTogPortValue>:

ES_t DIO_enuTogPortValue(u8 Copy_u8PortID)
{
     f92:	df 93       	push	r29
     f94:	cf 93       	push	r28
     f96:	00 d0       	rcall	.+0      	; 0xf98 <DIO_enuTogPortValue+0x6>
     f98:	00 d0       	rcall	.+0      	; 0xf9a <DIO_enuTogPortValue+0x8>
     f9a:	cd b7       	in	r28, 0x3d	; 61
     f9c:	de b7       	in	r29, 0x3e	; 62
     f9e:	8a 83       	std	Y+2, r24	; 0x02
	ES_t Local_enuErrorstate = ES_NOK;
     fa0:	19 82       	std	Y+1, r1	; 0x01

	if (Copy_u8PortID <= DIO_PORTD)
     fa2:	8a 81       	ldd	r24, Y+2	; 0x02
     fa4:	84 30       	cpi	r24, 0x04	; 4
     fa6:	08 f0       	brcs	.+2      	; 0xfaa <DIO_enuTogPortValue+0x18>
     fa8:	41 c0       	rjmp	.+130    	; 0x102c <DIO_enuTogPortValue+0x9a>
	{
		switch (Copy_u8PortID)
     faa:	8a 81       	ldd	r24, Y+2	; 0x02
     fac:	28 2f       	mov	r18, r24
     fae:	30 e0       	ldi	r19, 0x00	; 0
     fb0:	3c 83       	std	Y+4, r19	; 0x04
     fb2:	2b 83       	std	Y+3, r18	; 0x03
     fb4:	8b 81       	ldd	r24, Y+3	; 0x03
     fb6:	9c 81       	ldd	r25, Y+4	; 0x04
     fb8:	81 30       	cpi	r24, 0x01	; 1
     fba:	91 05       	cpc	r25, r1
     fbc:	e9 f0       	breq	.+58     	; 0xff8 <DIO_enuTogPortValue+0x66>
     fbe:	2b 81       	ldd	r18, Y+3	; 0x03
     fc0:	3c 81       	ldd	r19, Y+4	; 0x04
     fc2:	22 30       	cpi	r18, 0x02	; 2
     fc4:	31 05       	cpc	r19, r1
     fc6:	2c f4       	brge	.+10     	; 0xfd2 <DIO_enuTogPortValue+0x40>
     fc8:	8b 81       	ldd	r24, Y+3	; 0x03
     fca:	9c 81       	ldd	r25, Y+4	; 0x04
     fcc:	00 97       	sbiw	r24, 0x00	; 0
     fce:	61 f0       	breq	.+24     	; 0xfe8 <DIO_enuTogPortValue+0x56>
     fd0:	2a c0       	rjmp	.+84     	; 0x1026 <DIO_enuTogPortValue+0x94>
     fd2:	2b 81       	ldd	r18, Y+3	; 0x03
     fd4:	3c 81       	ldd	r19, Y+4	; 0x04
     fd6:	22 30       	cpi	r18, 0x02	; 2
     fd8:	31 05       	cpc	r19, r1
     fda:	b1 f0       	breq	.+44     	; 0x1008 <DIO_enuTogPortValue+0x76>
     fdc:	8b 81       	ldd	r24, Y+3	; 0x03
     fde:	9c 81       	ldd	r25, Y+4	; 0x04
     fe0:	83 30       	cpi	r24, 0x03	; 3
     fe2:	91 05       	cpc	r25, r1
     fe4:	c9 f0       	breq	.+50     	; 0x1018 <DIO_enuTogPortValue+0x86>
     fe6:	1f c0       	rjmp	.+62     	; 0x1026 <DIO_enuTogPortValue+0x94>
		{
		case DIO_PORTA:
			PORTA = ~PORTA;
     fe8:	ab e3       	ldi	r26, 0x3B	; 59
     fea:	b0 e0       	ldi	r27, 0x00	; 0
     fec:	eb e3       	ldi	r30, 0x3B	; 59
     fee:	f0 e0       	ldi	r31, 0x00	; 0
     ff0:	80 81       	ld	r24, Z
     ff2:	80 95       	com	r24
     ff4:	8c 93       	st	X, r24
     ff6:	17 c0       	rjmp	.+46     	; 0x1026 <DIO_enuTogPortValue+0x94>
			break;
		case DIO_PORTB:
			PORTB = ~PORTB;
     ff8:	a8 e3       	ldi	r26, 0x38	; 56
     ffa:	b0 e0       	ldi	r27, 0x00	; 0
     ffc:	e8 e3       	ldi	r30, 0x38	; 56
     ffe:	f0 e0       	ldi	r31, 0x00	; 0
    1000:	80 81       	ld	r24, Z
    1002:	80 95       	com	r24
    1004:	8c 93       	st	X, r24
    1006:	0f c0       	rjmp	.+30     	; 0x1026 <DIO_enuTogPortValue+0x94>
			break;
		case DIO_PORTC:
			PORTC = ~PORTC;
    1008:	a5 e3       	ldi	r26, 0x35	; 53
    100a:	b0 e0       	ldi	r27, 0x00	; 0
    100c:	e5 e3       	ldi	r30, 0x35	; 53
    100e:	f0 e0       	ldi	r31, 0x00	; 0
    1010:	80 81       	ld	r24, Z
    1012:	80 95       	com	r24
    1014:	8c 93       	st	X, r24
    1016:	07 c0       	rjmp	.+14     	; 0x1026 <DIO_enuTogPortValue+0x94>
			break;
		case DIO_PORTD:
			PORTD = ~PORTD;
    1018:	a2 e3       	ldi	r26, 0x32	; 50
    101a:	b0 e0       	ldi	r27, 0x00	; 0
    101c:	e2 e3       	ldi	r30, 0x32	; 50
    101e:	f0 e0       	ldi	r31, 0x00	; 0
    1020:	80 81       	ld	r24, Z
    1022:	80 95       	com	r24
    1024:	8c 93       	st	X, r24
			break;
		}
		Local_enuErrorstate = ES_OK;
    1026:	81 e0       	ldi	r24, 0x01	; 1
    1028:	89 83       	std	Y+1, r24	; 0x01
    102a:	02 c0       	rjmp	.+4      	; 0x1030 <DIO_enuTogPortValue+0x9e>
	}
	else
	{
		Local_enuErrorstate = ES_OUT_OF_RANGE;
    102c:	83 e0       	ldi	r24, 0x03	; 3
    102e:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_enuErrorstate;
    1030:	89 81       	ldd	r24, Y+1	; 0x01
}
    1032:	0f 90       	pop	r0
    1034:	0f 90       	pop	r0
    1036:	0f 90       	pop	r0
    1038:	0f 90       	pop	r0
    103a:	cf 91       	pop	r28
    103c:	df 91       	pop	r29
    103e:	08 95       	ret

00001040 <DIO_enuGetPortValue>:

ES_t DIO_enuGetPortValue(u8 Copy_u8PortID , u8 * Copy_pu8Value)
{
    1040:	df 93       	push	r29
    1042:	cf 93       	push	r28
    1044:	00 d0       	rcall	.+0      	; 0x1046 <DIO_enuGetPortValue+0x6>
    1046:	00 d0       	rcall	.+0      	; 0x1048 <DIO_enuGetPortValue+0x8>
    1048:	00 d0       	rcall	.+0      	; 0x104a <DIO_enuGetPortValue+0xa>
    104a:	cd b7       	in	r28, 0x3d	; 61
    104c:	de b7       	in	r29, 0x3e	; 62
    104e:	8a 83       	std	Y+2, r24	; 0x02
    1050:	7c 83       	std	Y+4, r23	; 0x04
    1052:	6b 83       	std	Y+3, r22	; 0x03
	ES_t Local_enuErrorstate = ES_NOK;
    1054:	19 82       	std	Y+1, r1	; 0x01

	if (Copy_pu8Value != NULL)
    1056:	8b 81       	ldd	r24, Y+3	; 0x03
    1058:	9c 81       	ldd	r25, Y+4	; 0x04
    105a:	00 97       	sbiw	r24, 0x00	; 0
    105c:	09 f4       	brne	.+2      	; 0x1060 <DIO_enuGetPortValue+0x20>
    105e:	43 c0       	rjmp	.+134    	; 0x10e6 <DIO_enuGetPortValue+0xa6>
	{
		if (Copy_u8PortID <= DIO_PORTD)
    1060:	8a 81       	ldd	r24, Y+2	; 0x02
    1062:	84 30       	cpi	r24, 0x04	; 4
    1064:	e8 f5       	brcc	.+122    	; 0x10e0 <DIO_enuGetPortValue+0xa0>
		{
			switch (Copy_u8PortID)
    1066:	8a 81       	ldd	r24, Y+2	; 0x02
    1068:	28 2f       	mov	r18, r24
    106a:	30 e0       	ldi	r19, 0x00	; 0
    106c:	3e 83       	std	Y+6, r19	; 0x06
    106e:	2d 83       	std	Y+5, r18	; 0x05
    1070:	8d 81       	ldd	r24, Y+5	; 0x05
    1072:	9e 81       	ldd	r25, Y+6	; 0x06
    1074:	81 30       	cpi	r24, 0x01	; 1
    1076:	91 05       	cpc	r25, r1
    1078:	e1 f0       	breq	.+56     	; 0x10b2 <DIO_enuGetPortValue+0x72>
    107a:	2d 81       	ldd	r18, Y+5	; 0x05
    107c:	3e 81       	ldd	r19, Y+6	; 0x06
    107e:	22 30       	cpi	r18, 0x02	; 2
    1080:	31 05       	cpc	r19, r1
    1082:	2c f4       	brge	.+10     	; 0x108e <DIO_enuGetPortValue+0x4e>
    1084:	8d 81       	ldd	r24, Y+5	; 0x05
    1086:	9e 81       	ldd	r25, Y+6	; 0x06
    1088:	00 97       	sbiw	r24, 0x00	; 0
    108a:	61 f0       	breq	.+24     	; 0x10a4 <DIO_enuGetPortValue+0x64>
    108c:	26 c0       	rjmp	.+76     	; 0x10da <DIO_enuGetPortValue+0x9a>
    108e:	2d 81       	ldd	r18, Y+5	; 0x05
    1090:	3e 81       	ldd	r19, Y+6	; 0x06
    1092:	22 30       	cpi	r18, 0x02	; 2
    1094:	31 05       	cpc	r19, r1
    1096:	a1 f0       	breq	.+40     	; 0x10c0 <DIO_enuGetPortValue+0x80>
    1098:	8d 81       	ldd	r24, Y+5	; 0x05
    109a:	9e 81       	ldd	r25, Y+6	; 0x06
    109c:	83 30       	cpi	r24, 0x03	; 3
    109e:	91 05       	cpc	r25, r1
    10a0:	b1 f0       	breq	.+44     	; 0x10ce <DIO_enuGetPortValue+0x8e>
    10a2:	1b c0       	rjmp	.+54     	; 0x10da <DIO_enuGetPortValue+0x9a>
			{
			case DIO_PORTA:
				*Copy_pu8Value = PINA;
    10a4:	e9 e3       	ldi	r30, 0x39	; 57
    10a6:	f0 e0       	ldi	r31, 0x00	; 0
    10a8:	80 81       	ld	r24, Z
    10aa:	eb 81       	ldd	r30, Y+3	; 0x03
    10ac:	fc 81       	ldd	r31, Y+4	; 0x04
    10ae:	80 83       	st	Z, r24
    10b0:	14 c0       	rjmp	.+40     	; 0x10da <DIO_enuGetPortValue+0x9a>
				break;
			case DIO_PORTB:
				*Copy_pu8Value = PINB;
    10b2:	e6 e3       	ldi	r30, 0x36	; 54
    10b4:	f0 e0       	ldi	r31, 0x00	; 0
    10b6:	80 81       	ld	r24, Z
    10b8:	eb 81       	ldd	r30, Y+3	; 0x03
    10ba:	fc 81       	ldd	r31, Y+4	; 0x04
    10bc:	80 83       	st	Z, r24
    10be:	0d c0       	rjmp	.+26     	; 0x10da <DIO_enuGetPortValue+0x9a>
				break;
			case DIO_PORTC:
				*Copy_pu8Value = PINC;
    10c0:	e3 e3       	ldi	r30, 0x33	; 51
    10c2:	f0 e0       	ldi	r31, 0x00	; 0
    10c4:	80 81       	ld	r24, Z
    10c6:	eb 81       	ldd	r30, Y+3	; 0x03
    10c8:	fc 81       	ldd	r31, Y+4	; 0x04
    10ca:	80 83       	st	Z, r24
    10cc:	06 c0       	rjmp	.+12     	; 0x10da <DIO_enuGetPortValue+0x9a>
				break;
			case DIO_PORTD:
				*Copy_pu8Value = PIND;
    10ce:	e0 e3       	ldi	r30, 0x30	; 48
    10d0:	f0 e0       	ldi	r31, 0x00	; 0
    10d2:	80 81       	ld	r24, Z
    10d4:	eb 81       	ldd	r30, Y+3	; 0x03
    10d6:	fc 81       	ldd	r31, Y+4	; 0x04
    10d8:	80 83       	st	Z, r24
				break;
			}
			Local_enuErrorstate = ES_OK;
    10da:	81 e0       	ldi	r24, 0x01	; 1
    10dc:	89 83       	std	Y+1, r24	; 0x01
    10de:	05 c0       	rjmp	.+10     	; 0x10ea <DIO_enuGetPortValue+0xaa>
		}
		else
		{
			Local_enuErrorstate = ES_OUT_OF_RANGE;
    10e0:	83 e0       	ldi	r24, 0x03	; 3
    10e2:	89 83       	std	Y+1, r24	; 0x01
    10e4:	02 c0       	rjmp	.+4      	; 0x10ea <DIO_enuGetPortValue+0xaa>
		}
	}
	else
	{
		Local_enuErrorstate = ES_NULL_POINTER;
    10e6:	82 e0       	ldi	r24, 0x02	; 2
    10e8:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_enuErrorstate;
    10ea:	89 81       	ldd	r24, Y+1	; 0x01
}
    10ec:	26 96       	adiw	r28, 0x06	; 6
    10ee:	0f b6       	in	r0, 0x3f	; 63
    10f0:	f8 94       	cli
    10f2:	de bf       	out	0x3e, r29	; 62
    10f4:	0f be       	out	0x3f, r0	; 63
    10f6:	cd bf       	out	0x3d, r28	; 61
    10f8:	cf 91       	pop	r28
    10fa:	df 91       	pop	r29
    10fc:	08 95       	ret

000010fe <DIO_enuSetPinDirection>:

ES_t DIO_enuSetPinDirection(u8 Copy_u8PortID ,u8 Copy_u8PinID , u8 Copy_u8Value)
{
    10fe:	df 93       	push	r29
    1100:	cf 93       	push	r28
    1102:	00 d0       	rcall	.+0      	; 0x1104 <DIO_enuSetPinDirection+0x6>
    1104:	00 d0       	rcall	.+0      	; 0x1106 <DIO_enuSetPinDirection+0x8>
    1106:	00 d0       	rcall	.+0      	; 0x1108 <DIO_enuSetPinDirection+0xa>
    1108:	cd b7       	in	r28, 0x3d	; 61
    110a:	de b7       	in	r29, 0x3e	; 62
    110c:	8a 83       	std	Y+2, r24	; 0x02
    110e:	6b 83       	std	Y+3, r22	; 0x03
    1110:	4c 83       	std	Y+4, r20	; 0x04
	ES_t Local_enuErrorstate = ES_NOK;
    1112:	19 82       	std	Y+1, r1	; 0x01

	if (Copy_u8PortID <= DIO_PORTD &&
    1114:	8a 81       	ldd	r24, Y+2	; 0x02
    1116:	84 30       	cpi	r24, 0x04	; 4
    1118:	08 f0       	brcs	.+2      	; 0x111c <DIO_enuSetPinDirection+0x1e>
    111a:	d1 c0       	rjmp	.+418    	; 0x12be <DIO_enuSetPinDirection+0x1c0>
    111c:	8b 81       	ldd	r24, Y+3	; 0x03
    111e:	88 30       	cpi	r24, 0x08	; 8
    1120:	08 f0       	brcs	.+2      	; 0x1124 <DIO_enuSetPinDirection+0x26>
    1122:	cd c0       	rjmp	.+410    	; 0x12be <DIO_enuSetPinDirection+0x1c0>
    1124:	8c 81       	ldd	r24, Y+4	; 0x04
    1126:	82 30       	cpi	r24, 0x02	; 2
    1128:	08 f0       	brcs	.+2      	; 0x112c <DIO_enuSetPinDirection+0x2e>
    112a:	c9 c0       	rjmp	.+402    	; 0x12be <DIO_enuSetPinDirection+0x1c0>
			Copy_u8PinID <= DIO_PIN7 &&
			Copy_u8Value <= OUTPUT)
	{
		switch (Copy_u8PortID)
    112c:	8a 81       	ldd	r24, Y+2	; 0x02
    112e:	28 2f       	mov	r18, r24
    1130:	30 e0       	ldi	r19, 0x00	; 0
    1132:	3e 83       	std	Y+6, r19	; 0x06
    1134:	2d 83       	std	Y+5, r18	; 0x05
    1136:	6d 81       	ldd	r22, Y+5	; 0x05
    1138:	7e 81       	ldd	r23, Y+6	; 0x06
    113a:	61 30       	cpi	r22, 0x01	; 1
    113c:	71 05       	cpc	r23, r1
    113e:	09 f4       	brne	.+2      	; 0x1142 <DIO_enuSetPinDirection+0x44>
    1140:	41 c0       	rjmp	.+130    	; 0x11c4 <DIO_enuSetPinDirection+0xc6>
    1142:	8d 81       	ldd	r24, Y+5	; 0x05
    1144:	9e 81       	ldd	r25, Y+6	; 0x06
    1146:	82 30       	cpi	r24, 0x02	; 2
    1148:	91 05       	cpc	r25, r1
    114a:	34 f4       	brge	.+12     	; 0x1158 <DIO_enuSetPinDirection+0x5a>
    114c:	2d 81       	ldd	r18, Y+5	; 0x05
    114e:	3e 81       	ldd	r19, Y+6	; 0x06
    1150:	21 15       	cp	r18, r1
    1152:	31 05       	cpc	r19, r1
    1154:	71 f0       	breq	.+28     	; 0x1172 <DIO_enuSetPinDirection+0x74>
    1156:	b0 c0       	rjmp	.+352    	; 0x12b8 <DIO_enuSetPinDirection+0x1ba>
    1158:	6d 81       	ldd	r22, Y+5	; 0x05
    115a:	7e 81       	ldd	r23, Y+6	; 0x06
    115c:	62 30       	cpi	r22, 0x02	; 2
    115e:	71 05       	cpc	r23, r1
    1160:	09 f4       	brne	.+2      	; 0x1164 <DIO_enuSetPinDirection+0x66>
    1162:	59 c0       	rjmp	.+178    	; 0x1216 <DIO_enuSetPinDirection+0x118>
    1164:	8d 81       	ldd	r24, Y+5	; 0x05
    1166:	9e 81       	ldd	r25, Y+6	; 0x06
    1168:	83 30       	cpi	r24, 0x03	; 3
    116a:	91 05       	cpc	r25, r1
    116c:	09 f4       	brne	.+2      	; 0x1170 <DIO_enuSetPinDirection+0x72>
    116e:	7c c0       	rjmp	.+248    	; 0x1268 <DIO_enuSetPinDirection+0x16a>
    1170:	a3 c0       	rjmp	.+326    	; 0x12b8 <DIO_enuSetPinDirection+0x1ba>
		{
		case DIO_PORTA:
			DDRA &= ~(DIO_MASK_BIT<<Copy_u8PinID);
    1172:	aa e3       	ldi	r26, 0x3A	; 58
    1174:	b0 e0       	ldi	r27, 0x00	; 0
    1176:	ea e3       	ldi	r30, 0x3A	; 58
    1178:	f0 e0       	ldi	r31, 0x00	; 0
    117a:	80 81       	ld	r24, Z
    117c:	48 2f       	mov	r20, r24
    117e:	8b 81       	ldd	r24, Y+3	; 0x03
    1180:	28 2f       	mov	r18, r24
    1182:	30 e0       	ldi	r19, 0x00	; 0
    1184:	81 e0       	ldi	r24, 0x01	; 1
    1186:	90 e0       	ldi	r25, 0x00	; 0
    1188:	02 c0       	rjmp	.+4      	; 0x118e <DIO_enuSetPinDirection+0x90>
    118a:	88 0f       	add	r24, r24
    118c:	99 1f       	adc	r25, r25
    118e:	2a 95       	dec	r18
    1190:	e2 f7       	brpl	.-8      	; 0x118a <DIO_enuSetPinDirection+0x8c>
    1192:	80 95       	com	r24
    1194:	84 23       	and	r24, r20
    1196:	8c 93       	st	X, r24
			DDRA |=  (Copy_u8Value << Copy_u8PinID);
    1198:	aa e3       	ldi	r26, 0x3A	; 58
    119a:	b0 e0       	ldi	r27, 0x00	; 0
    119c:	ea e3       	ldi	r30, 0x3A	; 58
    119e:	f0 e0       	ldi	r31, 0x00	; 0
    11a0:	80 81       	ld	r24, Z
    11a2:	48 2f       	mov	r20, r24
    11a4:	8c 81       	ldd	r24, Y+4	; 0x04
    11a6:	28 2f       	mov	r18, r24
    11a8:	30 e0       	ldi	r19, 0x00	; 0
    11aa:	8b 81       	ldd	r24, Y+3	; 0x03
    11ac:	88 2f       	mov	r24, r24
    11ae:	90 e0       	ldi	r25, 0x00	; 0
    11b0:	b9 01       	movw	r22, r18
    11b2:	02 c0       	rjmp	.+4      	; 0x11b8 <DIO_enuSetPinDirection+0xba>
    11b4:	66 0f       	add	r22, r22
    11b6:	77 1f       	adc	r23, r23
    11b8:	8a 95       	dec	r24
    11ba:	e2 f7       	brpl	.-8      	; 0x11b4 <DIO_enuSetPinDirection+0xb6>
    11bc:	cb 01       	movw	r24, r22
    11be:	84 2b       	or	r24, r20
    11c0:	8c 93       	st	X, r24
    11c2:	7a c0       	rjmp	.+244    	; 0x12b8 <DIO_enuSetPinDirection+0x1ba>
			break;
		case DIO_PORTB:
			DDRB &= ~(DIO_MASK_BIT<<Copy_u8PinID);
    11c4:	a7 e3       	ldi	r26, 0x37	; 55
    11c6:	b0 e0       	ldi	r27, 0x00	; 0
    11c8:	e7 e3       	ldi	r30, 0x37	; 55
    11ca:	f0 e0       	ldi	r31, 0x00	; 0
    11cc:	80 81       	ld	r24, Z
    11ce:	48 2f       	mov	r20, r24
    11d0:	8b 81       	ldd	r24, Y+3	; 0x03
    11d2:	28 2f       	mov	r18, r24
    11d4:	30 e0       	ldi	r19, 0x00	; 0
    11d6:	81 e0       	ldi	r24, 0x01	; 1
    11d8:	90 e0       	ldi	r25, 0x00	; 0
    11da:	02 c0       	rjmp	.+4      	; 0x11e0 <DIO_enuSetPinDirection+0xe2>
    11dc:	88 0f       	add	r24, r24
    11de:	99 1f       	adc	r25, r25
    11e0:	2a 95       	dec	r18
    11e2:	e2 f7       	brpl	.-8      	; 0x11dc <DIO_enuSetPinDirection+0xde>
    11e4:	80 95       	com	r24
    11e6:	84 23       	and	r24, r20
    11e8:	8c 93       	st	X, r24
			DDRB |=  (Copy_u8Value << Copy_u8PinID);
    11ea:	a7 e3       	ldi	r26, 0x37	; 55
    11ec:	b0 e0       	ldi	r27, 0x00	; 0
    11ee:	e7 e3       	ldi	r30, 0x37	; 55
    11f0:	f0 e0       	ldi	r31, 0x00	; 0
    11f2:	80 81       	ld	r24, Z
    11f4:	48 2f       	mov	r20, r24
    11f6:	8c 81       	ldd	r24, Y+4	; 0x04
    11f8:	28 2f       	mov	r18, r24
    11fa:	30 e0       	ldi	r19, 0x00	; 0
    11fc:	8b 81       	ldd	r24, Y+3	; 0x03
    11fe:	88 2f       	mov	r24, r24
    1200:	90 e0       	ldi	r25, 0x00	; 0
    1202:	b9 01       	movw	r22, r18
    1204:	02 c0       	rjmp	.+4      	; 0x120a <DIO_enuSetPinDirection+0x10c>
    1206:	66 0f       	add	r22, r22
    1208:	77 1f       	adc	r23, r23
    120a:	8a 95       	dec	r24
    120c:	e2 f7       	brpl	.-8      	; 0x1206 <DIO_enuSetPinDirection+0x108>
    120e:	cb 01       	movw	r24, r22
    1210:	84 2b       	or	r24, r20
    1212:	8c 93       	st	X, r24
    1214:	51 c0       	rjmp	.+162    	; 0x12b8 <DIO_enuSetPinDirection+0x1ba>
			break;
		case DIO_PORTC:
			DDRC &= ~(DIO_MASK_BIT<<Copy_u8PinID);
    1216:	a4 e3       	ldi	r26, 0x34	; 52
    1218:	b0 e0       	ldi	r27, 0x00	; 0
    121a:	e4 e3       	ldi	r30, 0x34	; 52
    121c:	f0 e0       	ldi	r31, 0x00	; 0
    121e:	80 81       	ld	r24, Z
    1220:	48 2f       	mov	r20, r24
    1222:	8b 81       	ldd	r24, Y+3	; 0x03
    1224:	28 2f       	mov	r18, r24
    1226:	30 e0       	ldi	r19, 0x00	; 0
    1228:	81 e0       	ldi	r24, 0x01	; 1
    122a:	90 e0       	ldi	r25, 0x00	; 0
    122c:	02 c0       	rjmp	.+4      	; 0x1232 <DIO_enuSetPinDirection+0x134>
    122e:	88 0f       	add	r24, r24
    1230:	99 1f       	adc	r25, r25
    1232:	2a 95       	dec	r18
    1234:	e2 f7       	brpl	.-8      	; 0x122e <DIO_enuSetPinDirection+0x130>
    1236:	80 95       	com	r24
    1238:	84 23       	and	r24, r20
    123a:	8c 93       	st	X, r24
			DDRC |=  (Copy_u8Value << Copy_u8PinID);
    123c:	a4 e3       	ldi	r26, 0x34	; 52
    123e:	b0 e0       	ldi	r27, 0x00	; 0
    1240:	e4 e3       	ldi	r30, 0x34	; 52
    1242:	f0 e0       	ldi	r31, 0x00	; 0
    1244:	80 81       	ld	r24, Z
    1246:	48 2f       	mov	r20, r24
    1248:	8c 81       	ldd	r24, Y+4	; 0x04
    124a:	28 2f       	mov	r18, r24
    124c:	30 e0       	ldi	r19, 0x00	; 0
    124e:	8b 81       	ldd	r24, Y+3	; 0x03
    1250:	88 2f       	mov	r24, r24
    1252:	90 e0       	ldi	r25, 0x00	; 0
    1254:	b9 01       	movw	r22, r18
    1256:	02 c0       	rjmp	.+4      	; 0x125c <DIO_enuSetPinDirection+0x15e>
    1258:	66 0f       	add	r22, r22
    125a:	77 1f       	adc	r23, r23
    125c:	8a 95       	dec	r24
    125e:	e2 f7       	brpl	.-8      	; 0x1258 <DIO_enuSetPinDirection+0x15a>
    1260:	cb 01       	movw	r24, r22
    1262:	84 2b       	or	r24, r20
    1264:	8c 93       	st	X, r24
    1266:	28 c0       	rjmp	.+80     	; 0x12b8 <DIO_enuSetPinDirection+0x1ba>
			break;
		case DIO_PORTD:
			DDRD &= ~(DIO_MASK_BIT<<Copy_u8PinID);
    1268:	a1 e3       	ldi	r26, 0x31	; 49
    126a:	b0 e0       	ldi	r27, 0x00	; 0
    126c:	e1 e3       	ldi	r30, 0x31	; 49
    126e:	f0 e0       	ldi	r31, 0x00	; 0
    1270:	80 81       	ld	r24, Z
    1272:	48 2f       	mov	r20, r24
    1274:	8b 81       	ldd	r24, Y+3	; 0x03
    1276:	28 2f       	mov	r18, r24
    1278:	30 e0       	ldi	r19, 0x00	; 0
    127a:	81 e0       	ldi	r24, 0x01	; 1
    127c:	90 e0       	ldi	r25, 0x00	; 0
    127e:	02 c0       	rjmp	.+4      	; 0x1284 <DIO_enuSetPinDirection+0x186>
    1280:	88 0f       	add	r24, r24
    1282:	99 1f       	adc	r25, r25
    1284:	2a 95       	dec	r18
    1286:	e2 f7       	brpl	.-8      	; 0x1280 <DIO_enuSetPinDirection+0x182>
    1288:	80 95       	com	r24
    128a:	84 23       	and	r24, r20
    128c:	8c 93       	st	X, r24
			DDRD |=  (Copy_u8Value << Copy_u8PinID);
    128e:	a1 e3       	ldi	r26, 0x31	; 49
    1290:	b0 e0       	ldi	r27, 0x00	; 0
    1292:	e1 e3       	ldi	r30, 0x31	; 49
    1294:	f0 e0       	ldi	r31, 0x00	; 0
    1296:	80 81       	ld	r24, Z
    1298:	48 2f       	mov	r20, r24
    129a:	8c 81       	ldd	r24, Y+4	; 0x04
    129c:	28 2f       	mov	r18, r24
    129e:	30 e0       	ldi	r19, 0x00	; 0
    12a0:	8b 81       	ldd	r24, Y+3	; 0x03
    12a2:	88 2f       	mov	r24, r24
    12a4:	90 e0       	ldi	r25, 0x00	; 0
    12a6:	b9 01       	movw	r22, r18
    12a8:	02 c0       	rjmp	.+4      	; 0x12ae <DIO_enuSetPinDirection+0x1b0>
    12aa:	66 0f       	add	r22, r22
    12ac:	77 1f       	adc	r23, r23
    12ae:	8a 95       	dec	r24
    12b0:	e2 f7       	brpl	.-8      	; 0x12aa <DIO_enuSetPinDirection+0x1ac>
    12b2:	cb 01       	movw	r24, r22
    12b4:	84 2b       	or	r24, r20
    12b6:	8c 93       	st	X, r24
			break;
		}
		Local_enuErrorstate = ES_OK;
    12b8:	81 e0       	ldi	r24, 0x01	; 1
    12ba:	89 83       	std	Y+1, r24	; 0x01
    12bc:	02 c0       	rjmp	.+4      	; 0x12c2 <DIO_enuSetPinDirection+0x1c4>
	}
	else
	{
		Local_enuErrorstate = ES_OUT_OF_RANGE;
    12be:	83 e0       	ldi	r24, 0x03	; 3
    12c0:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_enuErrorstate;
    12c2:	89 81       	ldd	r24, Y+1	; 0x01
}
    12c4:	26 96       	adiw	r28, 0x06	; 6
    12c6:	0f b6       	in	r0, 0x3f	; 63
    12c8:	f8 94       	cli
    12ca:	de bf       	out	0x3e, r29	; 62
    12cc:	0f be       	out	0x3f, r0	; 63
    12ce:	cd bf       	out	0x3d, r28	; 61
    12d0:	cf 91       	pop	r28
    12d2:	df 91       	pop	r29
    12d4:	08 95       	ret

000012d6 <DIO_enuSetPinValue>:

ES_t DIO_enuSetPinValue(u8 Copy_u8PortID , u8 Copy_u8PinID ,u8 Copy_u8Value)
{
    12d6:	df 93       	push	r29
    12d8:	cf 93       	push	r28
    12da:	00 d0       	rcall	.+0      	; 0x12dc <DIO_enuSetPinValue+0x6>
    12dc:	00 d0       	rcall	.+0      	; 0x12de <DIO_enuSetPinValue+0x8>
    12de:	00 d0       	rcall	.+0      	; 0x12e0 <DIO_enuSetPinValue+0xa>
    12e0:	cd b7       	in	r28, 0x3d	; 61
    12e2:	de b7       	in	r29, 0x3e	; 62
    12e4:	8a 83       	std	Y+2, r24	; 0x02
    12e6:	6b 83       	std	Y+3, r22	; 0x03
    12e8:	4c 83       	std	Y+4, r20	; 0x04
	ES_t Local_enuErrorstate = ES_NOK;
    12ea:	19 82       	std	Y+1, r1	; 0x01

	if (Copy_u8PortID <= DIO_PORTD &&
    12ec:	8a 81       	ldd	r24, Y+2	; 0x02
    12ee:	84 30       	cpi	r24, 0x04	; 4
    12f0:	08 f0       	brcs	.+2      	; 0x12f4 <DIO_enuSetPinValue+0x1e>
    12f2:	d1 c0       	rjmp	.+418    	; 0x1496 <DIO_enuSetPinValue+0x1c0>
    12f4:	8b 81       	ldd	r24, Y+3	; 0x03
    12f6:	88 30       	cpi	r24, 0x08	; 8
    12f8:	08 f0       	brcs	.+2      	; 0x12fc <DIO_enuSetPinValue+0x26>
    12fa:	cd c0       	rjmp	.+410    	; 0x1496 <DIO_enuSetPinValue+0x1c0>
    12fc:	8c 81       	ldd	r24, Y+4	; 0x04
    12fe:	82 30       	cpi	r24, 0x02	; 2
    1300:	08 f0       	brcs	.+2      	; 0x1304 <DIO_enuSetPinValue+0x2e>
    1302:	c9 c0       	rjmp	.+402    	; 0x1496 <DIO_enuSetPinValue+0x1c0>
			Copy_u8PinID <= DIO_PIN7 &&
			Copy_u8Value <= OUTPUT)
	{
		switch (Copy_u8PortID)
    1304:	8a 81       	ldd	r24, Y+2	; 0x02
    1306:	28 2f       	mov	r18, r24
    1308:	30 e0       	ldi	r19, 0x00	; 0
    130a:	3e 83       	std	Y+6, r19	; 0x06
    130c:	2d 83       	std	Y+5, r18	; 0x05
    130e:	6d 81       	ldd	r22, Y+5	; 0x05
    1310:	7e 81       	ldd	r23, Y+6	; 0x06
    1312:	61 30       	cpi	r22, 0x01	; 1
    1314:	71 05       	cpc	r23, r1
    1316:	09 f4       	brne	.+2      	; 0x131a <DIO_enuSetPinValue+0x44>
    1318:	41 c0       	rjmp	.+130    	; 0x139c <DIO_enuSetPinValue+0xc6>
    131a:	8d 81       	ldd	r24, Y+5	; 0x05
    131c:	9e 81       	ldd	r25, Y+6	; 0x06
    131e:	82 30       	cpi	r24, 0x02	; 2
    1320:	91 05       	cpc	r25, r1
    1322:	34 f4       	brge	.+12     	; 0x1330 <DIO_enuSetPinValue+0x5a>
    1324:	2d 81       	ldd	r18, Y+5	; 0x05
    1326:	3e 81       	ldd	r19, Y+6	; 0x06
    1328:	21 15       	cp	r18, r1
    132a:	31 05       	cpc	r19, r1
    132c:	71 f0       	breq	.+28     	; 0x134a <DIO_enuSetPinValue+0x74>
    132e:	b0 c0       	rjmp	.+352    	; 0x1490 <DIO_enuSetPinValue+0x1ba>
    1330:	6d 81       	ldd	r22, Y+5	; 0x05
    1332:	7e 81       	ldd	r23, Y+6	; 0x06
    1334:	62 30       	cpi	r22, 0x02	; 2
    1336:	71 05       	cpc	r23, r1
    1338:	09 f4       	brne	.+2      	; 0x133c <DIO_enuSetPinValue+0x66>
    133a:	59 c0       	rjmp	.+178    	; 0x13ee <DIO_enuSetPinValue+0x118>
    133c:	8d 81       	ldd	r24, Y+5	; 0x05
    133e:	9e 81       	ldd	r25, Y+6	; 0x06
    1340:	83 30       	cpi	r24, 0x03	; 3
    1342:	91 05       	cpc	r25, r1
    1344:	09 f4       	brne	.+2      	; 0x1348 <DIO_enuSetPinValue+0x72>
    1346:	7c c0       	rjmp	.+248    	; 0x1440 <DIO_enuSetPinValue+0x16a>
    1348:	a3 c0       	rjmp	.+326    	; 0x1490 <DIO_enuSetPinValue+0x1ba>
		{
		case DIO_PORTA:
			PORTA &= ~(DIO_MASK_BIT<<Copy_u8PinID);
    134a:	ab e3       	ldi	r26, 0x3B	; 59
    134c:	b0 e0       	ldi	r27, 0x00	; 0
    134e:	eb e3       	ldi	r30, 0x3B	; 59
    1350:	f0 e0       	ldi	r31, 0x00	; 0
    1352:	80 81       	ld	r24, Z
    1354:	48 2f       	mov	r20, r24
    1356:	8b 81       	ldd	r24, Y+3	; 0x03
    1358:	28 2f       	mov	r18, r24
    135a:	30 e0       	ldi	r19, 0x00	; 0
    135c:	81 e0       	ldi	r24, 0x01	; 1
    135e:	90 e0       	ldi	r25, 0x00	; 0
    1360:	02 c0       	rjmp	.+4      	; 0x1366 <DIO_enuSetPinValue+0x90>
    1362:	88 0f       	add	r24, r24
    1364:	99 1f       	adc	r25, r25
    1366:	2a 95       	dec	r18
    1368:	e2 f7       	brpl	.-8      	; 0x1362 <DIO_enuSetPinValue+0x8c>
    136a:	80 95       	com	r24
    136c:	84 23       	and	r24, r20
    136e:	8c 93       	st	X, r24
			PORTA |=  (Copy_u8Value << Copy_u8PinID);
    1370:	ab e3       	ldi	r26, 0x3B	; 59
    1372:	b0 e0       	ldi	r27, 0x00	; 0
    1374:	eb e3       	ldi	r30, 0x3B	; 59
    1376:	f0 e0       	ldi	r31, 0x00	; 0
    1378:	80 81       	ld	r24, Z
    137a:	48 2f       	mov	r20, r24
    137c:	8c 81       	ldd	r24, Y+4	; 0x04
    137e:	28 2f       	mov	r18, r24
    1380:	30 e0       	ldi	r19, 0x00	; 0
    1382:	8b 81       	ldd	r24, Y+3	; 0x03
    1384:	88 2f       	mov	r24, r24
    1386:	90 e0       	ldi	r25, 0x00	; 0
    1388:	b9 01       	movw	r22, r18
    138a:	02 c0       	rjmp	.+4      	; 0x1390 <DIO_enuSetPinValue+0xba>
    138c:	66 0f       	add	r22, r22
    138e:	77 1f       	adc	r23, r23
    1390:	8a 95       	dec	r24
    1392:	e2 f7       	brpl	.-8      	; 0x138c <DIO_enuSetPinValue+0xb6>
    1394:	cb 01       	movw	r24, r22
    1396:	84 2b       	or	r24, r20
    1398:	8c 93       	st	X, r24
    139a:	7a c0       	rjmp	.+244    	; 0x1490 <DIO_enuSetPinValue+0x1ba>
			break;
		case DIO_PORTB:
			PORTB &= ~(DIO_MASK_BIT<<Copy_u8PinID);
    139c:	a8 e3       	ldi	r26, 0x38	; 56
    139e:	b0 e0       	ldi	r27, 0x00	; 0
    13a0:	e8 e3       	ldi	r30, 0x38	; 56
    13a2:	f0 e0       	ldi	r31, 0x00	; 0
    13a4:	80 81       	ld	r24, Z
    13a6:	48 2f       	mov	r20, r24
    13a8:	8b 81       	ldd	r24, Y+3	; 0x03
    13aa:	28 2f       	mov	r18, r24
    13ac:	30 e0       	ldi	r19, 0x00	; 0
    13ae:	81 e0       	ldi	r24, 0x01	; 1
    13b0:	90 e0       	ldi	r25, 0x00	; 0
    13b2:	02 c0       	rjmp	.+4      	; 0x13b8 <DIO_enuSetPinValue+0xe2>
    13b4:	88 0f       	add	r24, r24
    13b6:	99 1f       	adc	r25, r25
    13b8:	2a 95       	dec	r18
    13ba:	e2 f7       	brpl	.-8      	; 0x13b4 <DIO_enuSetPinValue+0xde>
    13bc:	80 95       	com	r24
    13be:	84 23       	and	r24, r20
    13c0:	8c 93       	st	X, r24
			PORTB |=  (Copy_u8Value << Copy_u8PinID);
    13c2:	a8 e3       	ldi	r26, 0x38	; 56
    13c4:	b0 e0       	ldi	r27, 0x00	; 0
    13c6:	e8 e3       	ldi	r30, 0x38	; 56
    13c8:	f0 e0       	ldi	r31, 0x00	; 0
    13ca:	80 81       	ld	r24, Z
    13cc:	48 2f       	mov	r20, r24
    13ce:	8c 81       	ldd	r24, Y+4	; 0x04
    13d0:	28 2f       	mov	r18, r24
    13d2:	30 e0       	ldi	r19, 0x00	; 0
    13d4:	8b 81       	ldd	r24, Y+3	; 0x03
    13d6:	88 2f       	mov	r24, r24
    13d8:	90 e0       	ldi	r25, 0x00	; 0
    13da:	b9 01       	movw	r22, r18
    13dc:	02 c0       	rjmp	.+4      	; 0x13e2 <DIO_enuSetPinValue+0x10c>
    13de:	66 0f       	add	r22, r22
    13e0:	77 1f       	adc	r23, r23
    13e2:	8a 95       	dec	r24
    13e4:	e2 f7       	brpl	.-8      	; 0x13de <DIO_enuSetPinValue+0x108>
    13e6:	cb 01       	movw	r24, r22
    13e8:	84 2b       	or	r24, r20
    13ea:	8c 93       	st	X, r24
    13ec:	51 c0       	rjmp	.+162    	; 0x1490 <DIO_enuSetPinValue+0x1ba>
			break;
		case DIO_PORTC:
			PORTC &= ~(DIO_MASK_BIT<<Copy_u8PinID);
    13ee:	a5 e3       	ldi	r26, 0x35	; 53
    13f0:	b0 e0       	ldi	r27, 0x00	; 0
    13f2:	e5 e3       	ldi	r30, 0x35	; 53
    13f4:	f0 e0       	ldi	r31, 0x00	; 0
    13f6:	80 81       	ld	r24, Z
    13f8:	48 2f       	mov	r20, r24
    13fa:	8b 81       	ldd	r24, Y+3	; 0x03
    13fc:	28 2f       	mov	r18, r24
    13fe:	30 e0       	ldi	r19, 0x00	; 0
    1400:	81 e0       	ldi	r24, 0x01	; 1
    1402:	90 e0       	ldi	r25, 0x00	; 0
    1404:	02 c0       	rjmp	.+4      	; 0x140a <DIO_enuSetPinValue+0x134>
    1406:	88 0f       	add	r24, r24
    1408:	99 1f       	adc	r25, r25
    140a:	2a 95       	dec	r18
    140c:	e2 f7       	brpl	.-8      	; 0x1406 <DIO_enuSetPinValue+0x130>
    140e:	80 95       	com	r24
    1410:	84 23       	and	r24, r20
    1412:	8c 93       	st	X, r24
			PORTC |=  (Copy_u8Value << Copy_u8PinID);
    1414:	a5 e3       	ldi	r26, 0x35	; 53
    1416:	b0 e0       	ldi	r27, 0x00	; 0
    1418:	e5 e3       	ldi	r30, 0x35	; 53
    141a:	f0 e0       	ldi	r31, 0x00	; 0
    141c:	80 81       	ld	r24, Z
    141e:	48 2f       	mov	r20, r24
    1420:	8c 81       	ldd	r24, Y+4	; 0x04
    1422:	28 2f       	mov	r18, r24
    1424:	30 e0       	ldi	r19, 0x00	; 0
    1426:	8b 81       	ldd	r24, Y+3	; 0x03
    1428:	88 2f       	mov	r24, r24
    142a:	90 e0       	ldi	r25, 0x00	; 0
    142c:	b9 01       	movw	r22, r18
    142e:	02 c0       	rjmp	.+4      	; 0x1434 <DIO_enuSetPinValue+0x15e>
    1430:	66 0f       	add	r22, r22
    1432:	77 1f       	adc	r23, r23
    1434:	8a 95       	dec	r24
    1436:	e2 f7       	brpl	.-8      	; 0x1430 <DIO_enuSetPinValue+0x15a>
    1438:	cb 01       	movw	r24, r22
    143a:	84 2b       	or	r24, r20
    143c:	8c 93       	st	X, r24
    143e:	28 c0       	rjmp	.+80     	; 0x1490 <DIO_enuSetPinValue+0x1ba>
			break;
		case DIO_PORTD:
			PORTD &= ~(DIO_MASK_BIT<<Copy_u8PinID);
    1440:	a2 e3       	ldi	r26, 0x32	; 50
    1442:	b0 e0       	ldi	r27, 0x00	; 0
    1444:	e2 e3       	ldi	r30, 0x32	; 50
    1446:	f0 e0       	ldi	r31, 0x00	; 0
    1448:	80 81       	ld	r24, Z
    144a:	48 2f       	mov	r20, r24
    144c:	8b 81       	ldd	r24, Y+3	; 0x03
    144e:	28 2f       	mov	r18, r24
    1450:	30 e0       	ldi	r19, 0x00	; 0
    1452:	81 e0       	ldi	r24, 0x01	; 1
    1454:	90 e0       	ldi	r25, 0x00	; 0
    1456:	02 c0       	rjmp	.+4      	; 0x145c <DIO_enuSetPinValue+0x186>
    1458:	88 0f       	add	r24, r24
    145a:	99 1f       	adc	r25, r25
    145c:	2a 95       	dec	r18
    145e:	e2 f7       	brpl	.-8      	; 0x1458 <DIO_enuSetPinValue+0x182>
    1460:	80 95       	com	r24
    1462:	84 23       	and	r24, r20
    1464:	8c 93       	st	X, r24
			PORTD |=  (Copy_u8Value << Copy_u8PinID);
    1466:	a2 e3       	ldi	r26, 0x32	; 50
    1468:	b0 e0       	ldi	r27, 0x00	; 0
    146a:	e2 e3       	ldi	r30, 0x32	; 50
    146c:	f0 e0       	ldi	r31, 0x00	; 0
    146e:	80 81       	ld	r24, Z
    1470:	48 2f       	mov	r20, r24
    1472:	8c 81       	ldd	r24, Y+4	; 0x04
    1474:	28 2f       	mov	r18, r24
    1476:	30 e0       	ldi	r19, 0x00	; 0
    1478:	8b 81       	ldd	r24, Y+3	; 0x03
    147a:	88 2f       	mov	r24, r24
    147c:	90 e0       	ldi	r25, 0x00	; 0
    147e:	b9 01       	movw	r22, r18
    1480:	02 c0       	rjmp	.+4      	; 0x1486 <DIO_enuSetPinValue+0x1b0>
    1482:	66 0f       	add	r22, r22
    1484:	77 1f       	adc	r23, r23
    1486:	8a 95       	dec	r24
    1488:	e2 f7       	brpl	.-8      	; 0x1482 <DIO_enuSetPinValue+0x1ac>
    148a:	cb 01       	movw	r24, r22
    148c:	84 2b       	or	r24, r20
    148e:	8c 93       	st	X, r24
			break;
		}
		Local_enuErrorstate = ES_OK;
    1490:	81 e0       	ldi	r24, 0x01	; 1
    1492:	89 83       	std	Y+1, r24	; 0x01
    1494:	02 c0       	rjmp	.+4      	; 0x149a <DIO_enuSetPinValue+0x1c4>
	}
	else
	{
		Local_enuErrorstate = ES_OUT_OF_RANGE;
    1496:	83 e0       	ldi	r24, 0x03	; 3
    1498:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_enuErrorstate;
    149a:	89 81       	ldd	r24, Y+1	; 0x01
}
    149c:	26 96       	adiw	r28, 0x06	; 6
    149e:	0f b6       	in	r0, 0x3f	; 63
    14a0:	f8 94       	cli
    14a2:	de bf       	out	0x3e, r29	; 62
    14a4:	0f be       	out	0x3f, r0	; 63
    14a6:	cd bf       	out	0x3d, r28	; 61
    14a8:	cf 91       	pop	r28
    14aa:	df 91       	pop	r29
    14ac:	08 95       	ret

000014ae <DIO_enuTogPin>:

ES_t DIO_enuTogPin(u8 Copy_u8PortID, u8 Copy_u8PinID )
{
    14ae:	df 93       	push	r29
    14b0:	cf 93       	push	r28
    14b2:	00 d0       	rcall	.+0      	; 0x14b4 <DIO_enuTogPin+0x6>
    14b4:	00 d0       	rcall	.+0      	; 0x14b6 <DIO_enuTogPin+0x8>
    14b6:	0f 92       	push	r0
    14b8:	cd b7       	in	r28, 0x3d	; 61
    14ba:	de b7       	in	r29, 0x3e	; 62
    14bc:	8a 83       	std	Y+2, r24	; 0x02
    14be:	6b 83       	std	Y+3, r22	; 0x03
	ES_t Local_enuErrorstate = ES_NOK;
    14c0:	19 82       	std	Y+1, r1	; 0x01

	if (Copy_u8PortID <= DIO_PORTD &&
    14c2:	8a 81       	ldd	r24, Y+2	; 0x02
    14c4:	84 30       	cpi	r24, 0x04	; 4
    14c6:	08 f0       	brcs	.+2      	; 0x14ca <DIO_enuTogPin+0x1c>
    14c8:	75 c0       	rjmp	.+234    	; 0x15b4 <DIO_enuTogPin+0x106>
    14ca:	8b 81       	ldd	r24, Y+3	; 0x03
    14cc:	88 30       	cpi	r24, 0x08	; 8
    14ce:	08 f0       	brcs	.+2      	; 0x14d2 <DIO_enuTogPin+0x24>
    14d0:	71 c0       	rjmp	.+226    	; 0x15b4 <DIO_enuTogPin+0x106>
			Copy_u8PinID <= DIO_PIN7)
	{
		switch (Copy_u8PortID)
    14d2:	8a 81       	ldd	r24, Y+2	; 0x02
    14d4:	28 2f       	mov	r18, r24
    14d6:	30 e0       	ldi	r19, 0x00	; 0
    14d8:	3d 83       	std	Y+5, r19	; 0x05
    14da:	2c 83       	std	Y+4, r18	; 0x04
    14dc:	8c 81       	ldd	r24, Y+4	; 0x04
    14de:	9d 81       	ldd	r25, Y+5	; 0x05
    14e0:	81 30       	cpi	r24, 0x01	; 1
    14e2:	91 05       	cpc	r25, r1
    14e4:	49 f1       	breq	.+82     	; 0x1538 <DIO_enuTogPin+0x8a>
    14e6:	2c 81       	ldd	r18, Y+4	; 0x04
    14e8:	3d 81       	ldd	r19, Y+5	; 0x05
    14ea:	22 30       	cpi	r18, 0x02	; 2
    14ec:	31 05       	cpc	r19, r1
    14ee:	2c f4       	brge	.+10     	; 0x14fa <DIO_enuTogPin+0x4c>
    14f0:	8c 81       	ldd	r24, Y+4	; 0x04
    14f2:	9d 81       	ldd	r25, Y+5	; 0x05
    14f4:	00 97       	sbiw	r24, 0x00	; 0
    14f6:	61 f0       	breq	.+24     	; 0x1510 <DIO_enuTogPin+0x62>
    14f8:	5a c0       	rjmp	.+180    	; 0x15ae <DIO_enuTogPin+0x100>
    14fa:	2c 81       	ldd	r18, Y+4	; 0x04
    14fc:	3d 81       	ldd	r19, Y+5	; 0x05
    14fe:	22 30       	cpi	r18, 0x02	; 2
    1500:	31 05       	cpc	r19, r1
    1502:	71 f1       	breq	.+92     	; 0x1560 <DIO_enuTogPin+0xb2>
    1504:	8c 81       	ldd	r24, Y+4	; 0x04
    1506:	9d 81       	ldd	r25, Y+5	; 0x05
    1508:	83 30       	cpi	r24, 0x03	; 3
    150a:	91 05       	cpc	r25, r1
    150c:	e9 f1       	breq	.+122    	; 0x1588 <DIO_enuTogPin+0xda>
    150e:	4f c0       	rjmp	.+158    	; 0x15ae <DIO_enuTogPin+0x100>
		{
		case DIO_PORTA:
			PORTA ^= (DIO_MASK_BIT<<Copy_u8PinID);
    1510:	ab e3       	ldi	r26, 0x3B	; 59
    1512:	b0 e0       	ldi	r27, 0x00	; 0
    1514:	eb e3       	ldi	r30, 0x3B	; 59
    1516:	f0 e0       	ldi	r31, 0x00	; 0
    1518:	80 81       	ld	r24, Z
    151a:	48 2f       	mov	r20, r24
    151c:	8b 81       	ldd	r24, Y+3	; 0x03
    151e:	28 2f       	mov	r18, r24
    1520:	30 e0       	ldi	r19, 0x00	; 0
    1522:	81 e0       	ldi	r24, 0x01	; 1
    1524:	90 e0       	ldi	r25, 0x00	; 0
    1526:	02 2e       	mov	r0, r18
    1528:	02 c0       	rjmp	.+4      	; 0x152e <DIO_enuTogPin+0x80>
    152a:	88 0f       	add	r24, r24
    152c:	99 1f       	adc	r25, r25
    152e:	0a 94       	dec	r0
    1530:	e2 f7       	brpl	.-8      	; 0x152a <DIO_enuTogPin+0x7c>
    1532:	84 27       	eor	r24, r20
    1534:	8c 93       	st	X, r24
    1536:	3b c0       	rjmp	.+118    	; 0x15ae <DIO_enuTogPin+0x100>
			break;
		case DIO_PORTB:
			PORTB ^= (DIO_MASK_BIT<<Copy_u8PinID);
    1538:	a8 e3       	ldi	r26, 0x38	; 56
    153a:	b0 e0       	ldi	r27, 0x00	; 0
    153c:	e8 e3       	ldi	r30, 0x38	; 56
    153e:	f0 e0       	ldi	r31, 0x00	; 0
    1540:	80 81       	ld	r24, Z
    1542:	48 2f       	mov	r20, r24
    1544:	8b 81       	ldd	r24, Y+3	; 0x03
    1546:	28 2f       	mov	r18, r24
    1548:	30 e0       	ldi	r19, 0x00	; 0
    154a:	81 e0       	ldi	r24, 0x01	; 1
    154c:	90 e0       	ldi	r25, 0x00	; 0
    154e:	02 2e       	mov	r0, r18
    1550:	02 c0       	rjmp	.+4      	; 0x1556 <DIO_enuTogPin+0xa8>
    1552:	88 0f       	add	r24, r24
    1554:	99 1f       	adc	r25, r25
    1556:	0a 94       	dec	r0
    1558:	e2 f7       	brpl	.-8      	; 0x1552 <DIO_enuTogPin+0xa4>
    155a:	84 27       	eor	r24, r20
    155c:	8c 93       	st	X, r24
    155e:	27 c0       	rjmp	.+78     	; 0x15ae <DIO_enuTogPin+0x100>
			break;
		case DIO_PORTC:
			PORTC ^= (DIO_MASK_BIT<<Copy_u8PinID);
    1560:	a5 e3       	ldi	r26, 0x35	; 53
    1562:	b0 e0       	ldi	r27, 0x00	; 0
    1564:	e5 e3       	ldi	r30, 0x35	; 53
    1566:	f0 e0       	ldi	r31, 0x00	; 0
    1568:	80 81       	ld	r24, Z
    156a:	48 2f       	mov	r20, r24
    156c:	8b 81       	ldd	r24, Y+3	; 0x03
    156e:	28 2f       	mov	r18, r24
    1570:	30 e0       	ldi	r19, 0x00	; 0
    1572:	81 e0       	ldi	r24, 0x01	; 1
    1574:	90 e0       	ldi	r25, 0x00	; 0
    1576:	02 2e       	mov	r0, r18
    1578:	02 c0       	rjmp	.+4      	; 0x157e <DIO_enuTogPin+0xd0>
    157a:	88 0f       	add	r24, r24
    157c:	99 1f       	adc	r25, r25
    157e:	0a 94       	dec	r0
    1580:	e2 f7       	brpl	.-8      	; 0x157a <DIO_enuTogPin+0xcc>
    1582:	84 27       	eor	r24, r20
    1584:	8c 93       	st	X, r24
    1586:	13 c0       	rjmp	.+38     	; 0x15ae <DIO_enuTogPin+0x100>
			break;
		case DIO_PORTD:
			PORTD ^= (DIO_MASK_BIT<<Copy_u8PinID);
    1588:	a2 e3       	ldi	r26, 0x32	; 50
    158a:	b0 e0       	ldi	r27, 0x00	; 0
    158c:	e2 e3       	ldi	r30, 0x32	; 50
    158e:	f0 e0       	ldi	r31, 0x00	; 0
    1590:	80 81       	ld	r24, Z
    1592:	48 2f       	mov	r20, r24
    1594:	8b 81       	ldd	r24, Y+3	; 0x03
    1596:	28 2f       	mov	r18, r24
    1598:	30 e0       	ldi	r19, 0x00	; 0
    159a:	81 e0       	ldi	r24, 0x01	; 1
    159c:	90 e0       	ldi	r25, 0x00	; 0
    159e:	02 2e       	mov	r0, r18
    15a0:	02 c0       	rjmp	.+4      	; 0x15a6 <DIO_enuTogPin+0xf8>
    15a2:	88 0f       	add	r24, r24
    15a4:	99 1f       	adc	r25, r25
    15a6:	0a 94       	dec	r0
    15a8:	e2 f7       	brpl	.-8      	; 0x15a2 <DIO_enuTogPin+0xf4>
    15aa:	84 27       	eor	r24, r20
    15ac:	8c 93       	st	X, r24
			break;
		}
		Local_enuErrorstate = ES_OK;
    15ae:	81 e0       	ldi	r24, 0x01	; 1
    15b0:	89 83       	std	Y+1, r24	; 0x01
    15b2:	02 c0       	rjmp	.+4      	; 0x15b8 <DIO_enuTogPin+0x10a>
	}
	else
	{
		Local_enuErrorstate = ES_OUT_OF_RANGE;
    15b4:	83 e0       	ldi	r24, 0x03	; 3
    15b6:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_enuErrorstate;
    15b8:	89 81       	ldd	r24, Y+1	; 0x01
}
    15ba:	0f 90       	pop	r0
    15bc:	0f 90       	pop	r0
    15be:	0f 90       	pop	r0
    15c0:	0f 90       	pop	r0
    15c2:	0f 90       	pop	r0
    15c4:	cf 91       	pop	r28
    15c6:	df 91       	pop	r29
    15c8:	08 95       	ret

000015ca <DIO_enuGetPinValue>:

ES_t DIO_enuGetPinValue(u8 Copy_u8PortID ,u8 Copy_u8PinID , u8 * Copy_pu8Value)
{
    15ca:	df 93       	push	r29
    15cc:	cf 93       	push	r28
    15ce:	cd b7       	in	r28, 0x3d	; 61
    15d0:	de b7       	in	r29, 0x3e	; 62
    15d2:	27 97       	sbiw	r28, 0x07	; 7
    15d4:	0f b6       	in	r0, 0x3f	; 63
    15d6:	f8 94       	cli
    15d8:	de bf       	out	0x3e, r29	; 62
    15da:	0f be       	out	0x3f, r0	; 63
    15dc:	cd bf       	out	0x3d, r28	; 61
    15de:	8a 83       	std	Y+2, r24	; 0x02
    15e0:	6b 83       	std	Y+3, r22	; 0x03
    15e2:	5d 83       	std	Y+5, r21	; 0x05
    15e4:	4c 83       	std	Y+4, r20	; 0x04
	ES_t Local_enuErrorstate = ES_NOK;
    15e6:	19 82       	std	Y+1, r1	; 0x01

	if (Copy_pu8Value != NULL)
    15e8:	8c 81       	ldd	r24, Y+4	; 0x04
    15ea:	9d 81       	ldd	r25, Y+5	; 0x05
    15ec:	00 97       	sbiw	r24, 0x00	; 0
    15ee:	09 f4       	brne	.+2      	; 0x15f2 <DIO_enuGetPinValue+0x28>
    15f0:	7e c0       	rjmp	.+252    	; 0x16ee <DIO_enuGetPinValue+0x124>
	{
		if (Copy_u8PortID <= DIO_PORTD &&
    15f2:	8a 81       	ldd	r24, Y+2	; 0x02
    15f4:	84 30       	cpi	r24, 0x04	; 4
    15f6:	08 f0       	brcs	.+2      	; 0x15fa <DIO_enuGetPinValue+0x30>
    15f8:	77 c0       	rjmp	.+238    	; 0x16e8 <DIO_enuGetPinValue+0x11e>
    15fa:	8b 81       	ldd	r24, Y+3	; 0x03
    15fc:	88 30       	cpi	r24, 0x08	; 8
    15fe:	08 f0       	brcs	.+2      	; 0x1602 <DIO_enuGetPinValue+0x38>
    1600:	73 c0       	rjmp	.+230    	; 0x16e8 <DIO_enuGetPinValue+0x11e>
				Copy_u8PinID <= DIO_PIN7)
		{
			switch (Copy_u8PortID)
    1602:	8a 81       	ldd	r24, Y+2	; 0x02
    1604:	28 2f       	mov	r18, r24
    1606:	30 e0       	ldi	r19, 0x00	; 0
    1608:	3f 83       	std	Y+7, r19	; 0x07
    160a:	2e 83       	std	Y+6, r18	; 0x06
    160c:	4e 81       	ldd	r20, Y+6	; 0x06
    160e:	5f 81       	ldd	r21, Y+7	; 0x07
    1610:	41 30       	cpi	r20, 0x01	; 1
    1612:	51 05       	cpc	r21, r1
    1614:	59 f1       	breq	.+86     	; 0x166c <DIO_enuGetPinValue+0xa2>
    1616:	8e 81       	ldd	r24, Y+6	; 0x06
    1618:	9f 81       	ldd	r25, Y+7	; 0x07
    161a:	82 30       	cpi	r24, 0x02	; 2
    161c:	91 05       	cpc	r25, r1
    161e:	34 f4       	brge	.+12     	; 0x162c <DIO_enuGetPinValue+0x62>
    1620:	2e 81       	ldd	r18, Y+6	; 0x06
    1622:	3f 81       	ldd	r19, Y+7	; 0x07
    1624:	21 15       	cp	r18, r1
    1626:	31 05       	cpc	r19, r1
    1628:	69 f0       	breq	.+26     	; 0x1644 <DIO_enuGetPinValue+0x7a>
    162a:	5b c0       	rjmp	.+182    	; 0x16e2 <DIO_enuGetPinValue+0x118>
    162c:	4e 81       	ldd	r20, Y+6	; 0x06
    162e:	5f 81       	ldd	r21, Y+7	; 0x07
    1630:	42 30       	cpi	r20, 0x02	; 2
    1632:	51 05       	cpc	r21, r1
    1634:	79 f1       	breq	.+94     	; 0x1694 <DIO_enuGetPinValue+0xca>
    1636:	8e 81       	ldd	r24, Y+6	; 0x06
    1638:	9f 81       	ldd	r25, Y+7	; 0x07
    163a:	83 30       	cpi	r24, 0x03	; 3
    163c:	91 05       	cpc	r25, r1
    163e:	09 f4       	brne	.+2      	; 0x1642 <DIO_enuGetPinValue+0x78>
    1640:	3d c0       	rjmp	.+122    	; 0x16bc <DIO_enuGetPinValue+0xf2>
    1642:	4f c0       	rjmp	.+158    	; 0x16e2 <DIO_enuGetPinValue+0x118>
			{
			case DIO_PORTA:
				*Copy_pu8Value = ((PINA>>Copy_u8PinID) &DIO_MASK_BIT);
    1644:	e9 e3       	ldi	r30, 0x39	; 57
    1646:	f0 e0       	ldi	r31, 0x00	; 0
    1648:	80 81       	ld	r24, Z
    164a:	28 2f       	mov	r18, r24
    164c:	30 e0       	ldi	r19, 0x00	; 0
    164e:	8b 81       	ldd	r24, Y+3	; 0x03
    1650:	88 2f       	mov	r24, r24
    1652:	90 e0       	ldi	r25, 0x00	; 0
    1654:	a9 01       	movw	r20, r18
    1656:	02 c0       	rjmp	.+4      	; 0x165c <DIO_enuGetPinValue+0x92>
    1658:	55 95       	asr	r21
    165a:	47 95       	ror	r20
    165c:	8a 95       	dec	r24
    165e:	e2 f7       	brpl	.-8      	; 0x1658 <DIO_enuGetPinValue+0x8e>
    1660:	ca 01       	movw	r24, r20
    1662:	81 70       	andi	r24, 0x01	; 1
    1664:	ec 81       	ldd	r30, Y+4	; 0x04
    1666:	fd 81       	ldd	r31, Y+5	; 0x05
    1668:	80 83       	st	Z, r24
    166a:	3b c0       	rjmp	.+118    	; 0x16e2 <DIO_enuGetPinValue+0x118>
				break;
			case DIO_PORTB:
				*Copy_pu8Value = ((PINB>>Copy_u8PinID) &DIO_MASK_BIT);
    166c:	e6 e3       	ldi	r30, 0x36	; 54
    166e:	f0 e0       	ldi	r31, 0x00	; 0
    1670:	80 81       	ld	r24, Z
    1672:	28 2f       	mov	r18, r24
    1674:	30 e0       	ldi	r19, 0x00	; 0
    1676:	8b 81       	ldd	r24, Y+3	; 0x03
    1678:	88 2f       	mov	r24, r24
    167a:	90 e0       	ldi	r25, 0x00	; 0
    167c:	a9 01       	movw	r20, r18
    167e:	02 c0       	rjmp	.+4      	; 0x1684 <DIO_enuGetPinValue+0xba>
    1680:	55 95       	asr	r21
    1682:	47 95       	ror	r20
    1684:	8a 95       	dec	r24
    1686:	e2 f7       	brpl	.-8      	; 0x1680 <DIO_enuGetPinValue+0xb6>
    1688:	ca 01       	movw	r24, r20
    168a:	81 70       	andi	r24, 0x01	; 1
    168c:	ec 81       	ldd	r30, Y+4	; 0x04
    168e:	fd 81       	ldd	r31, Y+5	; 0x05
    1690:	80 83       	st	Z, r24
    1692:	27 c0       	rjmp	.+78     	; 0x16e2 <DIO_enuGetPinValue+0x118>
				break;
			case DIO_PORTC:
				*Copy_pu8Value = ((PINC>>Copy_u8PinID) &DIO_MASK_BIT);
    1694:	e3 e3       	ldi	r30, 0x33	; 51
    1696:	f0 e0       	ldi	r31, 0x00	; 0
    1698:	80 81       	ld	r24, Z
    169a:	28 2f       	mov	r18, r24
    169c:	30 e0       	ldi	r19, 0x00	; 0
    169e:	8b 81       	ldd	r24, Y+3	; 0x03
    16a0:	88 2f       	mov	r24, r24
    16a2:	90 e0       	ldi	r25, 0x00	; 0
    16a4:	a9 01       	movw	r20, r18
    16a6:	02 c0       	rjmp	.+4      	; 0x16ac <DIO_enuGetPinValue+0xe2>
    16a8:	55 95       	asr	r21
    16aa:	47 95       	ror	r20
    16ac:	8a 95       	dec	r24
    16ae:	e2 f7       	brpl	.-8      	; 0x16a8 <DIO_enuGetPinValue+0xde>
    16b0:	ca 01       	movw	r24, r20
    16b2:	81 70       	andi	r24, 0x01	; 1
    16b4:	ec 81       	ldd	r30, Y+4	; 0x04
    16b6:	fd 81       	ldd	r31, Y+5	; 0x05
    16b8:	80 83       	st	Z, r24
    16ba:	13 c0       	rjmp	.+38     	; 0x16e2 <DIO_enuGetPinValue+0x118>
				break;
			case DIO_PORTD:
				*Copy_pu8Value = ((PIND>>Copy_u8PinID) &DIO_MASK_BIT);
    16bc:	e0 e3       	ldi	r30, 0x30	; 48
    16be:	f0 e0       	ldi	r31, 0x00	; 0
    16c0:	80 81       	ld	r24, Z
    16c2:	28 2f       	mov	r18, r24
    16c4:	30 e0       	ldi	r19, 0x00	; 0
    16c6:	8b 81       	ldd	r24, Y+3	; 0x03
    16c8:	88 2f       	mov	r24, r24
    16ca:	90 e0       	ldi	r25, 0x00	; 0
    16cc:	a9 01       	movw	r20, r18
    16ce:	02 c0       	rjmp	.+4      	; 0x16d4 <DIO_enuGetPinValue+0x10a>
    16d0:	55 95       	asr	r21
    16d2:	47 95       	ror	r20
    16d4:	8a 95       	dec	r24
    16d6:	e2 f7       	brpl	.-8      	; 0x16d0 <DIO_enuGetPinValue+0x106>
    16d8:	ca 01       	movw	r24, r20
    16da:	81 70       	andi	r24, 0x01	; 1
    16dc:	ec 81       	ldd	r30, Y+4	; 0x04
    16de:	fd 81       	ldd	r31, Y+5	; 0x05
    16e0:	80 83       	st	Z, r24
				break;
			}
			Local_enuErrorstate = ES_OK;
    16e2:	81 e0       	ldi	r24, 0x01	; 1
    16e4:	89 83       	std	Y+1, r24	; 0x01
    16e6:	05 c0       	rjmp	.+10     	; 0x16f2 <DIO_enuGetPinValue+0x128>
		}
		else
		{
			Local_enuErrorstate = ES_OUT_OF_RANGE;
    16e8:	83 e0       	ldi	r24, 0x03	; 3
    16ea:	89 83       	std	Y+1, r24	; 0x01
    16ec:	02 c0       	rjmp	.+4      	; 0x16f2 <DIO_enuGetPinValue+0x128>
		}
	}
	else
	{
		Local_enuErrorstate = ES_NULL_POINTER;
    16ee:	82 e0       	ldi	r24, 0x02	; 2
    16f0:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_enuErrorstate;
    16f2:	89 81       	ldd	r24, Y+1	; 0x01
}
    16f4:	27 96       	adiw	r28, 0x07	; 7
    16f6:	0f b6       	in	r0, 0x3f	; 63
    16f8:	f8 94       	cli
    16fa:	de bf       	out	0x3e, r29	; 62
    16fc:	0f be       	out	0x3f, r0	; 63
    16fe:	cd bf       	out	0x3d, r28	; 61
    1700:	cf 91       	pop	r28
    1702:	df 91       	pop	r29
    1704:	08 95       	ret

00001706 <ADC_Init>:
#include "ADC_config.h"
#include "ADC_priv.h"


ES_t ADC_Init()
{
    1706:	df 93       	push	r29
    1708:	cf 93       	push	r28
    170a:	0f 92       	push	r0
    170c:	cd b7       	in	r28, 0x3d	; 61
    170e:	de b7       	in	r29, 0x3e	; 62
	ES_t Local_enuErrorState = ES_NOK;
    1710:	19 82       	std	Y+1, r1	; 0x01
	// VOLTAGE REFERENCE
   #if ADC_REFERENCE_VOLTAGE == VREF_AVCC
	ADMUX |= (1<<REFS0);
    1712:	a7 e2       	ldi	r26, 0x27	; 39
    1714:	b0 e0       	ldi	r27, 0x00	; 0
    1716:	e7 e2       	ldi	r30, 0x27	; 39
    1718:	f0 e0       	ldi	r31, 0x00	; 0
    171a:	80 81       	ld	r24, Z
    171c:	80 64       	ori	r24, 0x40	; 64
    171e:	8c 93       	st	X, r24
	ADMUX &= ~(1<<REFS1);
    1720:	a7 e2       	ldi	r26, 0x27	; 39
    1722:	b0 e0       	ldi	r27, 0x00	; 0
    1724:	e7 e2       	ldi	r30, 0x27	; 39
    1726:	f0 e0       	ldi	r31, 0x00	; 0
    1728:	80 81       	ld	r24, Z
    172a:	8f 77       	andi	r24, 0x7F	; 127
    172c:	8c 93       	st	X, r24
	ADMUX &= ~(1<<REFS0);
	ADMUX &= ~(1<<REFS1);
  #endif
	//ADC Adjustment
  #if ADC_ADJUSTMENT == RIGHT_ADUSTMENT
	ADMUX &= ~(1<<ADLAR);
    172e:	a7 e2       	ldi	r26, 0x27	; 39
    1730:	b0 e0       	ldi	r27, 0x00	; 0
    1732:	e7 e2       	ldi	r30, 0x27	; 39
    1734:	f0 e0       	ldi	r31, 0x00	; 0
    1736:	80 81       	ld	r24, Z
    1738:	8f 7d       	andi	r24, 0xDF	; 223
    173a:	8c 93       	st	X, r24
	ADMUX |= (1<<ADLAR);
  #endif


	  /***ADC Prescalar**/
	  ADCSRA &= ~(7<<0); //clear bit 0,1,2
    173c:	a6 e2       	ldi	r26, 0x26	; 38
    173e:	b0 e0       	ldi	r27, 0x00	; 0
    1740:	e6 e2       	ldi	r30, 0x26	; 38
    1742:	f0 e0       	ldi	r31, 0x00	; 0
    1744:	80 81       	ld	r24, Z
    1746:	88 7f       	andi	r24, 0xF8	; 248
    1748:	8c 93       	st	X, r24
  #elif ADC_PRESCALAR_SELECTION == PRESCALAR_DIVISION_FACTOR_32
	  ADCSRA |= 5;
  #elif ADC_PRESCALAR_SELECTION == PRESCALAR_DIVISION_FACTOR_64
	  ADCSRA |= 6;
  #elif ADC_PRESCALAR_SELECTION == PRESCALAR_DIVISION_FACTOR_128
	  ADCSRA |= 7;
    174a:	a6 e2       	ldi	r26, 0x26	; 38
    174c:	b0 e0       	ldi	r27, 0x00	; 0
    174e:	e6 e2       	ldi	r30, 0x26	; 38
    1750:	f0 e0       	ldi	r31, 0x00	; 0
    1752:	80 81       	ld	r24, Z
    1754:	87 60       	ori	r24, 0x07	; 7
    1756:	8c 93       	st	X, r24
  #endif

	  /**Enable ADC***/
	  ADCSRA |= (1<<ADEN);
    1758:	a6 e2       	ldi	r26, 0x26	; 38
    175a:	b0 e0       	ldi	r27, 0x00	; 0
    175c:	e6 e2       	ldi	r30, 0x26	; 38
    175e:	f0 e0       	ldi	r31, 0x00	; 0
    1760:	80 81       	ld	r24, Z
    1762:	80 68       	ori	r24, 0x80	; 128
    1764:	8c 93       	st	X, r24

	  Local_enuErrorState = ES_OK;
    1766:	81 e0       	ldi	r24, 0x01	; 1
    1768:	89 83       	std	Y+1, r24	; 0x01

	  return Local_enuErrorState;
    176a:	89 81       	ldd	r24, Y+1	; 0x01


}
    176c:	0f 90       	pop	r0
    176e:	cf 91       	pop	r28
    1770:	df 91       	pop	r29
    1772:	08 95       	ret

00001774 <ADC_Conversion>:
ES_t ADC_Conversion()
{
    1774:	df 93       	push	r29
    1776:	cf 93       	push	r28
    1778:	0f 92       	push	r0
    177a:	cd b7       	in	r28, 0x3d	; 61
    177c:	de b7       	in	r29, 0x3e	; 62
	ES_t Local_enuErrorState = ES_NOK;
    177e:	19 82       	std	Y+1, r1	; 0x01
	 ADCSRA |= (1<<ADSC);
    1780:	a6 e2       	ldi	r26, 0x26	; 38
    1782:	b0 e0       	ldi	r27, 0x00	; 0
    1784:	e6 e2       	ldi	r30, 0x26	; 38
    1786:	f0 e0       	ldi	r31, 0x00	; 0
    1788:	80 81       	ld	r24, Z
    178a:	80 64       	ori	r24, 0x40	; 64
    178c:	8c 93       	st	X, r24

  	Local_enuErrorState = ES_OK;
    178e:	81 e0       	ldi	r24, 0x01	; 1
    1790:	89 83       	std	Y+1, r24	; 0x01
	 return Local_enuErrorState;
    1792:	89 81       	ldd	r24, Y+1	; 0x01
}
    1794:	0f 90       	pop	r0
    1796:	cf 91       	pop	r28
    1798:	df 91       	pop	r29
    179a:	08 95       	ret

0000179c <ADC_enuPollingSystem>:
ES_t ADC_enuPollingSystem(void)
{
    179c:	df 93       	push	r29
    179e:	cf 93       	push	r28
    17a0:	0f 92       	push	r0
    17a2:	cd b7       	in	r28, 0x3d	; 61
    17a4:	de b7       	in	r29, 0x3e	; 62
	ES_t Local_enuErrorState = ES_NOK;
    17a6:	19 82       	std	Y+1, r1	; 0x01

	while( ( (ADCSRA >> ADIF)&1 ) == 0);
    17a8:	e6 e2       	ldi	r30, 0x26	; 38
    17aa:	f0 e0       	ldi	r31, 0x00	; 0
    17ac:	80 81       	ld	r24, Z
    17ae:	82 95       	swap	r24
    17b0:	8f 70       	andi	r24, 0x0F	; 15
    17b2:	88 2f       	mov	r24, r24
    17b4:	90 e0       	ldi	r25, 0x00	; 0
    17b6:	81 70       	andi	r24, 0x01	; 1
    17b8:	90 70       	andi	r25, 0x00	; 0
    17ba:	00 97       	sbiw	r24, 0x00	; 0
    17bc:	a9 f3       	breq	.-22     	; 0x17a8 <ADC_enuPollingSystem+0xc>
    ADCSRA |= (1<<ADIF);
    17be:	a6 e2       	ldi	r26, 0x26	; 38
    17c0:	b0 e0       	ldi	r27, 0x00	; 0
    17c2:	e6 e2       	ldi	r30, 0x26	; 38
    17c4:	f0 e0       	ldi	r31, 0x00	; 0
    17c6:	80 81       	ld	r24, Z
    17c8:	80 61       	ori	r24, 0x10	; 16
    17ca:	8c 93       	st	X, r24
	 Local_enuErrorState = ES_OK;
    17cc:	81 e0       	ldi	r24, 0x01	; 1
    17ce:	89 83       	std	Y+1, r24	; 0x01

	return Local_enuErrorState;
    17d0:	89 81       	ldd	r24, Y+1	; 0x01

}
    17d2:	0f 90       	pop	r0
    17d4:	cf 91       	pop	r28
    17d6:	df 91       	pop	r29
    17d8:	08 95       	ret

000017da <ADC_enuReadHighValue>:

ES_t ADC_enuReadHighValue(u8 * Copy_pu8Value)
{
    17da:	df 93       	push	r29
    17dc:	cf 93       	push	r28
    17de:	00 d0       	rcall	.+0      	; 0x17e0 <ADC_enuReadHighValue+0x6>
    17e0:	0f 92       	push	r0
    17e2:	cd b7       	in	r28, 0x3d	; 61
    17e4:	de b7       	in	r29, 0x3e	; 62
    17e6:	9b 83       	std	Y+3, r25	; 0x03
    17e8:	8a 83       	std	Y+2, r24	; 0x02
	ES_t Local_enuErrorState = ES_NOK;
    17ea:	19 82       	std	Y+1, r1	; 0x01

    #if ADC_ADJUSTMENT == RIGHT_ADUSTMENT
	* Copy_pu8Value = ADCL >> 2;
    17ec:	e4 e2       	ldi	r30, 0x24	; 36
    17ee:	f0 e0       	ldi	r31, 0x00	; 0
    17f0:	80 81       	ld	r24, Z
    17f2:	86 95       	lsr	r24
    17f4:	86 95       	lsr	r24
    17f6:	ea 81       	ldd	r30, Y+2	; 0x02
    17f8:	fb 81       	ldd	r31, Y+3	; 0x03
    17fa:	80 83       	st	Z, r24
	* Copy_pu8Value |= (ADCH << 6);
    17fc:	ea 81       	ldd	r30, Y+2	; 0x02
    17fe:	fb 81       	ldd	r31, Y+3	; 0x03
    1800:	80 81       	ld	r24, Z
    1802:	28 2f       	mov	r18, r24
    1804:	e5 e2       	ldi	r30, 0x25	; 37
    1806:	f0 e0       	ldi	r31, 0x00	; 0
    1808:	80 81       	ld	r24, Z
    180a:	88 2f       	mov	r24, r24
    180c:	90 e0       	ldi	r25, 0x00	; 0
    180e:	00 24       	eor	r0, r0
    1810:	96 95       	lsr	r25
    1812:	87 95       	ror	r24
    1814:	07 94       	ror	r0
    1816:	96 95       	lsr	r25
    1818:	87 95       	ror	r24
    181a:	07 94       	ror	r0
    181c:	98 2f       	mov	r25, r24
    181e:	80 2d       	mov	r24, r0
    1820:	82 2b       	or	r24, r18
    1822:	ea 81       	ldd	r30, Y+2	; 0x02
    1824:	fb 81       	ldd	r31, Y+3	; 0x03
    1826:	80 83       	st	Z, r24
    #elif ADC_ADJUSTMENT == LEFT_ADUSTMENT
	* Copy_pu8Value = ADCH;
    #endif

	 Local_enuErrorState = ES_OK;
    1828:	81 e0       	ldi	r24, 0x01	; 1
    182a:	89 83       	std	Y+1, r24	; 0x01
		return Local_enuErrorState;
    182c:	89 81       	ldd	r24, Y+1	; 0x01
}
    182e:	0f 90       	pop	r0
    1830:	0f 90       	pop	r0
    1832:	0f 90       	pop	r0
    1834:	cf 91       	pop	r28
    1836:	df 91       	pop	r29
    1838:	08 95       	ret

0000183a <ADC_enuRead>:

ES_t ADC_enuRead(u16 * Copy_pu16Value)
{
    183a:	df 93       	push	r29
    183c:	cf 93       	push	r28
    183e:	00 d0       	rcall	.+0      	; 0x1840 <ADC_enuRead+0x6>
    1840:	0f 92       	push	r0
    1842:	cd b7       	in	r28, 0x3d	; 61
    1844:	de b7       	in	r29, 0x3e	; 62
    1846:	9b 83       	std	Y+3, r25	; 0x03
    1848:	8a 83       	std	Y+2, r24	; 0x02
	ES_t Local_enuErrorState = ES_NOK;
    184a:	19 82       	std	Y+1, r1	; 0x01

    #if ADC_ADJUSTMENT == RIGHT_ADUSTMENT
	* Copy_pu16Value = ADCL;
    184c:	e4 e2       	ldi	r30, 0x24	; 36
    184e:	f0 e0       	ldi	r31, 0x00	; 0
    1850:	80 81       	ld	r24, Z
    1852:	88 2f       	mov	r24, r24
    1854:	90 e0       	ldi	r25, 0x00	; 0
    1856:	ea 81       	ldd	r30, Y+2	; 0x02
    1858:	fb 81       	ldd	r31, Y+3	; 0x03
    185a:	91 83       	std	Z+1, r25	; 0x01
    185c:	80 83       	st	Z, r24
	* Copy_pu16Value |= ( (u16)ADCH << 8 );
    185e:	ea 81       	ldd	r30, Y+2	; 0x02
    1860:	fb 81       	ldd	r31, Y+3	; 0x03
    1862:	20 81       	ld	r18, Z
    1864:	31 81       	ldd	r19, Z+1	; 0x01
    1866:	e5 e2       	ldi	r30, 0x25	; 37
    1868:	f0 e0       	ldi	r31, 0x00	; 0
    186a:	80 81       	ld	r24, Z
    186c:	88 2f       	mov	r24, r24
    186e:	90 e0       	ldi	r25, 0x00	; 0
    1870:	98 2f       	mov	r25, r24
    1872:	88 27       	eor	r24, r24
    1874:	82 2b       	or	r24, r18
    1876:	93 2b       	or	r25, r19
    1878:	ea 81       	ldd	r30, Y+2	; 0x02
    187a:	fb 81       	ldd	r31, Y+3	; 0x03
    187c:	91 83       	std	Z+1, r25	; 0x01
    187e:	80 83       	st	Z, r24
   #elif ADC_ADJUSTMENT == LEFT_ADUSTMENT
	* Copy_pu16Value = ADC;
   #endif

	  Local_enuErrorState = ES_OK;
    1880:	81 e0       	ldi	r24, 0x01	; 1
    1882:	89 83       	std	Y+1, r24	; 0x01
		return Local_enuErrorState;
    1884:	89 81       	ldd	r24, Y+1	; 0x01
}
    1886:	0f 90       	pop	r0
    1888:	0f 90       	pop	r0
    188a:	0f 90       	pop	r0
    188c:	cf 91       	pop	r28
    188e:	df 91       	pop	r29
    1890:	08 95       	ret

00001892 <ADC_enuCallBack>:

ES_t ADC_enuCallBack(void(*Copy_pfunAppFun)(void*) , void * Copy_pvidAppParameter)
{
    1892:	df 93       	push	r29
    1894:	cf 93       	push	r28
    1896:	00 d0       	rcall	.+0      	; 0x1898 <ADC_enuCallBack+0x6>
    1898:	00 d0       	rcall	.+0      	; 0x189a <ADC_enuCallBack+0x8>
    189a:	0f 92       	push	r0
    189c:	cd b7       	in	r28, 0x3d	; 61
    189e:	de b7       	in	r29, 0x3e	; 62
    18a0:	9b 83       	std	Y+3, r25	; 0x03
    18a2:	8a 83       	std	Y+2, r24	; 0x02
    18a4:	7d 83       	std	Y+5, r23	; 0x05
    18a6:	6c 83       	std	Y+4, r22	; 0x04
	ES_t Local_enuErrorState = ES_NOK;
    18a8:	19 82       	std	Y+1, r1	; 0x01
		return Local_enuErrorState;
    18aa:	89 81       	ldd	r24, Y+1	; 0x01
}
    18ac:	0f 90       	pop	r0
    18ae:	0f 90       	pop	r0
    18b0:	0f 90       	pop	r0
    18b2:	0f 90       	pop	r0
    18b4:	0f 90       	pop	r0
    18b6:	cf 91       	pop	r28
    18b8:	df 91       	pop	r29
    18ba:	08 95       	ret

000018bc <ADC_enuSelectChannel>:

ES_t ADC_enuSelectChannel(u8 Copy_u8ChannelID)
{
    18bc:	df 93       	push	r29
    18be:	cf 93       	push	r28
    18c0:	00 d0       	rcall	.+0      	; 0x18c2 <ADC_enuSelectChannel+0x6>
    18c2:	cd b7       	in	r28, 0x3d	; 61
    18c4:	de b7       	in	r29, 0x3e	; 62
    18c6:	8a 83       	std	Y+2, r24	; 0x02
	ES_t Local_enuErrorState = ES_NOK;
    18c8:	19 82       	std	Y+1, r1	; 0x01
	if( Copy_u8ChannelID >= 0 &&  Copy_u8ChannelID < 30)
    18ca:	8a 81       	ldd	r24, Y+2	; 0x02
    18cc:	8e 31       	cpi	r24, 0x1E	; 30
    18ce:	88 f4       	brcc	.+34     	; 0x18f2 <ADC_enuSelectChannel+0x36>
	{
		ADMUX &= ~(31<<0); //clear bit 0,1,2,3,4
    18d0:	a7 e2       	ldi	r26, 0x27	; 39
    18d2:	b0 e0       	ldi	r27, 0x00	; 0
    18d4:	e7 e2       	ldi	r30, 0x27	; 39
    18d6:	f0 e0       	ldi	r31, 0x00	; 0
    18d8:	80 81       	ld	r24, Z
    18da:	80 7e       	andi	r24, 0xE0	; 224
    18dc:	8c 93       	st	X, r24
		ADMUX |= Copy_u8ChannelID;
    18de:	a7 e2       	ldi	r26, 0x27	; 39
    18e0:	b0 e0       	ldi	r27, 0x00	; 0
    18e2:	e7 e2       	ldi	r30, 0x27	; 39
    18e4:	f0 e0       	ldi	r31, 0x00	; 0
    18e6:	90 81       	ld	r25, Z
    18e8:	8a 81       	ldd	r24, Y+2	; 0x02
    18ea:	89 2b       	or	r24, r25
    18ec:	8c 93       	st	X, r24
		Local_enuErrorState = ES_OK;
    18ee:	81 e0       	ldi	r24, 0x01	; 1
    18f0:	89 83       	std	Y+1, r24	; 0x01

	}
		return Local_enuErrorState;
    18f2:	89 81       	ldd	r24, Y+1	; 0x01
}
    18f4:	0f 90       	pop	r0
    18f6:	0f 90       	pop	r0
    18f8:	cf 91       	pop	r28
    18fa:	df 91       	pop	r29
    18fc:	08 95       	ret

000018fe <ADC_enuEnableTriggeringMode>:

ES_t ADC_enuEnableTriggeringMode(u8 Copy_u8TriggeringSource)
{
    18fe:	df 93       	push	r29
    1900:	cf 93       	push	r28
    1902:	00 d0       	rcall	.+0      	; 0x1904 <ADC_enuEnableTriggeringMode+0x6>
    1904:	00 d0       	rcall	.+0      	; 0x1906 <ADC_enuEnableTriggeringMode+0x8>
    1906:	cd b7       	in	r28, 0x3d	; 61
    1908:	de b7       	in	r29, 0x3e	; 62
    190a:	8a 83       	std	Y+2, r24	; 0x02
	ES_t Local_enuErrorState = ES_NOK;
    190c:	19 82       	std	Y+1, r1	; 0x01

		ADCSRA &=~(1<<ADATE);
    190e:	a6 e2       	ldi	r26, 0x26	; 38
    1910:	b0 e0       	ldi	r27, 0x00	; 0
    1912:	e6 e2       	ldi	r30, 0x26	; 38
    1914:	f0 e0       	ldi	r31, 0x00	; 0
    1916:	80 81       	ld	r24, Z
    1918:	8f 7d       	andi	r24, 0xDF	; 223
    191a:	8c 93       	st	X, r24

		switch(Copy_u8TriggeringSource)
    191c:	8a 81       	ldd	r24, Y+2	; 0x02
    191e:	28 2f       	mov	r18, r24
    1920:	30 e0       	ldi	r19, 0x00	; 0
    1922:	3c 83       	std	Y+4, r19	; 0x04
    1924:	2b 83       	std	Y+3, r18	; 0x03
    1926:	8b 81       	ldd	r24, Y+3	; 0x03
    1928:	9c 81       	ldd	r25, Y+4	; 0x04
    192a:	8a 30       	cpi	r24, 0x0A	; 10
    192c:	91 05       	cpc	r25, r1
    192e:	31 f0       	breq	.+12     	; 0x193c <ADC_enuEnableTriggeringMode+0x3e>
    1930:	2b 81       	ldd	r18, Y+3	; 0x03
    1932:	3c 81       	ldd	r19, Y+4	; 0x04
    1934:	2e 30       	cpi	r18, 0x0E	; 14
    1936:	31 05       	cpc	r19, r1
    1938:	b9 f0       	breq	.+46     	; 0x1968 <ADC_enuEnableTriggeringMode+0x6a>
    193a:	2b c0       	rjmp	.+86     	; 0x1992 <ADC_enuEnableTriggeringMode+0x94>
		{
		case FREE_RUNNING:
			SFIOR &=~(1<<5);
    193c:	a0 e5       	ldi	r26, 0x50	; 80
    193e:	b0 e0       	ldi	r27, 0x00	; 0
    1940:	e0 e5       	ldi	r30, 0x50	; 80
    1942:	f0 e0       	ldi	r31, 0x00	; 0
    1944:	80 81       	ld	r24, Z
    1946:	8f 7d       	andi	r24, 0xDF	; 223
    1948:	8c 93       	st	X, r24
			SFIOR &=~(1<<6);
    194a:	a0 e5       	ldi	r26, 0x50	; 80
    194c:	b0 e0       	ldi	r27, 0x00	; 0
    194e:	e0 e5       	ldi	r30, 0x50	; 80
    1950:	f0 e0       	ldi	r31, 0x00	; 0
    1952:	80 81       	ld	r24, Z
    1954:	8f 7b       	andi	r24, 0xBF	; 191
    1956:	8c 93       	st	X, r24
			SFIOR &=~(1<<7);
    1958:	a0 e5       	ldi	r26, 0x50	; 80
    195a:	b0 e0       	ldi	r27, 0x00	; 0
    195c:	e0 e5       	ldi	r30, 0x50	; 80
    195e:	f0 e0       	ldi	r31, 0x00	; 0
    1960:	80 81       	ld	r24, Z
    1962:	8f 77       	andi	r24, 0x7F	; 127
    1964:	8c 93       	st	X, r24
    1966:	15 c0       	rjmp	.+42     	; 0x1992 <ADC_enuEnableTriggeringMode+0x94>
			break;
		case EXTI0_TRIG:
			SFIOR &=~(1<<5);
    1968:	a0 e5       	ldi	r26, 0x50	; 80
    196a:	b0 e0       	ldi	r27, 0x00	; 0
    196c:	e0 e5       	ldi	r30, 0x50	; 80
    196e:	f0 e0       	ldi	r31, 0x00	; 0
    1970:	80 81       	ld	r24, Z
    1972:	8f 7d       	andi	r24, 0xDF	; 223
    1974:	8c 93       	st	X, r24
			SFIOR |= (1<<6);
    1976:	a0 e5       	ldi	r26, 0x50	; 80
    1978:	b0 e0       	ldi	r27, 0x00	; 0
    197a:	e0 e5       	ldi	r30, 0x50	; 80
    197c:	f0 e0       	ldi	r31, 0x00	; 0
    197e:	80 81       	ld	r24, Z
    1980:	80 64       	ori	r24, 0x40	; 64
    1982:	8c 93       	st	X, r24
			SFIOR &=~(1<<7);
    1984:	a0 e5       	ldi	r26, 0x50	; 80
    1986:	b0 e0       	ldi	r27, 0x00	; 0
    1988:	e0 e5       	ldi	r30, 0x50	; 80
    198a:	f0 e0       	ldi	r31, 0x00	; 0
    198c:	80 81       	ld	r24, Z
    198e:	8f 77       	andi	r24, 0x7F	; 127
    1990:	8c 93       	st	X, r24
			break;
		}

		ADCSRA |=(1<<ADATE);
    1992:	a6 e2       	ldi	r26, 0x26	; 38
    1994:	b0 e0       	ldi	r27, 0x00	; 0
    1996:	e6 e2       	ldi	r30, 0x26	; 38
    1998:	f0 e0       	ldi	r31, 0x00	; 0
    199a:	80 81       	ld	r24, Z
    199c:	80 62       	ori	r24, 0x20	; 32
    199e:	8c 93       	st	X, r24

		Local_enuErrorState = ES_OK;
    19a0:	81 e0       	ldi	r24, 0x01	; 1
    19a2:	89 83       	std	Y+1, r24	; 0x01
		return Local_enuErrorState;
    19a4:	89 81       	ldd	r24, Y+1	; 0x01
}
    19a6:	0f 90       	pop	r0
    19a8:	0f 90       	pop	r0
    19aa:	0f 90       	pop	r0
    19ac:	0f 90       	pop	r0
    19ae:	cf 91       	pop	r28
    19b0:	df 91       	pop	r29
    19b2:	08 95       	ret

000019b4 <ADC_enuDisableTriggeringMode>:

ES_t ADC_enuDisableTriggeringMode(void)
{
    19b4:	df 93       	push	r29
    19b6:	cf 93       	push	r28
    19b8:	0f 92       	push	r0
    19ba:	cd b7       	in	r28, 0x3d	; 61
    19bc:	de b7       	in	r29, 0x3e	; 62
	ES_t Local_enuErrorState = ES_NOK;
    19be:	19 82       	std	Y+1, r1	; 0x01

	   ADCSRA &=~(1<<ADATE);
    19c0:	a6 e2       	ldi	r26, 0x26	; 38
    19c2:	b0 e0       	ldi	r27, 0x00	; 0
    19c4:	e6 e2       	ldi	r30, 0x26	; 38
    19c6:	f0 e0       	ldi	r31, 0x00	; 0
    19c8:	80 81       	ld	r24, Z
    19ca:	8f 7d       	andi	r24, 0xDF	; 223
    19cc:	8c 93       	st	X, r24

	  Local_enuErrorState = ES_OK;
    19ce:	81 e0       	ldi	r24, 0x01	; 1
    19d0:	89 83       	std	Y+1, r24	; 0x01
		return Local_enuErrorState;
    19d2:	89 81       	ldd	r24, Y+1	; 0x01
}
    19d4:	0f 90       	pop	r0
    19d6:	cf 91       	pop	r28
    19d8:	df 91       	pop	r29
    19da:	08 95       	ret

000019dc <ADC_enuEnableInterruptMode>:

ES_t ADC_enuEnableInterruptMode(void)
{
    19dc:	df 93       	push	r29
    19de:	cf 93       	push	r28
    19e0:	0f 92       	push	r0
    19e2:	cd b7       	in	r28, 0x3d	; 61
    19e4:	de b7       	in	r29, 0x3e	; 62
	ES_t Local_enuErrorState = ES_NOK;
    19e6:	19 82       	std	Y+1, r1	; 0x01
	  ADCSRA |=(1<<ADIE);
    19e8:	a6 e2       	ldi	r26, 0x26	; 38
    19ea:	b0 e0       	ldi	r27, 0x00	; 0
    19ec:	e6 e2       	ldi	r30, 0x26	; 38
    19ee:	f0 e0       	ldi	r31, 0x00	; 0
    19f0:	80 81       	ld	r24, Z
    19f2:	88 60       	ori	r24, 0x08	; 8
    19f4:	8c 93       	st	X, r24
	  Local_enuErrorState = ES_OK;
    19f6:	81 e0       	ldi	r24, 0x01	; 1
    19f8:	89 83       	std	Y+1, r24	; 0x01
		return Local_enuErrorState;
    19fa:	89 81       	ldd	r24, Y+1	; 0x01
}
    19fc:	0f 90       	pop	r0
    19fe:	cf 91       	pop	r28
    1a00:	df 91       	pop	r29
    1a02:	08 95       	ret

00001a04 <LM35_enuInit>:

#include "LM35_priv.h"
#include "LM35_config.h"

ES_t LM35_enuInit(void)
{
    1a04:	df 93       	push	r29
    1a06:	cf 93       	push	r28
    1a08:	0f 92       	push	r0
    1a0a:	cd b7       	in	r28, 0x3d	; 61
    1a0c:	de b7       	in	r29, 0x3e	; 62
	ES_t Local_enuErrorState = ES_NOK;
    1a0e:	19 82       	std	Y+1, r1	; 0x01



		Local_enuErrorState=DIO_enuSetPinDirection( DIO_u8PORTA	,LM35_PIN_NUM,DIO_u8INPUT);
    1a10:	80 e0       	ldi	r24, 0x00	; 0
    1a12:	65 e0       	ldi	r22, 0x05	; 5
    1a14:	40 e0       	ldi	r20, 0x00	; 0
    1a16:	0e 94 7f 08 	call	0x10fe	; 0x10fe <DIO_enuSetPinDirection>
    1a1a:	89 83       	std	Y+1, r24	; 0x01
		ADC_Init();
    1a1c:	0e 94 83 0b 	call	0x1706	; 0x1706 <ADC_Init>
		Local_enuErrorState=ADC_enuSelectChannel(LM35_PIN_NUM);
    1a20:	85 e0       	ldi	r24, 0x05	; 5
    1a22:	0e 94 5e 0c 	call	0x18bc	; 0x18bc <ADC_enuSelectChannel>
    1a26:	89 83       	std	Y+1, r24	; 0x01


		return Local_enuErrorState;
    1a28:	89 81       	ldd	r24, Y+1	; 0x01

}
    1a2a:	0f 90       	pop	r0
    1a2c:	cf 91       	pop	r28
    1a2e:	df 91       	pop	r29
    1a30:	08 95       	ret

00001a32 <LM35_enuGetTemp>:
ES_t LM35_enuGetTemp(s32 *Temp)
{
    1a32:	df 93       	push	r29
    1a34:	cf 93       	push	r28
    1a36:	00 d0       	rcall	.+0      	; 0x1a38 <LM35_enuGetTemp+0x6>
    1a38:	00 d0       	rcall	.+0      	; 0x1a3a <LM35_enuGetTemp+0x8>
    1a3a:	0f 92       	push	r0
    1a3c:	cd b7       	in	r28, 0x3d	; 61
    1a3e:	de b7       	in	r29, 0x3e	; 62
    1a40:	9d 83       	std	Y+5, r25	; 0x05
    1a42:	8c 83       	std	Y+4, r24	; 0x04
	ES_t Local_enuErrorState = ES_NOK;
    1a44:	19 82       	std	Y+1, r1	; 0x01
	        u16 ADC_Read;
	        ADC_Conversion();
    1a46:	0e 94 ba 0b 	call	0x1774	; 0x1774 <ADC_Conversion>

		    ADC_enuPollingSystem();
    1a4a:	0e 94 ce 0b 	call	0x179c	; 0x179c <ADC_enuPollingSystem>
			ADC_enuRead(&ADC_Read);
    1a4e:	ce 01       	movw	r24, r28
    1a50:	02 96       	adiw	r24, 0x02	; 2
    1a52:	0e 94 1d 0c 	call	0x183a	; 0x183a <ADC_enuRead>
			*Temp =(ADC_Read * 4.88) / 10.0;
    1a56:	8a 81       	ldd	r24, Y+2	; 0x02
    1a58:	9b 81       	ldd	r25, Y+3	; 0x03
    1a5a:	cc 01       	movw	r24, r24
    1a5c:	a0 e0       	ldi	r26, 0x00	; 0
    1a5e:	b0 e0       	ldi	r27, 0x00	; 0
    1a60:	bc 01       	movw	r22, r24
    1a62:	cd 01       	movw	r24, r26
    1a64:	0e 94 a1 04 	call	0x942	; 0x942 <__floatunsisf>
    1a68:	dc 01       	movw	r26, r24
    1a6a:	cb 01       	movw	r24, r22
    1a6c:	bc 01       	movw	r22, r24
    1a6e:	cd 01       	movw	r24, r26
    1a70:	26 ef       	ldi	r18, 0xF6	; 246
    1a72:	38 e2       	ldi	r19, 0x28	; 40
    1a74:	4c e9       	ldi	r20, 0x9C	; 156
    1a76:	50 e4       	ldi	r21, 0x40	; 64
    1a78:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1a7c:	dc 01       	movw	r26, r24
    1a7e:	cb 01       	movw	r24, r22
    1a80:	bc 01       	movw	r22, r24
    1a82:	cd 01       	movw	r24, r26
    1a84:	20 e0       	ldi	r18, 0x00	; 0
    1a86:	30 e0       	ldi	r19, 0x00	; 0
    1a88:	40 e2       	ldi	r20, 0x20	; 32
    1a8a:	51 e4       	ldi	r21, 0x41	; 65
    1a8c:	0e 94 11 03 	call	0x622	; 0x622 <__divsf3>
    1a90:	dc 01       	movw	r26, r24
    1a92:	cb 01       	movw	r24, r22
    1a94:	bc 01       	movw	r22, r24
    1a96:	cd 01       	movw	r24, r26
    1a98:	0e 94 4d 04 	call	0x89a	; 0x89a <__fixsfsi>
    1a9c:	dc 01       	movw	r26, r24
    1a9e:	cb 01       	movw	r24, r22
    1aa0:	ec 81       	ldd	r30, Y+4	; 0x04
    1aa2:	fd 81       	ldd	r31, Y+5	; 0x05
    1aa4:	80 83       	st	Z, r24
    1aa6:	91 83       	std	Z+1, r25	; 0x01
    1aa8:	a2 83       	std	Z+2, r26	; 0x02
    1aaa:	b3 83       	std	Z+3, r27	; 0x03

			return Local_enuErrorState;
    1aac:	89 81       	ldd	r24, Y+1	; 0x01

}
    1aae:	0f 90       	pop	r0
    1ab0:	0f 90       	pop	r0
    1ab2:	0f 90       	pop	r0
    1ab4:	0f 90       	pop	r0
    1ab6:	0f 90       	pop	r0
    1ab8:	cf 91       	pop	r28
    1aba:	df 91       	pop	r29
    1abc:	08 95       	ret

00001abe <LCD_enuInit>:
#include "LCD_priv.h"

#include "util/delay.h"

ES_t LCD_enuInit(void)
{
    1abe:	df 93       	push	r29
    1ac0:	cf 93       	push	r28
    1ac2:	cd b7       	in	r28, 0x3d	; 61
    1ac4:	de b7       	in	r29, 0x3e	; 62
    1ac6:	e9 97       	sbiw	r28, 0x39	; 57
    1ac8:	0f b6       	in	r0, 0x3f	; 63
    1aca:	f8 94       	cli
    1acc:	de bf       	out	0x3e, r29	; 62
    1ace:	0f be       	out	0x3f, r0	; 63
    1ad0:	cd bf       	out	0x3d, r28	; 61
	ES_t Local_enuErrorState = ES_NOK;
    1ad2:	19 ae       	std	Y+57, r1	; 0x39

	DIO_enuSetPinDirection(RS_PORT, RS_PIN, DIO_u8OUTPUT);
    1ad4:	80 e0       	ldi	r24, 0x00	; 0
    1ad6:	60 e0       	ldi	r22, 0x00	; 0
    1ad8:	41 e0       	ldi	r20, 0x01	; 1
    1ada:	0e 94 7f 08 	call	0x10fe	; 0x10fe <DIO_enuSetPinDirection>
	DIO_enuSetPinDirection(RW_PORT, RW_PIN, DIO_u8OUTPUT);
    1ade:	80 e0       	ldi	r24, 0x00	; 0
    1ae0:	61 e0       	ldi	r22, 0x01	; 1
    1ae2:	41 e0       	ldi	r20, 0x01	; 1
    1ae4:	0e 94 7f 08 	call	0x10fe	; 0x10fe <DIO_enuSetPinDirection>
	DIO_enuSetPinDirection(EN_PORT, EN_PIN, DIO_u8OUTPUT);
    1ae8:	80 e0       	ldi	r24, 0x00	; 0
    1aea:	62 e0       	ldi	r22, 0x02	; 2
    1aec:	41 e0       	ldi	r20, 0x01	; 1
    1aee:	0e 94 7f 08 	call	0x10fe	; 0x10fe <DIO_enuSetPinDirection>

	DIO_enuSetPinDirection(D7_PORT, D7_PIN, DIO_u8OUTPUT);
    1af2:	81 e0       	ldi	r24, 0x01	; 1
    1af4:	60 e0       	ldi	r22, 0x00	; 0
    1af6:	41 e0       	ldi	r20, 0x01	; 1
    1af8:	0e 94 7f 08 	call	0x10fe	; 0x10fe <DIO_enuSetPinDirection>
	DIO_enuSetPinDirection(D6_PORT, D6_PIN, DIO_u8OUTPUT);
    1afc:	81 e0       	ldi	r24, 0x01	; 1
    1afe:	61 e0       	ldi	r22, 0x01	; 1
    1b00:	41 e0       	ldi	r20, 0x01	; 1
    1b02:	0e 94 7f 08 	call	0x10fe	; 0x10fe <DIO_enuSetPinDirection>
	DIO_enuSetPinDirection(D5_PORT, D5_PIN, DIO_u8OUTPUT);
    1b06:	81 e0       	ldi	r24, 0x01	; 1
    1b08:	62 e0       	ldi	r22, 0x02	; 2
    1b0a:	41 e0       	ldi	r20, 0x01	; 1
    1b0c:	0e 94 7f 08 	call	0x10fe	; 0x10fe <DIO_enuSetPinDirection>
	DIO_enuSetPinDirection(D4_PORT, D4_PIN, DIO_u8OUTPUT);
    1b10:	81 e0       	ldi	r24, 0x01	; 1
    1b12:	63 e0       	ldi	r22, 0x03	; 3
    1b14:	41 e0       	ldi	r20, 0x01	; 1
    1b16:	0e 94 7f 08 	call	0x10fe	; 0x10fe <DIO_enuSetPinDirection>
    1b1a:	80 e0       	ldi	r24, 0x00	; 0
    1b1c:	90 e0       	ldi	r25, 0x00	; 0
    1b1e:	ac e0       	ldi	r26, 0x0C	; 12
    1b20:	b2 e4       	ldi	r27, 0x42	; 66
    1b22:	8d ab       	std	Y+53, r24	; 0x35
    1b24:	9e ab       	std	Y+54, r25	; 0x36
    1b26:	af ab       	std	Y+55, r26	; 0x37
    1b28:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1b2a:	6d a9       	ldd	r22, Y+53	; 0x35
    1b2c:	7e a9       	ldd	r23, Y+54	; 0x36
    1b2e:	8f a9       	ldd	r24, Y+55	; 0x37
    1b30:	98 ad       	ldd	r25, Y+56	; 0x38
    1b32:	20 e0       	ldi	r18, 0x00	; 0
    1b34:	30 e0       	ldi	r19, 0x00	; 0
    1b36:	4a e7       	ldi	r20, 0x7A	; 122
    1b38:	53 e4       	ldi	r21, 0x43	; 67
    1b3a:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1b3e:	dc 01       	movw	r26, r24
    1b40:	cb 01       	movw	r24, r22
    1b42:	89 ab       	std	Y+49, r24	; 0x31
    1b44:	9a ab       	std	Y+50, r25	; 0x32
    1b46:	ab ab       	std	Y+51, r26	; 0x33
    1b48:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    1b4a:	69 a9       	ldd	r22, Y+49	; 0x31
    1b4c:	7a a9       	ldd	r23, Y+50	; 0x32
    1b4e:	8b a9       	ldd	r24, Y+51	; 0x33
    1b50:	9c a9       	ldd	r25, Y+52	; 0x34
    1b52:	20 e0       	ldi	r18, 0x00	; 0
    1b54:	30 e0       	ldi	r19, 0x00	; 0
    1b56:	40 e8       	ldi	r20, 0x80	; 128
    1b58:	5f e3       	ldi	r21, 0x3F	; 63
    1b5a:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    1b5e:	88 23       	and	r24, r24
    1b60:	2c f4       	brge	.+10     	; 0x1b6c <LCD_enuInit+0xae>
		__ticks = 1;
    1b62:	81 e0       	ldi	r24, 0x01	; 1
    1b64:	90 e0       	ldi	r25, 0x00	; 0
    1b66:	98 ab       	std	Y+48, r25	; 0x30
    1b68:	8f a7       	std	Y+47, r24	; 0x2f
    1b6a:	3f c0       	rjmp	.+126    	; 0x1bea <LCD_enuInit+0x12c>
	else if (__tmp > 65535)
    1b6c:	69 a9       	ldd	r22, Y+49	; 0x31
    1b6e:	7a a9       	ldd	r23, Y+50	; 0x32
    1b70:	8b a9       	ldd	r24, Y+51	; 0x33
    1b72:	9c a9       	ldd	r25, Y+52	; 0x34
    1b74:	20 e0       	ldi	r18, 0x00	; 0
    1b76:	3f ef       	ldi	r19, 0xFF	; 255
    1b78:	4f e7       	ldi	r20, 0x7F	; 127
    1b7a:	57 e4       	ldi	r21, 0x47	; 71
    1b7c:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    1b80:	18 16       	cp	r1, r24
    1b82:	4c f5       	brge	.+82     	; 0x1bd6 <LCD_enuInit+0x118>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1b84:	6d a9       	ldd	r22, Y+53	; 0x35
    1b86:	7e a9       	ldd	r23, Y+54	; 0x36
    1b88:	8f a9       	ldd	r24, Y+55	; 0x37
    1b8a:	98 ad       	ldd	r25, Y+56	; 0x38
    1b8c:	20 e0       	ldi	r18, 0x00	; 0
    1b8e:	30 e0       	ldi	r19, 0x00	; 0
    1b90:	40 e2       	ldi	r20, 0x20	; 32
    1b92:	51 e4       	ldi	r21, 0x41	; 65
    1b94:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1b98:	dc 01       	movw	r26, r24
    1b9a:	cb 01       	movw	r24, r22
    1b9c:	bc 01       	movw	r22, r24
    1b9e:	cd 01       	movw	r24, r26
    1ba0:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1ba4:	dc 01       	movw	r26, r24
    1ba6:	cb 01       	movw	r24, r22
    1ba8:	98 ab       	std	Y+48, r25	; 0x30
    1baa:	8f a7       	std	Y+47, r24	; 0x2f
    1bac:	0f c0       	rjmp	.+30     	; 0x1bcc <LCD_enuInit+0x10e>
    1bae:	89 e1       	ldi	r24, 0x19	; 25
    1bb0:	90 e0       	ldi	r25, 0x00	; 0
    1bb2:	9e a7       	std	Y+46, r25	; 0x2e
    1bb4:	8d a7       	std	Y+45, r24	; 0x2d
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1bb6:	8d a5       	ldd	r24, Y+45	; 0x2d
    1bb8:	9e a5       	ldd	r25, Y+46	; 0x2e
    1bba:	01 97       	sbiw	r24, 0x01	; 1
    1bbc:	f1 f7       	brne	.-4      	; 0x1bba <LCD_enuInit+0xfc>
    1bbe:	9e a7       	std	Y+46, r25	; 0x2e
    1bc0:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1bc2:	8f a5       	ldd	r24, Y+47	; 0x2f
    1bc4:	98 a9       	ldd	r25, Y+48	; 0x30
    1bc6:	01 97       	sbiw	r24, 0x01	; 1
    1bc8:	98 ab       	std	Y+48, r25	; 0x30
    1bca:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1bcc:	8f a5       	ldd	r24, Y+47	; 0x2f
    1bce:	98 a9       	ldd	r25, Y+48	; 0x30
    1bd0:	00 97       	sbiw	r24, 0x00	; 0
    1bd2:	69 f7       	brne	.-38     	; 0x1bae <LCD_enuInit+0xf0>
    1bd4:	14 c0       	rjmp	.+40     	; 0x1bfe <LCD_enuInit+0x140>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1bd6:	69 a9       	ldd	r22, Y+49	; 0x31
    1bd8:	7a a9       	ldd	r23, Y+50	; 0x32
    1bda:	8b a9       	ldd	r24, Y+51	; 0x33
    1bdc:	9c a9       	ldd	r25, Y+52	; 0x34
    1bde:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1be2:	dc 01       	movw	r26, r24
    1be4:	cb 01       	movw	r24, r22
    1be6:	98 ab       	std	Y+48, r25	; 0x30
    1be8:	8f a7       	std	Y+47, r24	; 0x2f
    1bea:	8f a5       	ldd	r24, Y+47	; 0x2f
    1bec:	98 a9       	ldd	r25, Y+48	; 0x30
    1bee:	9c a7       	std	Y+44, r25	; 0x2c
    1bf0:	8b a7       	std	Y+43, r24	; 0x2b
    1bf2:	8b a5       	ldd	r24, Y+43	; 0x2b
    1bf4:	9c a5       	ldd	r25, Y+44	; 0x2c
    1bf6:	01 97       	sbiw	r24, 0x01	; 1
    1bf8:	f1 f7       	brne	.-4      	; 0x1bf6 <LCD_enuInit+0x138>
    1bfa:	9c a7       	std	Y+44, r25	; 0x2c
    1bfc:	8b a7       	std	Y+43, r24	; 0x2b

	_delay_ms(35);

#if LCD_MODE == EIGHT_BIT

	DIO_enuSetPinDirection(D3_PORT, D3_PIN, DIO_u8OUTPUT);
    1bfe:	81 e0       	ldi	r24, 0x01	; 1
    1c00:	64 e0       	ldi	r22, 0x04	; 4
    1c02:	41 e0       	ldi	r20, 0x01	; 1
    1c04:	0e 94 7f 08 	call	0x10fe	; 0x10fe <DIO_enuSetPinDirection>
	DIO_enuSetPinDirection(D2_PORT, D2_PIN, DIO_u8OUTPUT);
    1c08:	81 e0       	ldi	r24, 0x01	; 1
    1c0a:	65 e0       	ldi	r22, 0x05	; 5
    1c0c:	41 e0       	ldi	r20, 0x01	; 1
    1c0e:	0e 94 7f 08 	call	0x10fe	; 0x10fe <DIO_enuSetPinDirection>
	DIO_enuSetPinDirection(D1_PORT, D1_PIN, DIO_u8OUTPUT);
    1c12:	81 e0       	ldi	r24, 0x01	; 1
    1c14:	66 e0       	ldi	r22, 0x06	; 6
    1c16:	41 e0       	ldi	r20, 0x01	; 1
    1c18:	0e 94 7f 08 	call	0x10fe	; 0x10fe <DIO_enuSetPinDirection>
	DIO_enuSetPinDirection(D0_PORT, D0_PIN, DIO_u8OUTPUT);
    1c1c:	81 e0       	ldi	r24, 0x01	; 1
    1c1e:	67 e0       	ldi	r22, 0x07	; 7
    1c20:	41 e0       	ldi	r20, 0x01	; 1
    1c22:	0e 94 7f 08 	call	0x10fe	; 0x10fe <DIO_enuSetPinDirection>

	//function set
	LCD_invidSendCommend(0x38);
    1c26:	88 e3       	ldi	r24, 0x38	; 56
    1c28:	0e 94 ce 11 	call	0x239c	; 0x239c <LCD_invidSendCommend>
    1c2c:	80 e0       	ldi	r24, 0x00	; 0
    1c2e:	90 e0       	ldi	r25, 0x00	; 0
    1c30:	a0 e8       	ldi	r26, 0x80	; 128
    1c32:	bf e3       	ldi	r27, 0x3F	; 63
    1c34:	8f a3       	std	Y+39, r24	; 0x27
    1c36:	98 a7       	std	Y+40, r25	; 0x28
    1c38:	a9 a7       	std	Y+41, r26	; 0x29
    1c3a:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1c3c:	6f a1       	ldd	r22, Y+39	; 0x27
    1c3e:	78 a5       	ldd	r23, Y+40	; 0x28
    1c40:	89 a5       	ldd	r24, Y+41	; 0x29
    1c42:	9a a5       	ldd	r25, Y+42	; 0x2a
    1c44:	20 e0       	ldi	r18, 0x00	; 0
    1c46:	30 e0       	ldi	r19, 0x00	; 0
    1c48:	4a e7       	ldi	r20, 0x7A	; 122
    1c4a:	53 e4       	ldi	r21, 0x43	; 67
    1c4c:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1c50:	dc 01       	movw	r26, r24
    1c52:	cb 01       	movw	r24, r22
    1c54:	8b a3       	std	Y+35, r24	; 0x23
    1c56:	9c a3       	std	Y+36, r25	; 0x24
    1c58:	ad a3       	std	Y+37, r26	; 0x25
    1c5a:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1c5c:	6b a1       	ldd	r22, Y+35	; 0x23
    1c5e:	7c a1       	ldd	r23, Y+36	; 0x24
    1c60:	8d a1       	ldd	r24, Y+37	; 0x25
    1c62:	9e a1       	ldd	r25, Y+38	; 0x26
    1c64:	20 e0       	ldi	r18, 0x00	; 0
    1c66:	30 e0       	ldi	r19, 0x00	; 0
    1c68:	40 e8       	ldi	r20, 0x80	; 128
    1c6a:	5f e3       	ldi	r21, 0x3F	; 63
    1c6c:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    1c70:	88 23       	and	r24, r24
    1c72:	2c f4       	brge	.+10     	; 0x1c7e <LCD_enuInit+0x1c0>
		__ticks = 1;
    1c74:	81 e0       	ldi	r24, 0x01	; 1
    1c76:	90 e0       	ldi	r25, 0x00	; 0
    1c78:	9a a3       	std	Y+34, r25	; 0x22
    1c7a:	89 a3       	std	Y+33, r24	; 0x21
    1c7c:	3f c0       	rjmp	.+126    	; 0x1cfc <LCD_enuInit+0x23e>
	else if (__tmp > 65535)
    1c7e:	6b a1       	ldd	r22, Y+35	; 0x23
    1c80:	7c a1       	ldd	r23, Y+36	; 0x24
    1c82:	8d a1       	ldd	r24, Y+37	; 0x25
    1c84:	9e a1       	ldd	r25, Y+38	; 0x26
    1c86:	20 e0       	ldi	r18, 0x00	; 0
    1c88:	3f ef       	ldi	r19, 0xFF	; 255
    1c8a:	4f e7       	ldi	r20, 0x7F	; 127
    1c8c:	57 e4       	ldi	r21, 0x47	; 71
    1c8e:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    1c92:	18 16       	cp	r1, r24
    1c94:	4c f5       	brge	.+82     	; 0x1ce8 <LCD_enuInit+0x22a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1c96:	6f a1       	ldd	r22, Y+39	; 0x27
    1c98:	78 a5       	ldd	r23, Y+40	; 0x28
    1c9a:	89 a5       	ldd	r24, Y+41	; 0x29
    1c9c:	9a a5       	ldd	r25, Y+42	; 0x2a
    1c9e:	20 e0       	ldi	r18, 0x00	; 0
    1ca0:	30 e0       	ldi	r19, 0x00	; 0
    1ca2:	40 e2       	ldi	r20, 0x20	; 32
    1ca4:	51 e4       	ldi	r21, 0x41	; 65
    1ca6:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1caa:	dc 01       	movw	r26, r24
    1cac:	cb 01       	movw	r24, r22
    1cae:	bc 01       	movw	r22, r24
    1cb0:	cd 01       	movw	r24, r26
    1cb2:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1cb6:	dc 01       	movw	r26, r24
    1cb8:	cb 01       	movw	r24, r22
    1cba:	9a a3       	std	Y+34, r25	; 0x22
    1cbc:	89 a3       	std	Y+33, r24	; 0x21
    1cbe:	0f c0       	rjmp	.+30     	; 0x1cde <LCD_enuInit+0x220>
    1cc0:	89 e1       	ldi	r24, 0x19	; 25
    1cc2:	90 e0       	ldi	r25, 0x00	; 0
    1cc4:	98 a3       	std	Y+32, r25	; 0x20
    1cc6:	8f 8f       	std	Y+31, r24	; 0x1f
    1cc8:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1cca:	98 a1       	ldd	r25, Y+32	; 0x20
    1ccc:	01 97       	sbiw	r24, 0x01	; 1
    1cce:	f1 f7       	brne	.-4      	; 0x1ccc <LCD_enuInit+0x20e>
    1cd0:	98 a3       	std	Y+32, r25	; 0x20
    1cd2:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1cd4:	89 a1       	ldd	r24, Y+33	; 0x21
    1cd6:	9a a1       	ldd	r25, Y+34	; 0x22
    1cd8:	01 97       	sbiw	r24, 0x01	; 1
    1cda:	9a a3       	std	Y+34, r25	; 0x22
    1cdc:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1cde:	89 a1       	ldd	r24, Y+33	; 0x21
    1ce0:	9a a1       	ldd	r25, Y+34	; 0x22
    1ce2:	00 97       	sbiw	r24, 0x00	; 0
    1ce4:	69 f7       	brne	.-38     	; 0x1cc0 <LCD_enuInit+0x202>
    1ce6:	14 c0       	rjmp	.+40     	; 0x1d10 <LCD_enuInit+0x252>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1ce8:	6b a1       	ldd	r22, Y+35	; 0x23
    1cea:	7c a1       	ldd	r23, Y+36	; 0x24
    1cec:	8d a1       	ldd	r24, Y+37	; 0x25
    1cee:	9e a1       	ldd	r25, Y+38	; 0x26
    1cf0:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1cf4:	dc 01       	movw	r26, r24
    1cf6:	cb 01       	movw	r24, r22
    1cf8:	9a a3       	std	Y+34, r25	; 0x22
    1cfa:	89 a3       	std	Y+33, r24	; 0x21
    1cfc:	89 a1       	ldd	r24, Y+33	; 0x21
    1cfe:	9a a1       	ldd	r25, Y+34	; 0x22
    1d00:	9e 8f       	std	Y+30, r25	; 0x1e
    1d02:	8d 8f       	std	Y+29, r24	; 0x1d
    1d04:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1d06:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1d08:	01 97       	sbiw	r24, 0x01	; 1
    1d0a:	f1 f7       	brne	.-4      	; 0x1d08 <LCD_enuInit+0x24a>
    1d0c:	9e 8f       	std	Y+30, r25	; 0x1e
    1d0e:	8d 8f       	std	Y+29, r24	; 0x1d
#elif LCD_MODE == FOUR_BIT
	LCD_invidSendCommend(0x28);
#endif
	_delay_ms(1);
	LCD_invidSendCommend(0x0f);
    1d10:	8f e0       	ldi	r24, 0x0F	; 15
    1d12:	0e 94 ce 11 	call	0x239c	; 0x239c <LCD_invidSendCommend>
    1d16:	80 e0       	ldi	r24, 0x00	; 0
    1d18:	90 e0       	ldi	r25, 0x00	; 0
    1d1a:	a0 e8       	ldi	r26, 0x80	; 128
    1d1c:	bf e3       	ldi	r27, 0x3F	; 63
    1d1e:	89 8f       	std	Y+25, r24	; 0x19
    1d20:	9a 8f       	std	Y+26, r25	; 0x1a
    1d22:	ab 8f       	std	Y+27, r26	; 0x1b
    1d24:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1d26:	69 8d       	ldd	r22, Y+25	; 0x19
    1d28:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1d2a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1d2c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1d2e:	20 e0       	ldi	r18, 0x00	; 0
    1d30:	30 e0       	ldi	r19, 0x00	; 0
    1d32:	4a e7       	ldi	r20, 0x7A	; 122
    1d34:	53 e4       	ldi	r21, 0x43	; 67
    1d36:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1d3a:	dc 01       	movw	r26, r24
    1d3c:	cb 01       	movw	r24, r22
    1d3e:	8d 8b       	std	Y+21, r24	; 0x15
    1d40:	9e 8b       	std	Y+22, r25	; 0x16
    1d42:	af 8b       	std	Y+23, r26	; 0x17
    1d44:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1d46:	6d 89       	ldd	r22, Y+21	; 0x15
    1d48:	7e 89       	ldd	r23, Y+22	; 0x16
    1d4a:	8f 89       	ldd	r24, Y+23	; 0x17
    1d4c:	98 8d       	ldd	r25, Y+24	; 0x18
    1d4e:	20 e0       	ldi	r18, 0x00	; 0
    1d50:	30 e0       	ldi	r19, 0x00	; 0
    1d52:	40 e8       	ldi	r20, 0x80	; 128
    1d54:	5f e3       	ldi	r21, 0x3F	; 63
    1d56:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    1d5a:	88 23       	and	r24, r24
    1d5c:	2c f4       	brge	.+10     	; 0x1d68 <LCD_enuInit+0x2aa>
		__ticks = 1;
    1d5e:	81 e0       	ldi	r24, 0x01	; 1
    1d60:	90 e0       	ldi	r25, 0x00	; 0
    1d62:	9c 8b       	std	Y+20, r25	; 0x14
    1d64:	8b 8b       	std	Y+19, r24	; 0x13
    1d66:	3f c0       	rjmp	.+126    	; 0x1de6 <LCD_enuInit+0x328>
	else if (__tmp > 65535)
    1d68:	6d 89       	ldd	r22, Y+21	; 0x15
    1d6a:	7e 89       	ldd	r23, Y+22	; 0x16
    1d6c:	8f 89       	ldd	r24, Y+23	; 0x17
    1d6e:	98 8d       	ldd	r25, Y+24	; 0x18
    1d70:	20 e0       	ldi	r18, 0x00	; 0
    1d72:	3f ef       	ldi	r19, 0xFF	; 255
    1d74:	4f e7       	ldi	r20, 0x7F	; 127
    1d76:	57 e4       	ldi	r21, 0x47	; 71
    1d78:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    1d7c:	18 16       	cp	r1, r24
    1d7e:	4c f5       	brge	.+82     	; 0x1dd2 <LCD_enuInit+0x314>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1d80:	69 8d       	ldd	r22, Y+25	; 0x19
    1d82:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1d84:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1d86:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1d88:	20 e0       	ldi	r18, 0x00	; 0
    1d8a:	30 e0       	ldi	r19, 0x00	; 0
    1d8c:	40 e2       	ldi	r20, 0x20	; 32
    1d8e:	51 e4       	ldi	r21, 0x41	; 65
    1d90:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1d94:	dc 01       	movw	r26, r24
    1d96:	cb 01       	movw	r24, r22
    1d98:	bc 01       	movw	r22, r24
    1d9a:	cd 01       	movw	r24, r26
    1d9c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1da0:	dc 01       	movw	r26, r24
    1da2:	cb 01       	movw	r24, r22
    1da4:	9c 8b       	std	Y+20, r25	; 0x14
    1da6:	8b 8b       	std	Y+19, r24	; 0x13
    1da8:	0f c0       	rjmp	.+30     	; 0x1dc8 <LCD_enuInit+0x30a>
    1daa:	89 e1       	ldi	r24, 0x19	; 25
    1dac:	90 e0       	ldi	r25, 0x00	; 0
    1dae:	9a 8b       	std	Y+18, r25	; 0x12
    1db0:	89 8b       	std	Y+17, r24	; 0x11
    1db2:	89 89       	ldd	r24, Y+17	; 0x11
    1db4:	9a 89       	ldd	r25, Y+18	; 0x12
    1db6:	01 97       	sbiw	r24, 0x01	; 1
    1db8:	f1 f7       	brne	.-4      	; 0x1db6 <LCD_enuInit+0x2f8>
    1dba:	9a 8b       	std	Y+18, r25	; 0x12
    1dbc:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1dbe:	8b 89       	ldd	r24, Y+19	; 0x13
    1dc0:	9c 89       	ldd	r25, Y+20	; 0x14
    1dc2:	01 97       	sbiw	r24, 0x01	; 1
    1dc4:	9c 8b       	std	Y+20, r25	; 0x14
    1dc6:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1dc8:	8b 89       	ldd	r24, Y+19	; 0x13
    1dca:	9c 89       	ldd	r25, Y+20	; 0x14
    1dcc:	00 97       	sbiw	r24, 0x00	; 0
    1dce:	69 f7       	brne	.-38     	; 0x1daa <LCD_enuInit+0x2ec>
    1dd0:	14 c0       	rjmp	.+40     	; 0x1dfa <LCD_enuInit+0x33c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1dd2:	6d 89       	ldd	r22, Y+21	; 0x15
    1dd4:	7e 89       	ldd	r23, Y+22	; 0x16
    1dd6:	8f 89       	ldd	r24, Y+23	; 0x17
    1dd8:	98 8d       	ldd	r25, Y+24	; 0x18
    1dda:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1dde:	dc 01       	movw	r26, r24
    1de0:	cb 01       	movw	r24, r22
    1de2:	9c 8b       	std	Y+20, r25	; 0x14
    1de4:	8b 8b       	std	Y+19, r24	; 0x13
    1de6:	8b 89       	ldd	r24, Y+19	; 0x13
    1de8:	9c 89       	ldd	r25, Y+20	; 0x14
    1dea:	98 8b       	std	Y+16, r25	; 0x10
    1dec:	8f 87       	std	Y+15, r24	; 0x0f
    1dee:	8f 85       	ldd	r24, Y+15	; 0x0f
    1df0:	98 89       	ldd	r25, Y+16	; 0x10
    1df2:	01 97       	sbiw	r24, 0x01	; 1
    1df4:	f1 f7       	brne	.-4      	; 0x1df2 <LCD_enuInit+0x334>
    1df6:	98 8b       	std	Y+16, r25	; 0x10
    1df8:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1);
	LCD_invidSendCommend(0x01);
    1dfa:	81 e0       	ldi	r24, 0x01	; 1
    1dfc:	0e 94 ce 11 	call	0x239c	; 0x239c <LCD_invidSendCommend>
    1e00:	80 e0       	ldi	r24, 0x00	; 0
    1e02:	90 e0       	ldi	r25, 0x00	; 0
    1e04:	a0 e0       	ldi	r26, 0x00	; 0
    1e06:	b0 e4       	ldi	r27, 0x40	; 64
    1e08:	8b 87       	std	Y+11, r24	; 0x0b
    1e0a:	9c 87       	std	Y+12, r25	; 0x0c
    1e0c:	ad 87       	std	Y+13, r26	; 0x0d
    1e0e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1e10:	6b 85       	ldd	r22, Y+11	; 0x0b
    1e12:	7c 85       	ldd	r23, Y+12	; 0x0c
    1e14:	8d 85       	ldd	r24, Y+13	; 0x0d
    1e16:	9e 85       	ldd	r25, Y+14	; 0x0e
    1e18:	20 e0       	ldi	r18, 0x00	; 0
    1e1a:	30 e0       	ldi	r19, 0x00	; 0
    1e1c:	4a e7       	ldi	r20, 0x7A	; 122
    1e1e:	53 e4       	ldi	r21, 0x43	; 67
    1e20:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1e24:	dc 01       	movw	r26, r24
    1e26:	cb 01       	movw	r24, r22
    1e28:	8f 83       	std	Y+7, r24	; 0x07
    1e2a:	98 87       	std	Y+8, r25	; 0x08
    1e2c:	a9 87       	std	Y+9, r26	; 0x09
    1e2e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1e30:	6f 81       	ldd	r22, Y+7	; 0x07
    1e32:	78 85       	ldd	r23, Y+8	; 0x08
    1e34:	89 85       	ldd	r24, Y+9	; 0x09
    1e36:	9a 85       	ldd	r25, Y+10	; 0x0a
    1e38:	20 e0       	ldi	r18, 0x00	; 0
    1e3a:	30 e0       	ldi	r19, 0x00	; 0
    1e3c:	40 e8       	ldi	r20, 0x80	; 128
    1e3e:	5f e3       	ldi	r21, 0x3F	; 63
    1e40:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    1e44:	88 23       	and	r24, r24
    1e46:	2c f4       	brge	.+10     	; 0x1e52 <LCD_enuInit+0x394>
		__ticks = 1;
    1e48:	81 e0       	ldi	r24, 0x01	; 1
    1e4a:	90 e0       	ldi	r25, 0x00	; 0
    1e4c:	9e 83       	std	Y+6, r25	; 0x06
    1e4e:	8d 83       	std	Y+5, r24	; 0x05
    1e50:	3f c0       	rjmp	.+126    	; 0x1ed0 <LCD_enuInit+0x412>
	else if (__tmp > 65535)
    1e52:	6f 81       	ldd	r22, Y+7	; 0x07
    1e54:	78 85       	ldd	r23, Y+8	; 0x08
    1e56:	89 85       	ldd	r24, Y+9	; 0x09
    1e58:	9a 85       	ldd	r25, Y+10	; 0x0a
    1e5a:	20 e0       	ldi	r18, 0x00	; 0
    1e5c:	3f ef       	ldi	r19, 0xFF	; 255
    1e5e:	4f e7       	ldi	r20, 0x7F	; 127
    1e60:	57 e4       	ldi	r21, 0x47	; 71
    1e62:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    1e66:	18 16       	cp	r1, r24
    1e68:	4c f5       	brge	.+82     	; 0x1ebc <LCD_enuInit+0x3fe>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1e6a:	6b 85       	ldd	r22, Y+11	; 0x0b
    1e6c:	7c 85       	ldd	r23, Y+12	; 0x0c
    1e6e:	8d 85       	ldd	r24, Y+13	; 0x0d
    1e70:	9e 85       	ldd	r25, Y+14	; 0x0e
    1e72:	20 e0       	ldi	r18, 0x00	; 0
    1e74:	30 e0       	ldi	r19, 0x00	; 0
    1e76:	40 e2       	ldi	r20, 0x20	; 32
    1e78:	51 e4       	ldi	r21, 0x41	; 65
    1e7a:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1e7e:	dc 01       	movw	r26, r24
    1e80:	cb 01       	movw	r24, r22
    1e82:	bc 01       	movw	r22, r24
    1e84:	cd 01       	movw	r24, r26
    1e86:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1e8a:	dc 01       	movw	r26, r24
    1e8c:	cb 01       	movw	r24, r22
    1e8e:	9e 83       	std	Y+6, r25	; 0x06
    1e90:	8d 83       	std	Y+5, r24	; 0x05
    1e92:	0f c0       	rjmp	.+30     	; 0x1eb2 <LCD_enuInit+0x3f4>
    1e94:	89 e1       	ldi	r24, 0x19	; 25
    1e96:	90 e0       	ldi	r25, 0x00	; 0
    1e98:	9c 83       	std	Y+4, r25	; 0x04
    1e9a:	8b 83       	std	Y+3, r24	; 0x03
    1e9c:	8b 81       	ldd	r24, Y+3	; 0x03
    1e9e:	9c 81       	ldd	r25, Y+4	; 0x04
    1ea0:	01 97       	sbiw	r24, 0x01	; 1
    1ea2:	f1 f7       	brne	.-4      	; 0x1ea0 <LCD_enuInit+0x3e2>
    1ea4:	9c 83       	std	Y+4, r25	; 0x04
    1ea6:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1ea8:	8d 81       	ldd	r24, Y+5	; 0x05
    1eaa:	9e 81       	ldd	r25, Y+6	; 0x06
    1eac:	01 97       	sbiw	r24, 0x01	; 1
    1eae:	9e 83       	std	Y+6, r25	; 0x06
    1eb0:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1eb2:	8d 81       	ldd	r24, Y+5	; 0x05
    1eb4:	9e 81       	ldd	r25, Y+6	; 0x06
    1eb6:	00 97       	sbiw	r24, 0x00	; 0
    1eb8:	69 f7       	brne	.-38     	; 0x1e94 <LCD_enuInit+0x3d6>
    1eba:	14 c0       	rjmp	.+40     	; 0x1ee4 <LCD_enuInit+0x426>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1ebc:	6f 81       	ldd	r22, Y+7	; 0x07
    1ebe:	78 85       	ldd	r23, Y+8	; 0x08
    1ec0:	89 85       	ldd	r24, Y+9	; 0x09
    1ec2:	9a 85       	ldd	r25, Y+10	; 0x0a
    1ec4:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1ec8:	dc 01       	movw	r26, r24
    1eca:	cb 01       	movw	r24, r22
    1ecc:	9e 83       	std	Y+6, r25	; 0x06
    1ece:	8d 83       	std	Y+5, r24	; 0x05
    1ed0:	8d 81       	ldd	r24, Y+5	; 0x05
    1ed2:	9e 81       	ldd	r25, Y+6	; 0x06
    1ed4:	9a 83       	std	Y+2, r25	; 0x02
    1ed6:	89 83       	std	Y+1, r24	; 0x01
    1ed8:	89 81       	ldd	r24, Y+1	; 0x01
    1eda:	9a 81       	ldd	r25, Y+2	; 0x02
    1edc:	01 97       	sbiw	r24, 0x01	; 1
    1ede:	f1 f7       	brne	.-4      	; 0x1edc <LCD_enuInit+0x41e>
    1ee0:	9a 83       	std	Y+2, r25	; 0x02
    1ee2:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
	LCD_invidSendCommend(0x06);
    1ee4:	86 e0       	ldi	r24, 0x06	; 6
    1ee6:	0e 94 ce 11 	call	0x239c	; 0x239c <LCD_invidSendCommend>

	return Local_enuErrorState;
    1eea:	89 ad       	ldd	r24, Y+57	; 0x39
}
    1eec:	e9 96       	adiw	r28, 0x39	; 57
    1eee:	0f b6       	in	r0, 0x3f	; 63
    1ef0:	f8 94       	cli
    1ef2:	de bf       	out	0x3e, r29	; 62
    1ef4:	0f be       	out	0x3f, r0	; 63
    1ef6:	cd bf       	out	0x3d, r28	; 61
    1ef8:	cf 91       	pop	r28
    1efa:	df 91       	pop	r29
    1efc:	08 95       	ret

00001efe <LCD_enuDisplayChar>:

ES_t LCD_enuDisplayChar(u8 Copy_u8Data)
{
    1efe:	df 93       	push	r29
    1f00:	cf 93       	push	r28
    1f02:	00 d0       	rcall	.+0      	; 0x1f04 <LCD_enuDisplayChar+0x6>
    1f04:	cd b7       	in	r28, 0x3d	; 61
    1f06:	de b7       	in	r29, 0x3e	; 62
    1f08:	8a 83       	std	Y+2, r24	; 0x02
	ES_t Local_enuErrorState = ES_NOK;
    1f0a:	19 82       	std	Y+1, r1	; 0x01

	DIO_enuSetPinValue(RS_PORT , RS_PIN , DIO_u8HIGH);
    1f0c:	80 e0       	ldi	r24, 0x00	; 0
    1f0e:	60 e0       	ldi	r22, 0x00	; 0
    1f10:	41 e0       	ldi	r20, 0x01	; 1
    1f12:	0e 94 6b 09 	call	0x12d6	; 0x12d6 <DIO_enuSetPinValue>

	LCD_vidLatch(Copy_u8Data);
    1f16:	8a 81       	ldd	r24, Y+2	; 0x02
    1f18:	0e 94 71 10 	call	0x20e2	; 0x20e2 <LCD_vidLatch>

	return Local_enuErrorState;
    1f1c:	89 81       	ldd	r24, Y+1	; 0x01
}
    1f1e:	0f 90       	pop	r0
    1f20:	0f 90       	pop	r0
    1f22:	cf 91       	pop	r28
    1f24:	df 91       	pop	r29
    1f26:	08 95       	ret

00001f28 <LCD_enuSendCommand>:

ES_t LCD_enuSendCommand(u8 Copy_u8Command)
{
    1f28:	df 93       	push	r29
    1f2a:	cf 93       	push	r28
    1f2c:	00 d0       	rcall	.+0      	; 0x1f2e <LCD_enuSendCommand+0x6>
    1f2e:	cd b7       	in	r28, 0x3d	; 61
    1f30:	de b7       	in	r29, 0x3e	; 62
    1f32:	8a 83       	std	Y+2, r24	; 0x02
	ES_t Local_enuErrorState = ES_NOK;
    1f34:	19 82       	std	Y+1, r1	; 0x01

	// set rs as command
	DIO_enuSetPinValue(RS_PORT , RS_PIN , DIO_u8LOW);
    1f36:	80 e0       	ldi	r24, 0x00	; 0
    1f38:	60 e0       	ldi	r22, 0x00	; 0
    1f3a:	40 e0       	ldi	r20, 0x00	; 0
    1f3c:	0e 94 6b 09 	call	0x12d6	; 0x12d6 <DIO_enuSetPinValue>

	LCD_vidLatch(Copy_u8Command);
    1f40:	8a 81       	ldd	r24, Y+2	; 0x02
    1f42:	0e 94 71 10 	call	0x20e2	; 0x20e2 <LCD_vidLatch>


	return Local_enuErrorState;
    1f46:	89 81       	ldd	r24, Y+1	; 0x01
}
    1f48:	0f 90       	pop	r0
    1f4a:	0f 90       	pop	r0
    1f4c:	cf 91       	pop	r28
    1f4e:	df 91       	pop	r29
    1f50:	08 95       	ret

00001f52 <LCD_enuDisplayIntegerNum>:


ES_t LCD_enuDisplayIntegerNum(s32 Copy_s32Num)
{
    1f52:	df 93       	push	r29
    1f54:	cf 93       	push	r28
    1f56:	cd b7       	in	r28, 0x3d	; 61
    1f58:	de b7       	in	r29, 0x3e	; 62
    1f5a:	2b 97       	sbiw	r28, 0x0b	; 11
    1f5c:	0f b6       	in	r0, 0x3f	; 63
    1f5e:	f8 94       	cli
    1f60:	de bf       	out	0x3e, r29	; 62
    1f62:	0f be       	out	0x3f, r0	; 63
    1f64:	cd bf       	out	0x3d, r28	; 61
    1f66:	68 87       	std	Y+8, r22	; 0x08
    1f68:	79 87       	std	Y+9, r23	; 0x09
    1f6a:	8a 87       	std	Y+10, r24	; 0x0a
    1f6c:	9b 87       	std	Y+11, r25	; 0x0b
	ES_t Local_enuErrorState = ES_NOK;
    1f6e:	1f 82       	std	Y+7, r1	; 0x07

	s32 Local_s32Reverse=0;
    1f70:	1b 82       	std	Y+3, r1	; 0x03
    1f72:	1c 82       	std	Y+4, r1	; 0x04
    1f74:	1d 82       	std	Y+5, r1	; 0x05
    1f76:	1e 82       	std	Y+6, r1	; 0x06
	u8 Local_u8Remainder=0 , Local_u8NumDigit=0;
    1f78:	1a 82       	std	Y+2, r1	; 0x02
    1f7a:	19 82       	std	Y+1, r1	; 0x01

	if(Copy_s32Num==0)
    1f7c:	88 85       	ldd	r24, Y+8	; 0x08
    1f7e:	99 85       	ldd	r25, Y+9	; 0x09
    1f80:	aa 85       	ldd	r26, Y+10	; 0x0a
    1f82:	bb 85       	ldd	r27, Y+11	; 0x0b
    1f84:	00 97       	sbiw	r24, 0x00	; 0
    1f86:	a1 05       	cpc	r26, r1
    1f88:	b1 05       	cpc	r27, r1
    1f8a:	49 f4       	brne	.+18     	; 0x1f9e <LCD_enuDisplayIntegerNum+0x4c>
	{
		DIO_enuSetPinValue(RS_PORT , RS_PIN , DIO_u8HIGH);
    1f8c:	80 e0       	ldi	r24, 0x00	; 0
    1f8e:	60 e0       	ldi	r22, 0x00	; 0
    1f90:	41 e0       	ldi	r20, 0x01	; 1
    1f92:	0e 94 6b 09 	call	0x12d6	; 0x12d6 <DIO_enuSetPinValue>
				LCD_vidLatch('0');
    1f96:	80 e3       	ldi	r24, 0x30	; 48
    1f98:	0e 94 71 10 	call	0x20e2	; 0x20e2 <LCD_vidLatch>
    1f9c:	98 c0       	rjmp	.+304    	; 0x20ce <LCD_enuDisplayIntegerNum+0x17c>
	}
	else
	{


	if(Copy_s32Num <0)
    1f9e:	88 85       	ldd	r24, Y+8	; 0x08
    1fa0:	99 85       	ldd	r25, Y+9	; 0x09
    1fa2:	aa 85       	ldd	r26, Y+10	; 0x0a
    1fa4:	bb 85       	ldd	r27, Y+11	; 0x0b
    1fa6:	bb 23       	and	r27, r27
    1fa8:	0c f0       	brlt	.+2      	; 0x1fac <LCD_enuDisplayIntegerNum+0x5a>
    1faa:	57 c0       	rjmp	.+174    	; 0x205a <LCD_enuDisplayIntegerNum+0x108>
	{
		DIO_enuSetPinValue(RS_PORT , RS_PIN , DIO_u8HIGH);
    1fac:	80 e0       	ldi	r24, 0x00	; 0
    1fae:	60 e0       	ldi	r22, 0x00	; 0
    1fb0:	41 e0       	ldi	r20, 0x01	; 1
    1fb2:	0e 94 6b 09 	call	0x12d6	; 0x12d6 <DIO_enuSetPinValue>
		LCD_vidLatch('-');
    1fb6:	8d e2       	ldi	r24, 0x2D	; 45
    1fb8:	0e 94 71 10 	call	0x20e2	; 0x20e2 <LCD_vidLatch>
		Copy_s32Num *= -1 ;
    1fbc:	88 85       	ldd	r24, Y+8	; 0x08
    1fbe:	99 85       	ldd	r25, Y+9	; 0x09
    1fc0:	aa 85       	ldd	r26, Y+10	; 0x0a
    1fc2:	bb 85       	ldd	r27, Y+11	; 0x0b
    1fc4:	b0 95       	com	r27
    1fc6:	a0 95       	com	r26
    1fc8:	90 95       	com	r25
    1fca:	81 95       	neg	r24
    1fcc:	9f 4f       	sbci	r25, 0xFF	; 255
    1fce:	af 4f       	sbci	r26, 0xFF	; 255
    1fd0:	bf 4f       	sbci	r27, 0xFF	; 255
    1fd2:	88 87       	std	Y+8, r24	; 0x08
    1fd4:	99 87       	std	Y+9, r25	; 0x09
    1fd6:	aa 87       	std	Y+10, r26	; 0x0a
    1fd8:	bb 87       	std	Y+11, r27	; 0x0b
    1fda:	3f c0       	rjmp	.+126    	; 0x205a <LCD_enuDisplayIntegerNum+0x108>
	}
	while (Copy_s32Num)
	{
		Local_u8Remainder = Copy_s32Num % 10;
    1fdc:	88 85       	ldd	r24, Y+8	; 0x08
    1fde:	99 85       	ldd	r25, Y+9	; 0x09
    1fe0:	aa 85       	ldd	r26, Y+10	; 0x0a
    1fe2:	bb 85       	ldd	r27, Y+11	; 0x0b
    1fe4:	2a e0       	ldi	r18, 0x0A	; 10
    1fe6:	30 e0       	ldi	r19, 0x00	; 0
    1fe8:	40 e0       	ldi	r20, 0x00	; 0
    1fea:	50 e0       	ldi	r21, 0x00	; 0
    1fec:	bc 01       	movw	r22, r24
    1fee:	cd 01       	movw	r24, r26
    1ff0:	0e 94 a4 13 	call	0x2748	; 0x2748 <__divmodsi4>
    1ff4:	dc 01       	movw	r26, r24
    1ff6:	cb 01       	movw	r24, r22
    1ff8:	8a 83       	std	Y+2, r24	; 0x02
		Local_s32Reverse = Local_s32Reverse * 10 + Local_u8Remainder;
    1ffa:	8b 81       	ldd	r24, Y+3	; 0x03
    1ffc:	9c 81       	ldd	r25, Y+4	; 0x04
    1ffe:	ad 81       	ldd	r26, Y+5	; 0x05
    2000:	be 81       	ldd	r27, Y+6	; 0x06
    2002:	2a e0       	ldi	r18, 0x0A	; 10
    2004:	30 e0       	ldi	r19, 0x00	; 0
    2006:	40 e0       	ldi	r20, 0x00	; 0
    2008:	50 e0       	ldi	r21, 0x00	; 0
    200a:	bc 01       	movw	r22, r24
    200c:	cd 01       	movw	r24, r26
    200e:	0e 94 85 13 	call	0x270a	; 0x270a <__mulsi3>
    2012:	9b 01       	movw	r18, r22
    2014:	ac 01       	movw	r20, r24
    2016:	8a 81       	ldd	r24, Y+2	; 0x02
    2018:	88 2f       	mov	r24, r24
    201a:	90 e0       	ldi	r25, 0x00	; 0
    201c:	a0 e0       	ldi	r26, 0x00	; 0
    201e:	b0 e0       	ldi	r27, 0x00	; 0
    2020:	82 0f       	add	r24, r18
    2022:	93 1f       	adc	r25, r19
    2024:	a4 1f       	adc	r26, r20
    2026:	b5 1f       	adc	r27, r21
    2028:	8b 83       	std	Y+3, r24	; 0x03
    202a:	9c 83       	std	Y+4, r25	; 0x04
    202c:	ad 83       	std	Y+5, r26	; 0x05
    202e:	be 83       	std	Y+6, r27	; 0x06
		Copy_s32Num /=10;
    2030:	88 85       	ldd	r24, Y+8	; 0x08
    2032:	99 85       	ldd	r25, Y+9	; 0x09
    2034:	aa 85       	ldd	r26, Y+10	; 0x0a
    2036:	bb 85       	ldd	r27, Y+11	; 0x0b
    2038:	2a e0       	ldi	r18, 0x0A	; 10
    203a:	30 e0       	ldi	r19, 0x00	; 0
    203c:	40 e0       	ldi	r20, 0x00	; 0
    203e:	50 e0       	ldi	r21, 0x00	; 0
    2040:	bc 01       	movw	r22, r24
    2042:	cd 01       	movw	r24, r26
    2044:	0e 94 a4 13 	call	0x2748	; 0x2748 <__divmodsi4>
    2048:	da 01       	movw	r26, r20
    204a:	c9 01       	movw	r24, r18
    204c:	88 87       	std	Y+8, r24	; 0x08
    204e:	99 87       	std	Y+9, r25	; 0x09
    2050:	aa 87       	std	Y+10, r26	; 0x0a
    2052:	bb 87       	std	Y+11, r27	; 0x0b
		Local_u8NumDigit ++;
    2054:	89 81       	ldd	r24, Y+1	; 0x01
    2056:	8f 5f       	subi	r24, 0xFF	; 255
    2058:	89 83       	std	Y+1, r24	; 0x01
	{
		DIO_enuSetPinValue(RS_PORT , RS_PIN , DIO_u8HIGH);
		LCD_vidLatch('-');
		Copy_s32Num *= -1 ;
	}
	while (Copy_s32Num)
    205a:	88 85       	ldd	r24, Y+8	; 0x08
    205c:	99 85       	ldd	r25, Y+9	; 0x09
    205e:	aa 85       	ldd	r26, Y+10	; 0x0a
    2060:	bb 85       	ldd	r27, Y+11	; 0x0b
    2062:	00 97       	sbiw	r24, 0x00	; 0
    2064:	a1 05       	cpc	r26, r1
    2066:	b1 05       	cpc	r27, r1
    2068:	09 f0       	breq	.+2      	; 0x206c <LCD_enuDisplayIntegerNum+0x11a>
    206a:	b8 cf       	rjmp	.-144    	; 0x1fdc <LCD_enuDisplayIntegerNum+0x8a>
    206c:	2d c0       	rjmp	.+90     	; 0x20c8 <LCD_enuDisplayIntegerNum+0x176>
		Local_u8NumDigit ++;
	}

	while (Local_u8NumDigit)
	{
		Local_u8Remainder = Local_s32Reverse % 10;
    206e:	8b 81       	ldd	r24, Y+3	; 0x03
    2070:	9c 81       	ldd	r25, Y+4	; 0x04
    2072:	ad 81       	ldd	r26, Y+5	; 0x05
    2074:	be 81       	ldd	r27, Y+6	; 0x06
    2076:	2a e0       	ldi	r18, 0x0A	; 10
    2078:	30 e0       	ldi	r19, 0x00	; 0
    207a:	40 e0       	ldi	r20, 0x00	; 0
    207c:	50 e0       	ldi	r21, 0x00	; 0
    207e:	bc 01       	movw	r22, r24
    2080:	cd 01       	movw	r24, r26
    2082:	0e 94 a4 13 	call	0x2748	; 0x2748 <__divmodsi4>
    2086:	dc 01       	movw	r26, r24
    2088:	cb 01       	movw	r24, r22
    208a:	8a 83       	std	Y+2, r24	; 0x02
		DIO_enuSetPinValue(RS_PORT , RS_PIN , DIO_u8HIGH);
    208c:	80 e0       	ldi	r24, 0x00	; 0
    208e:	60 e0       	ldi	r22, 0x00	; 0
    2090:	41 e0       	ldi	r20, 0x01	; 1
    2092:	0e 94 6b 09 	call	0x12d6	; 0x12d6 <DIO_enuSetPinValue>
		LCD_vidLatch(Local_u8Remainder + '0');
    2096:	8a 81       	ldd	r24, Y+2	; 0x02
    2098:	80 5d       	subi	r24, 0xD0	; 208
    209a:	0e 94 71 10 	call	0x20e2	; 0x20e2 <LCD_vidLatch>
		Local_s32Reverse /= 10;
    209e:	8b 81       	ldd	r24, Y+3	; 0x03
    20a0:	9c 81       	ldd	r25, Y+4	; 0x04
    20a2:	ad 81       	ldd	r26, Y+5	; 0x05
    20a4:	be 81       	ldd	r27, Y+6	; 0x06
    20a6:	2a e0       	ldi	r18, 0x0A	; 10
    20a8:	30 e0       	ldi	r19, 0x00	; 0
    20aa:	40 e0       	ldi	r20, 0x00	; 0
    20ac:	50 e0       	ldi	r21, 0x00	; 0
    20ae:	bc 01       	movw	r22, r24
    20b0:	cd 01       	movw	r24, r26
    20b2:	0e 94 a4 13 	call	0x2748	; 0x2748 <__divmodsi4>
    20b6:	da 01       	movw	r26, r20
    20b8:	c9 01       	movw	r24, r18
    20ba:	8b 83       	std	Y+3, r24	; 0x03
    20bc:	9c 83       	std	Y+4, r25	; 0x04
    20be:	ad 83       	std	Y+5, r26	; 0x05
    20c0:	be 83       	std	Y+6, r27	; 0x06
		Local_u8NumDigit --;
    20c2:	89 81       	ldd	r24, Y+1	; 0x01
    20c4:	81 50       	subi	r24, 0x01	; 1
    20c6:	89 83       	std	Y+1, r24	; 0x01
		Local_s32Reverse = Local_s32Reverse * 10 + Local_u8Remainder;
		Copy_s32Num /=10;
		Local_u8NumDigit ++;
	}

	while (Local_u8NumDigit)
    20c8:	89 81       	ldd	r24, Y+1	; 0x01
    20ca:	88 23       	and	r24, r24
    20cc:	81 f6       	brne	.-96     	; 0x206e <LCD_enuDisplayIntegerNum+0x11c>
		Local_u8NumDigit --;
	}

	}

	return Local_enuErrorState;
    20ce:	8f 81       	ldd	r24, Y+7	; 0x07
}
    20d0:	2b 96       	adiw	r28, 0x0b	; 11
    20d2:	0f b6       	in	r0, 0x3f	; 63
    20d4:	f8 94       	cli
    20d6:	de bf       	out	0x3e, r29	; 62
    20d8:	0f be       	out	0x3f, r0	; 63
    20da:	cd bf       	out	0x3d, r28	; 61
    20dc:	cf 91       	pop	r28
    20de:	df 91       	pop	r29
    20e0:	08 95       	ret

000020e2 <LCD_vidLatch>:




static void LCD_vidLatch(u8 Copy_u8Data)
{
    20e2:	df 93       	push	r29
    20e4:	cf 93       	push	r28
    20e6:	cd b7       	in	r28, 0x3d	; 61
    20e8:	de b7       	in	r29, 0x3e	; 62
    20ea:	6d 97       	sbiw	r28, 0x1d	; 29
    20ec:	0f b6       	in	r0, 0x3f	; 63
    20ee:	f8 94       	cli
    20f0:	de bf       	out	0x3e, r29	; 62
    20f2:	0f be       	out	0x3f, r0	; 63
    20f4:	cd bf       	out	0x3d, r28	; 61
    20f6:	8d 8f       	std	Y+29, r24	; 0x1d
	// set rw as write operation , EN is low
	DIO_enuSetPinValue(RW_PORT , RW_PIN , DIO_u8LOW);
    20f8:	80 e0       	ldi	r24, 0x00	; 0
    20fa:	61 e0       	ldi	r22, 0x01	; 1
    20fc:	40 e0       	ldi	r20, 0x00	; 0
    20fe:	0e 94 6b 09 	call	0x12d6	; 0x12d6 <DIO_enuSetPinValue>
	DIO_enuSetPinValue(EN_PORT , EN_PIN , DIO_u8LOW);
    2102:	80 e0       	ldi	r24, 0x00	; 0
    2104:	62 e0       	ldi	r22, 0x02	; 2
    2106:	40 e0       	ldi	r20, 0x00	; 0
    2108:	0e 94 6b 09 	call	0x12d6	; 0x12d6 <DIO_enuSetPinValue>
	//write Data
	DIO_enuSetPinValue(D7_PORT , D7_PIN , ((Copy_u8Data>>7)&1));
    210c:	8d 8d       	ldd	r24, Y+29	; 0x1d
    210e:	98 2f       	mov	r25, r24
    2110:	99 1f       	adc	r25, r25
    2112:	99 27       	eor	r25, r25
    2114:	99 1f       	adc	r25, r25
    2116:	81 e0       	ldi	r24, 0x01	; 1
    2118:	60 e0       	ldi	r22, 0x00	; 0
    211a:	49 2f       	mov	r20, r25
    211c:	0e 94 6b 09 	call	0x12d6	; 0x12d6 <DIO_enuSetPinValue>
	DIO_enuSetPinValue(D6_PORT , D6_PIN , ((Copy_u8Data>>6)&1));
    2120:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2122:	82 95       	swap	r24
    2124:	86 95       	lsr	r24
    2126:	86 95       	lsr	r24
    2128:	83 70       	andi	r24, 0x03	; 3
    212a:	98 2f       	mov	r25, r24
    212c:	91 70       	andi	r25, 0x01	; 1
    212e:	81 e0       	ldi	r24, 0x01	; 1
    2130:	61 e0       	ldi	r22, 0x01	; 1
    2132:	49 2f       	mov	r20, r25
    2134:	0e 94 6b 09 	call	0x12d6	; 0x12d6 <DIO_enuSetPinValue>
	DIO_enuSetPinValue(D5_PORT , D5_PIN , ((Copy_u8Data>>5)&1));
    2138:	8d 8d       	ldd	r24, Y+29	; 0x1d
    213a:	82 95       	swap	r24
    213c:	86 95       	lsr	r24
    213e:	87 70       	andi	r24, 0x07	; 7
    2140:	98 2f       	mov	r25, r24
    2142:	91 70       	andi	r25, 0x01	; 1
    2144:	81 e0       	ldi	r24, 0x01	; 1
    2146:	62 e0       	ldi	r22, 0x02	; 2
    2148:	49 2f       	mov	r20, r25
    214a:	0e 94 6b 09 	call	0x12d6	; 0x12d6 <DIO_enuSetPinValue>
	DIO_enuSetPinValue(D4_PORT , D4_PIN , ((Copy_u8Data>>4)&1));
    214e:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2150:	82 95       	swap	r24
    2152:	8f 70       	andi	r24, 0x0F	; 15
    2154:	98 2f       	mov	r25, r24
    2156:	91 70       	andi	r25, 0x01	; 1
    2158:	81 e0       	ldi	r24, 0x01	; 1
    215a:	63 e0       	ldi	r22, 0x03	; 3
    215c:	49 2f       	mov	r20, r25
    215e:	0e 94 6b 09 	call	0x12d6	; 0x12d6 <DIO_enuSetPinValue>

#if LCD_MODE == EIGHT_BIT

	DIO_enuSetPinValue(D3_PORT , D3_PIN , ((Copy_u8Data>>3)&1));
    2162:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2164:	86 95       	lsr	r24
    2166:	86 95       	lsr	r24
    2168:	86 95       	lsr	r24
    216a:	98 2f       	mov	r25, r24
    216c:	91 70       	andi	r25, 0x01	; 1
    216e:	81 e0       	ldi	r24, 0x01	; 1
    2170:	64 e0       	ldi	r22, 0x04	; 4
    2172:	49 2f       	mov	r20, r25
    2174:	0e 94 6b 09 	call	0x12d6	; 0x12d6 <DIO_enuSetPinValue>
	DIO_enuSetPinValue(D2_PORT , D2_PIN , ((Copy_u8Data>>2)&1));
    2178:	8d 8d       	ldd	r24, Y+29	; 0x1d
    217a:	86 95       	lsr	r24
    217c:	86 95       	lsr	r24
    217e:	98 2f       	mov	r25, r24
    2180:	91 70       	andi	r25, 0x01	; 1
    2182:	81 e0       	ldi	r24, 0x01	; 1
    2184:	65 e0       	ldi	r22, 0x05	; 5
    2186:	49 2f       	mov	r20, r25
    2188:	0e 94 6b 09 	call	0x12d6	; 0x12d6 <DIO_enuSetPinValue>
	DIO_enuSetPinValue(D1_PORT , D1_PIN , ((Copy_u8Data>>1)&1));
    218c:	8d 8d       	ldd	r24, Y+29	; 0x1d
    218e:	86 95       	lsr	r24
    2190:	98 2f       	mov	r25, r24
    2192:	91 70       	andi	r25, 0x01	; 1
    2194:	81 e0       	ldi	r24, 0x01	; 1
    2196:	66 e0       	ldi	r22, 0x06	; 6
    2198:	49 2f       	mov	r20, r25
    219a:	0e 94 6b 09 	call	0x12d6	; 0x12d6 <DIO_enuSetPinValue>
	DIO_enuSetPinValue(D0_PORT , D0_PIN , ((Copy_u8Data>>0)&1));
    219e:	8d 8d       	ldd	r24, Y+29	; 0x1d
    21a0:	98 2f       	mov	r25, r24
    21a2:	91 70       	andi	r25, 0x01	; 1
    21a4:	81 e0       	ldi	r24, 0x01	; 1
    21a6:	67 e0       	ldi	r22, 0x07	; 7
    21a8:	49 2f       	mov	r20, r25
    21aa:	0e 94 6b 09 	call	0x12d6	; 0x12d6 <DIO_enuSetPinValue>
	DIO_enuSetPinValue(D5_PORT , D5_PIN , ((Copy_u8Data>>1)&1));
	DIO_enuSetPinValue(D4_PORT , D4_PIN , ((Copy_u8Data>>0)&1));
#endif

	// Enable latch
	DIO_enuSetPinValue(EN_PORT , EN_PIN , DIO_u8HIGH);
    21ae:	80 e0       	ldi	r24, 0x00	; 0
    21b0:	62 e0       	ldi	r22, 0x02	; 2
    21b2:	41 e0       	ldi	r20, 0x01	; 1
    21b4:	0e 94 6b 09 	call	0x12d6	; 0x12d6 <DIO_enuSetPinValue>
    21b8:	80 e0       	ldi	r24, 0x00	; 0
    21ba:	90 e0       	ldi	r25, 0x00	; 0
    21bc:	a0 e2       	ldi	r26, 0x20	; 32
    21be:	b1 e4       	ldi	r27, 0x41	; 65
    21c0:	89 8f       	std	Y+25, r24	; 0x19
    21c2:	9a 8f       	std	Y+26, r25	; 0x1a
    21c4:	ab 8f       	std	Y+27, r26	; 0x1b
    21c6:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    21c8:	69 8d       	ldd	r22, Y+25	; 0x19
    21ca:	7a 8d       	ldd	r23, Y+26	; 0x1a
    21cc:	8b 8d       	ldd	r24, Y+27	; 0x1b
    21ce:	9c 8d       	ldd	r25, Y+28	; 0x1c
    21d0:	20 e0       	ldi	r18, 0x00	; 0
    21d2:	30 e0       	ldi	r19, 0x00	; 0
    21d4:	4a e7       	ldi	r20, 0x7A	; 122
    21d6:	53 e4       	ldi	r21, 0x43	; 67
    21d8:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    21dc:	dc 01       	movw	r26, r24
    21de:	cb 01       	movw	r24, r22
    21e0:	8d 8b       	std	Y+21, r24	; 0x15
    21e2:	9e 8b       	std	Y+22, r25	; 0x16
    21e4:	af 8b       	std	Y+23, r26	; 0x17
    21e6:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    21e8:	6d 89       	ldd	r22, Y+21	; 0x15
    21ea:	7e 89       	ldd	r23, Y+22	; 0x16
    21ec:	8f 89       	ldd	r24, Y+23	; 0x17
    21ee:	98 8d       	ldd	r25, Y+24	; 0x18
    21f0:	20 e0       	ldi	r18, 0x00	; 0
    21f2:	30 e0       	ldi	r19, 0x00	; 0
    21f4:	40 e8       	ldi	r20, 0x80	; 128
    21f6:	5f e3       	ldi	r21, 0x3F	; 63
    21f8:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    21fc:	88 23       	and	r24, r24
    21fe:	2c f4       	brge	.+10     	; 0x220a <LCD_vidLatch+0x128>
		__ticks = 1;
    2200:	81 e0       	ldi	r24, 0x01	; 1
    2202:	90 e0       	ldi	r25, 0x00	; 0
    2204:	9c 8b       	std	Y+20, r25	; 0x14
    2206:	8b 8b       	std	Y+19, r24	; 0x13
    2208:	3f c0       	rjmp	.+126    	; 0x2288 <LCD_vidLatch+0x1a6>
	else if (__tmp > 65535)
    220a:	6d 89       	ldd	r22, Y+21	; 0x15
    220c:	7e 89       	ldd	r23, Y+22	; 0x16
    220e:	8f 89       	ldd	r24, Y+23	; 0x17
    2210:	98 8d       	ldd	r25, Y+24	; 0x18
    2212:	20 e0       	ldi	r18, 0x00	; 0
    2214:	3f ef       	ldi	r19, 0xFF	; 255
    2216:	4f e7       	ldi	r20, 0x7F	; 127
    2218:	57 e4       	ldi	r21, 0x47	; 71
    221a:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    221e:	18 16       	cp	r1, r24
    2220:	4c f5       	brge	.+82     	; 0x2274 <LCD_vidLatch+0x192>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2222:	69 8d       	ldd	r22, Y+25	; 0x19
    2224:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2226:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2228:	9c 8d       	ldd	r25, Y+28	; 0x1c
    222a:	20 e0       	ldi	r18, 0x00	; 0
    222c:	30 e0       	ldi	r19, 0x00	; 0
    222e:	40 e2       	ldi	r20, 0x20	; 32
    2230:	51 e4       	ldi	r21, 0x41	; 65
    2232:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2236:	dc 01       	movw	r26, r24
    2238:	cb 01       	movw	r24, r22
    223a:	bc 01       	movw	r22, r24
    223c:	cd 01       	movw	r24, r26
    223e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2242:	dc 01       	movw	r26, r24
    2244:	cb 01       	movw	r24, r22
    2246:	9c 8b       	std	Y+20, r25	; 0x14
    2248:	8b 8b       	std	Y+19, r24	; 0x13
    224a:	0f c0       	rjmp	.+30     	; 0x226a <LCD_vidLatch+0x188>
    224c:	89 e1       	ldi	r24, 0x19	; 25
    224e:	90 e0       	ldi	r25, 0x00	; 0
    2250:	9a 8b       	std	Y+18, r25	; 0x12
    2252:	89 8b       	std	Y+17, r24	; 0x11
    2254:	89 89       	ldd	r24, Y+17	; 0x11
    2256:	9a 89       	ldd	r25, Y+18	; 0x12
    2258:	01 97       	sbiw	r24, 0x01	; 1
    225a:	f1 f7       	brne	.-4      	; 0x2258 <LCD_vidLatch+0x176>
    225c:	9a 8b       	std	Y+18, r25	; 0x12
    225e:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2260:	8b 89       	ldd	r24, Y+19	; 0x13
    2262:	9c 89       	ldd	r25, Y+20	; 0x14
    2264:	01 97       	sbiw	r24, 0x01	; 1
    2266:	9c 8b       	std	Y+20, r25	; 0x14
    2268:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    226a:	8b 89       	ldd	r24, Y+19	; 0x13
    226c:	9c 89       	ldd	r25, Y+20	; 0x14
    226e:	00 97       	sbiw	r24, 0x00	; 0
    2270:	69 f7       	brne	.-38     	; 0x224c <LCD_vidLatch+0x16a>
    2272:	14 c0       	rjmp	.+40     	; 0x229c <LCD_vidLatch+0x1ba>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2274:	6d 89       	ldd	r22, Y+21	; 0x15
    2276:	7e 89       	ldd	r23, Y+22	; 0x16
    2278:	8f 89       	ldd	r24, Y+23	; 0x17
    227a:	98 8d       	ldd	r25, Y+24	; 0x18
    227c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2280:	dc 01       	movw	r26, r24
    2282:	cb 01       	movw	r24, r22
    2284:	9c 8b       	std	Y+20, r25	; 0x14
    2286:	8b 8b       	std	Y+19, r24	; 0x13
    2288:	8b 89       	ldd	r24, Y+19	; 0x13
    228a:	9c 89       	ldd	r25, Y+20	; 0x14
    228c:	98 8b       	std	Y+16, r25	; 0x10
    228e:	8f 87       	std	Y+15, r24	; 0x0f
    2290:	8f 85       	ldd	r24, Y+15	; 0x0f
    2292:	98 89       	ldd	r25, Y+16	; 0x10
    2294:	01 97       	sbiw	r24, 0x01	; 1
    2296:	f1 f7       	brne	.-4      	; 0x2294 <LCD_vidLatch+0x1b2>
    2298:	98 8b       	std	Y+16, r25	; 0x10
    229a:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(10);
	DIO_enuSetPinValue(EN_PORT , EN_PIN , DIO_u8LOW);
    229c:	80 e0       	ldi	r24, 0x00	; 0
    229e:	62 e0       	ldi	r22, 0x02	; 2
    22a0:	40 e0       	ldi	r20, 0x00	; 0
    22a2:	0e 94 6b 09 	call	0x12d6	; 0x12d6 <DIO_enuSetPinValue>
    22a6:	80 e0       	ldi	r24, 0x00	; 0
    22a8:	90 e0       	ldi	r25, 0x00	; 0
    22aa:	a0 e2       	ldi	r26, 0x20	; 32
    22ac:	b1 e4       	ldi	r27, 0x41	; 65
    22ae:	8b 87       	std	Y+11, r24	; 0x0b
    22b0:	9c 87       	std	Y+12, r25	; 0x0c
    22b2:	ad 87       	std	Y+13, r26	; 0x0d
    22b4:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    22b6:	6b 85       	ldd	r22, Y+11	; 0x0b
    22b8:	7c 85       	ldd	r23, Y+12	; 0x0c
    22ba:	8d 85       	ldd	r24, Y+13	; 0x0d
    22bc:	9e 85       	ldd	r25, Y+14	; 0x0e
    22be:	20 e0       	ldi	r18, 0x00	; 0
    22c0:	30 e0       	ldi	r19, 0x00	; 0
    22c2:	4a e7       	ldi	r20, 0x7A	; 122
    22c4:	53 e4       	ldi	r21, 0x43	; 67
    22c6:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    22ca:	dc 01       	movw	r26, r24
    22cc:	cb 01       	movw	r24, r22
    22ce:	8f 83       	std	Y+7, r24	; 0x07
    22d0:	98 87       	std	Y+8, r25	; 0x08
    22d2:	a9 87       	std	Y+9, r26	; 0x09
    22d4:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    22d6:	6f 81       	ldd	r22, Y+7	; 0x07
    22d8:	78 85       	ldd	r23, Y+8	; 0x08
    22da:	89 85       	ldd	r24, Y+9	; 0x09
    22dc:	9a 85       	ldd	r25, Y+10	; 0x0a
    22de:	20 e0       	ldi	r18, 0x00	; 0
    22e0:	30 e0       	ldi	r19, 0x00	; 0
    22e2:	40 e8       	ldi	r20, 0x80	; 128
    22e4:	5f e3       	ldi	r21, 0x3F	; 63
    22e6:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    22ea:	88 23       	and	r24, r24
    22ec:	2c f4       	brge	.+10     	; 0x22f8 <LCD_vidLatch+0x216>
		__ticks = 1;
    22ee:	81 e0       	ldi	r24, 0x01	; 1
    22f0:	90 e0       	ldi	r25, 0x00	; 0
    22f2:	9e 83       	std	Y+6, r25	; 0x06
    22f4:	8d 83       	std	Y+5, r24	; 0x05
    22f6:	3f c0       	rjmp	.+126    	; 0x2376 <LCD_vidLatch+0x294>
	else if (__tmp > 65535)
    22f8:	6f 81       	ldd	r22, Y+7	; 0x07
    22fa:	78 85       	ldd	r23, Y+8	; 0x08
    22fc:	89 85       	ldd	r24, Y+9	; 0x09
    22fe:	9a 85       	ldd	r25, Y+10	; 0x0a
    2300:	20 e0       	ldi	r18, 0x00	; 0
    2302:	3f ef       	ldi	r19, 0xFF	; 255
    2304:	4f e7       	ldi	r20, 0x7F	; 127
    2306:	57 e4       	ldi	r21, 0x47	; 71
    2308:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    230c:	18 16       	cp	r1, r24
    230e:	4c f5       	brge	.+82     	; 0x2362 <LCD_vidLatch+0x280>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2310:	6b 85       	ldd	r22, Y+11	; 0x0b
    2312:	7c 85       	ldd	r23, Y+12	; 0x0c
    2314:	8d 85       	ldd	r24, Y+13	; 0x0d
    2316:	9e 85       	ldd	r25, Y+14	; 0x0e
    2318:	20 e0       	ldi	r18, 0x00	; 0
    231a:	30 e0       	ldi	r19, 0x00	; 0
    231c:	40 e2       	ldi	r20, 0x20	; 32
    231e:	51 e4       	ldi	r21, 0x41	; 65
    2320:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2324:	dc 01       	movw	r26, r24
    2326:	cb 01       	movw	r24, r22
    2328:	bc 01       	movw	r22, r24
    232a:	cd 01       	movw	r24, r26
    232c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2330:	dc 01       	movw	r26, r24
    2332:	cb 01       	movw	r24, r22
    2334:	9e 83       	std	Y+6, r25	; 0x06
    2336:	8d 83       	std	Y+5, r24	; 0x05
    2338:	0f c0       	rjmp	.+30     	; 0x2358 <LCD_vidLatch+0x276>
    233a:	89 e1       	ldi	r24, 0x19	; 25
    233c:	90 e0       	ldi	r25, 0x00	; 0
    233e:	9c 83       	std	Y+4, r25	; 0x04
    2340:	8b 83       	std	Y+3, r24	; 0x03
    2342:	8b 81       	ldd	r24, Y+3	; 0x03
    2344:	9c 81       	ldd	r25, Y+4	; 0x04
    2346:	01 97       	sbiw	r24, 0x01	; 1
    2348:	f1 f7       	brne	.-4      	; 0x2346 <LCD_vidLatch+0x264>
    234a:	9c 83       	std	Y+4, r25	; 0x04
    234c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    234e:	8d 81       	ldd	r24, Y+5	; 0x05
    2350:	9e 81       	ldd	r25, Y+6	; 0x06
    2352:	01 97       	sbiw	r24, 0x01	; 1
    2354:	9e 83       	std	Y+6, r25	; 0x06
    2356:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2358:	8d 81       	ldd	r24, Y+5	; 0x05
    235a:	9e 81       	ldd	r25, Y+6	; 0x06
    235c:	00 97       	sbiw	r24, 0x00	; 0
    235e:	69 f7       	brne	.-38     	; 0x233a <LCD_vidLatch+0x258>
    2360:	14 c0       	rjmp	.+40     	; 0x238a <LCD_vidLatch+0x2a8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2362:	6f 81       	ldd	r22, Y+7	; 0x07
    2364:	78 85       	ldd	r23, Y+8	; 0x08
    2366:	89 85       	ldd	r24, Y+9	; 0x09
    2368:	9a 85       	ldd	r25, Y+10	; 0x0a
    236a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    236e:	dc 01       	movw	r26, r24
    2370:	cb 01       	movw	r24, r22
    2372:	9e 83       	std	Y+6, r25	; 0x06
    2374:	8d 83       	std	Y+5, r24	; 0x05
    2376:	8d 81       	ldd	r24, Y+5	; 0x05
    2378:	9e 81       	ldd	r25, Y+6	; 0x06
    237a:	9a 83       	std	Y+2, r25	; 0x02
    237c:	89 83       	std	Y+1, r24	; 0x01
    237e:	89 81       	ldd	r24, Y+1	; 0x01
    2380:	9a 81       	ldd	r25, Y+2	; 0x02
    2382:	01 97       	sbiw	r24, 0x01	; 1
    2384:	f1 f7       	brne	.-4      	; 0x2382 <LCD_vidLatch+0x2a0>
    2386:	9a 83       	std	Y+2, r25	; 0x02
    2388:	89 83       	std	Y+1, r24	; 0x01


	_delay_ms(10);
}
    238a:	6d 96       	adiw	r28, 0x1d	; 29
    238c:	0f b6       	in	r0, 0x3f	; 63
    238e:	f8 94       	cli
    2390:	de bf       	out	0x3e, r29	; 62
    2392:	0f be       	out	0x3f, r0	; 63
    2394:	cd bf       	out	0x3d, r28	; 61
    2396:	cf 91       	pop	r28
    2398:	df 91       	pop	r29
    239a:	08 95       	ret

0000239c <LCD_invidSendCommend>:


static inline void LCD_invidSendCommend(u8 Copy_u8Command)
{
    239c:	df 93       	push	r29
    239e:	cf 93       	push	r28
    23a0:	cd b7       	in	r28, 0x3d	; 61
    23a2:	de b7       	in	r29, 0x3e	; 62
    23a4:	2f 97       	sbiw	r28, 0x0f	; 15
    23a6:	0f b6       	in	r0, 0x3f	; 63
    23a8:	f8 94       	cli
    23aa:	de bf       	out	0x3e, r29	; 62
    23ac:	0f be       	out	0x3f, r0	; 63
    23ae:	cd bf       	out	0x3d, r28	; 61
    23b0:	8f 87       	std	Y+15, r24	; 0x0f
	// set rs as command
	DIO_enuSetPinValue(RS_PORT , RS_PIN , DIO_u8LOW);
    23b2:	80 e0       	ldi	r24, 0x00	; 0
    23b4:	60 e0       	ldi	r22, 0x00	; 0
    23b6:	40 e0       	ldi	r20, 0x00	; 0
    23b8:	0e 94 6b 09 	call	0x12d6	; 0x12d6 <DIO_enuSetPinValue>
	// set rw as write operation , EN is low
	DIO_enuSetPinValue(RW_PORT , RW_PIN , DIO_u8LOW);
    23bc:	80 e0       	ldi	r24, 0x00	; 0
    23be:	61 e0       	ldi	r22, 0x01	; 1
    23c0:	40 e0       	ldi	r20, 0x00	; 0
    23c2:	0e 94 6b 09 	call	0x12d6	; 0x12d6 <DIO_enuSetPinValue>
	DIO_enuSetPinValue(EN_PORT , EN_PIN , DIO_u8LOW);
    23c6:	80 e0       	ldi	r24, 0x00	; 0
    23c8:	62 e0       	ldi	r22, 0x02	; 2
    23ca:	40 e0       	ldi	r20, 0x00	; 0
    23cc:	0e 94 6b 09 	call	0x12d6	; 0x12d6 <DIO_enuSetPinValue>
	//write Data
	DIO_enuSetPinValue(D7_PORT , D7_PIN , ((Copy_u8Command>>7)&1));
    23d0:	8f 85       	ldd	r24, Y+15	; 0x0f
    23d2:	98 2f       	mov	r25, r24
    23d4:	99 1f       	adc	r25, r25
    23d6:	99 27       	eor	r25, r25
    23d8:	99 1f       	adc	r25, r25
    23da:	81 e0       	ldi	r24, 0x01	; 1
    23dc:	60 e0       	ldi	r22, 0x00	; 0
    23de:	49 2f       	mov	r20, r25
    23e0:	0e 94 6b 09 	call	0x12d6	; 0x12d6 <DIO_enuSetPinValue>
	DIO_enuSetPinValue(D6_PORT , D6_PIN , ((Copy_u8Command>>6)&1));
    23e4:	8f 85       	ldd	r24, Y+15	; 0x0f
    23e6:	82 95       	swap	r24
    23e8:	86 95       	lsr	r24
    23ea:	86 95       	lsr	r24
    23ec:	83 70       	andi	r24, 0x03	; 3
    23ee:	98 2f       	mov	r25, r24
    23f0:	91 70       	andi	r25, 0x01	; 1
    23f2:	81 e0       	ldi	r24, 0x01	; 1
    23f4:	61 e0       	ldi	r22, 0x01	; 1
    23f6:	49 2f       	mov	r20, r25
    23f8:	0e 94 6b 09 	call	0x12d6	; 0x12d6 <DIO_enuSetPinValue>
	DIO_enuSetPinValue(D5_PORT , D5_PIN , ((Copy_u8Command>>5)&1));
    23fc:	8f 85       	ldd	r24, Y+15	; 0x0f
    23fe:	82 95       	swap	r24
    2400:	86 95       	lsr	r24
    2402:	87 70       	andi	r24, 0x07	; 7
    2404:	98 2f       	mov	r25, r24
    2406:	91 70       	andi	r25, 0x01	; 1
    2408:	81 e0       	ldi	r24, 0x01	; 1
    240a:	62 e0       	ldi	r22, 0x02	; 2
    240c:	49 2f       	mov	r20, r25
    240e:	0e 94 6b 09 	call	0x12d6	; 0x12d6 <DIO_enuSetPinValue>
	DIO_enuSetPinValue(D4_PORT , D4_PIN , ((Copy_u8Command>>4)&1));
    2412:	8f 85       	ldd	r24, Y+15	; 0x0f
    2414:	82 95       	swap	r24
    2416:	8f 70       	andi	r24, 0x0F	; 15
    2418:	98 2f       	mov	r25, r24
    241a:	91 70       	andi	r25, 0x01	; 1
    241c:	81 e0       	ldi	r24, 0x01	; 1
    241e:	63 e0       	ldi	r22, 0x03	; 3
    2420:	49 2f       	mov	r20, r25
    2422:	0e 94 6b 09 	call	0x12d6	; 0x12d6 <DIO_enuSetPinValue>
#if LCD_MODE == EIGHT_BIT
	DIO_enuSetPinValue(D3_PORT , D3_PIN , ((Copy_u8Command>>3)&1));
    2426:	8f 85       	ldd	r24, Y+15	; 0x0f
    2428:	86 95       	lsr	r24
    242a:	86 95       	lsr	r24
    242c:	86 95       	lsr	r24
    242e:	98 2f       	mov	r25, r24
    2430:	91 70       	andi	r25, 0x01	; 1
    2432:	81 e0       	ldi	r24, 0x01	; 1
    2434:	64 e0       	ldi	r22, 0x04	; 4
    2436:	49 2f       	mov	r20, r25
    2438:	0e 94 6b 09 	call	0x12d6	; 0x12d6 <DIO_enuSetPinValue>
	DIO_enuSetPinValue(D2_PORT , D2_PIN , ((Copy_u8Command>>2)&1));
    243c:	8f 85       	ldd	r24, Y+15	; 0x0f
    243e:	86 95       	lsr	r24
    2440:	86 95       	lsr	r24
    2442:	98 2f       	mov	r25, r24
    2444:	91 70       	andi	r25, 0x01	; 1
    2446:	81 e0       	ldi	r24, 0x01	; 1
    2448:	65 e0       	ldi	r22, 0x05	; 5
    244a:	49 2f       	mov	r20, r25
    244c:	0e 94 6b 09 	call	0x12d6	; 0x12d6 <DIO_enuSetPinValue>
	DIO_enuSetPinValue(D1_PORT , D1_PIN , ((Copy_u8Command>>1)&1));
    2450:	8f 85       	ldd	r24, Y+15	; 0x0f
    2452:	86 95       	lsr	r24
    2454:	98 2f       	mov	r25, r24
    2456:	91 70       	andi	r25, 0x01	; 1
    2458:	81 e0       	ldi	r24, 0x01	; 1
    245a:	66 e0       	ldi	r22, 0x06	; 6
    245c:	49 2f       	mov	r20, r25
    245e:	0e 94 6b 09 	call	0x12d6	; 0x12d6 <DIO_enuSetPinValue>
	DIO_enuSetPinValue(D0_PORT , D0_PIN , ((Copy_u8Command>>0)&1));
    2462:	8f 85       	ldd	r24, Y+15	; 0x0f
    2464:	98 2f       	mov	r25, r24
    2466:	91 70       	andi	r25, 0x01	; 1
    2468:	81 e0       	ldi	r24, 0x01	; 1
    246a:	67 e0       	ldi	r22, 0x07	; 7
    246c:	49 2f       	mov	r20, r25
    246e:	0e 94 6b 09 	call	0x12d6	; 0x12d6 <DIO_enuSetPinValue>
	DIO_enuSetPinValue(D6_PORT , D6_PIN , ((Copy_u8Command>>2)&1));
	DIO_enuSetPinValue(D5_PORT , D5_PIN , ((Copy_u8Command>>1)&1));
	DIO_enuSetPinValue(D4_PORT , D4_PIN , ((Copy_u8Command>>0)&1));

#endif
	DIO_enuSetPinValue(EN_PORT , EN_PIN , DIO_u8HIGH);
    2472:	80 e0       	ldi	r24, 0x00	; 0
    2474:	62 e0       	ldi	r22, 0x02	; 2
    2476:	41 e0       	ldi	r20, 0x01	; 1
    2478:	0e 94 6b 09 	call	0x12d6	; 0x12d6 <DIO_enuSetPinValue>
    247c:	80 e0       	ldi	r24, 0x00	; 0
    247e:	90 e0       	ldi	r25, 0x00	; 0
    2480:	a0 e2       	ldi	r26, 0x20	; 32
    2482:	b1 e4       	ldi	r27, 0x41	; 65
    2484:	8b 87       	std	Y+11, r24	; 0x0b
    2486:	9c 87       	std	Y+12, r25	; 0x0c
    2488:	ad 87       	std	Y+13, r26	; 0x0d
    248a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    248c:	6b 85       	ldd	r22, Y+11	; 0x0b
    248e:	7c 85       	ldd	r23, Y+12	; 0x0c
    2490:	8d 85       	ldd	r24, Y+13	; 0x0d
    2492:	9e 85       	ldd	r25, Y+14	; 0x0e
    2494:	20 e0       	ldi	r18, 0x00	; 0
    2496:	30 e0       	ldi	r19, 0x00	; 0
    2498:	4a e7       	ldi	r20, 0x7A	; 122
    249a:	53 e4       	ldi	r21, 0x43	; 67
    249c:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    24a0:	dc 01       	movw	r26, r24
    24a2:	cb 01       	movw	r24, r22
    24a4:	8f 83       	std	Y+7, r24	; 0x07
    24a6:	98 87       	std	Y+8, r25	; 0x08
    24a8:	a9 87       	std	Y+9, r26	; 0x09
    24aa:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    24ac:	6f 81       	ldd	r22, Y+7	; 0x07
    24ae:	78 85       	ldd	r23, Y+8	; 0x08
    24b0:	89 85       	ldd	r24, Y+9	; 0x09
    24b2:	9a 85       	ldd	r25, Y+10	; 0x0a
    24b4:	20 e0       	ldi	r18, 0x00	; 0
    24b6:	30 e0       	ldi	r19, 0x00	; 0
    24b8:	40 e8       	ldi	r20, 0x80	; 128
    24ba:	5f e3       	ldi	r21, 0x3F	; 63
    24bc:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    24c0:	88 23       	and	r24, r24
    24c2:	2c f4       	brge	.+10     	; 0x24ce <LCD_invidSendCommend+0x132>
		__ticks = 1;
    24c4:	81 e0       	ldi	r24, 0x01	; 1
    24c6:	90 e0       	ldi	r25, 0x00	; 0
    24c8:	9e 83       	std	Y+6, r25	; 0x06
    24ca:	8d 83       	std	Y+5, r24	; 0x05
    24cc:	3f c0       	rjmp	.+126    	; 0x254c <LCD_invidSendCommend+0x1b0>
	else if (__tmp > 65535)
    24ce:	6f 81       	ldd	r22, Y+7	; 0x07
    24d0:	78 85       	ldd	r23, Y+8	; 0x08
    24d2:	89 85       	ldd	r24, Y+9	; 0x09
    24d4:	9a 85       	ldd	r25, Y+10	; 0x0a
    24d6:	20 e0       	ldi	r18, 0x00	; 0
    24d8:	3f ef       	ldi	r19, 0xFF	; 255
    24da:	4f e7       	ldi	r20, 0x7F	; 127
    24dc:	57 e4       	ldi	r21, 0x47	; 71
    24de:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    24e2:	18 16       	cp	r1, r24
    24e4:	4c f5       	brge	.+82     	; 0x2538 <LCD_invidSendCommend+0x19c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    24e6:	6b 85       	ldd	r22, Y+11	; 0x0b
    24e8:	7c 85       	ldd	r23, Y+12	; 0x0c
    24ea:	8d 85       	ldd	r24, Y+13	; 0x0d
    24ec:	9e 85       	ldd	r25, Y+14	; 0x0e
    24ee:	20 e0       	ldi	r18, 0x00	; 0
    24f0:	30 e0       	ldi	r19, 0x00	; 0
    24f2:	40 e2       	ldi	r20, 0x20	; 32
    24f4:	51 e4       	ldi	r21, 0x41	; 65
    24f6:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    24fa:	dc 01       	movw	r26, r24
    24fc:	cb 01       	movw	r24, r22
    24fe:	bc 01       	movw	r22, r24
    2500:	cd 01       	movw	r24, r26
    2502:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2506:	dc 01       	movw	r26, r24
    2508:	cb 01       	movw	r24, r22
    250a:	9e 83       	std	Y+6, r25	; 0x06
    250c:	8d 83       	std	Y+5, r24	; 0x05
    250e:	0f c0       	rjmp	.+30     	; 0x252e <LCD_invidSendCommend+0x192>
    2510:	89 e1       	ldi	r24, 0x19	; 25
    2512:	90 e0       	ldi	r25, 0x00	; 0
    2514:	9c 83       	std	Y+4, r25	; 0x04
    2516:	8b 83       	std	Y+3, r24	; 0x03
    2518:	8b 81       	ldd	r24, Y+3	; 0x03
    251a:	9c 81       	ldd	r25, Y+4	; 0x04
    251c:	01 97       	sbiw	r24, 0x01	; 1
    251e:	f1 f7       	brne	.-4      	; 0x251c <LCD_invidSendCommend+0x180>
    2520:	9c 83       	std	Y+4, r25	; 0x04
    2522:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2524:	8d 81       	ldd	r24, Y+5	; 0x05
    2526:	9e 81       	ldd	r25, Y+6	; 0x06
    2528:	01 97       	sbiw	r24, 0x01	; 1
    252a:	9e 83       	std	Y+6, r25	; 0x06
    252c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    252e:	8d 81       	ldd	r24, Y+5	; 0x05
    2530:	9e 81       	ldd	r25, Y+6	; 0x06
    2532:	00 97       	sbiw	r24, 0x00	; 0
    2534:	69 f7       	brne	.-38     	; 0x2510 <LCD_invidSendCommend+0x174>
    2536:	14 c0       	rjmp	.+40     	; 0x2560 <LCD_invidSendCommend+0x1c4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2538:	6f 81       	ldd	r22, Y+7	; 0x07
    253a:	78 85       	ldd	r23, Y+8	; 0x08
    253c:	89 85       	ldd	r24, Y+9	; 0x09
    253e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2540:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2544:	dc 01       	movw	r26, r24
    2546:	cb 01       	movw	r24, r22
    2548:	9e 83       	std	Y+6, r25	; 0x06
    254a:	8d 83       	std	Y+5, r24	; 0x05
    254c:	8d 81       	ldd	r24, Y+5	; 0x05
    254e:	9e 81       	ldd	r25, Y+6	; 0x06
    2550:	9a 83       	std	Y+2, r25	; 0x02
    2552:	89 83       	std	Y+1, r24	; 0x01
    2554:	89 81       	ldd	r24, Y+1	; 0x01
    2556:	9a 81       	ldd	r25, Y+2	; 0x02
    2558:	01 97       	sbiw	r24, 0x01	; 1
    255a:	f1 f7       	brne	.-4      	; 0x2558 <LCD_invidSendCommend+0x1bc>
    255c:	9a 83       	std	Y+2, r25	; 0x02
    255e:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(10);
	DIO_enuSetPinValue(EN_PORT , EN_PIN , DIO_u8LOW);
    2560:	80 e0       	ldi	r24, 0x00	; 0
    2562:	62 e0       	ldi	r22, 0x02	; 2
    2564:	40 e0       	ldi	r20, 0x00	; 0
    2566:	0e 94 6b 09 	call	0x12d6	; 0x12d6 <DIO_enuSetPinValue>
}
    256a:	2f 96       	adiw	r28, 0x0f	; 15
    256c:	0f b6       	in	r0, 0x3f	; 63
    256e:	f8 94       	cli
    2570:	de bf       	out	0x3e, r29	; 62
    2572:	0f be       	out	0x3f, r0	; 63
    2574:	cd bf       	out	0x3d, r28	; 61
    2576:	cf 91       	pop	r28
    2578:	df 91       	pop	r29
    257a:	08 95       	ret

0000257c <LCD_enuDisplayString>:

ES_t LCD_enuDisplayString(u8 Copy_au8Data[])
{
    257c:	df 93       	push	r29
    257e:	cf 93       	push	r28
    2580:	00 d0       	rcall	.+0      	; 0x2582 <LCD_enuDisplayString+0x6>
    2582:	00 d0       	rcall	.+0      	; 0x2584 <LCD_enuDisplayString+0x8>
    2584:	cd b7       	in	r28, 0x3d	; 61
    2586:	de b7       	in	r29, 0x3e	; 62
    2588:	9c 83       	std	Y+4, r25	; 0x04
    258a:	8b 83       	std	Y+3, r24	; 0x03
	ES_t Local_enuErrorState = ES_NOK;
    258c:	1a 82       	std	Y+2, r1	; 0x02

		DIO_enuSetPinValue(RS_PORT , RS_PIN , DIO_u8HIGH);
    258e:	80 e0       	ldi	r24, 0x00	; 0
    2590:	60 e0       	ldi	r22, 0x00	; 0
    2592:	41 e0       	ldi	r20, 0x01	; 1
    2594:	0e 94 6b 09 	call	0x12d6	; 0x12d6 <DIO_enuSetPinValue>
		for(u8 i=0;Copy_au8Data[i] != '\0';i++)
    2598:	19 82       	std	Y+1, r1	; 0x01
    259a:	0e c0       	rjmp	.+28     	; 0x25b8 <LCD_enuDisplayString+0x3c>

		LCD_vidLatch(Copy_au8Data[i]);
    259c:	89 81       	ldd	r24, Y+1	; 0x01
    259e:	28 2f       	mov	r18, r24
    25a0:	30 e0       	ldi	r19, 0x00	; 0
    25a2:	8b 81       	ldd	r24, Y+3	; 0x03
    25a4:	9c 81       	ldd	r25, Y+4	; 0x04
    25a6:	fc 01       	movw	r30, r24
    25a8:	e2 0f       	add	r30, r18
    25aa:	f3 1f       	adc	r31, r19
    25ac:	80 81       	ld	r24, Z
    25ae:	0e 94 71 10 	call	0x20e2	; 0x20e2 <LCD_vidLatch>
ES_t LCD_enuDisplayString(u8 Copy_au8Data[])
{
	ES_t Local_enuErrorState = ES_NOK;

		DIO_enuSetPinValue(RS_PORT , RS_PIN , DIO_u8HIGH);
		for(u8 i=0;Copy_au8Data[i] != '\0';i++)
    25b2:	89 81       	ldd	r24, Y+1	; 0x01
    25b4:	8f 5f       	subi	r24, 0xFF	; 255
    25b6:	89 83       	std	Y+1, r24	; 0x01
    25b8:	89 81       	ldd	r24, Y+1	; 0x01
    25ba:	28 2f       	mov	r18, r24
    25bc:	30 e0       	ldi	r19, 0x00	; 0
    25be:	8b 81       	ldd	r24, Y+3	; 0x03
    25c0:	9c 81       	ldd	r25, Y+4	; 0x04
    25c2:	fc 01       	movw	r30, r24
    25c4:	e2 0f       	add	r30, r18
    25c6:	f3 1f       	adc	r31, r19
    25c8:	80 81       	ld	r24, Z
    25ca:	88 23       	and	r24, r24
    25cc:	39 f7       	brne	.-50     	; 0x259c <LCD_enuDisplayString+0x20>

		LCD_vidLatch(Copy_au8Data[i]);

		return Local_enuErrorState;
    25ce:	8a 81       	ldd	r24, Y+2	; 0x02

}
    25d0:	0f 90       	pop	r0
    25d2:	0f 90       	pop	r0
    25d4:	0f 90       	pop	r0
    25d6:	0f 90       	pop	r0
    25d8:	cf 91       	pop	r28
    25da:	df 91       	pop	r29
    25dc:	08 95       	ret

000025de <main>:

#include "../HAL/LCD/LCD_int.h"
#include "../HAL/LM35/LM35_int.h"

int main(void)
{
    25de:	df 93       	push	r29
    25e0:	cf 93       	push	r28
    25e2:	cd b7       	in	r28, 0x3d	; 61
    25e4:	de b7       	in	r29, 0x3e	; 62
    25e6:	62 97       	sbiw	r28, 0x12	; 18
    25e8:	0f b6       	in	r0, 0x3f	; 63
    25ea:	f8 94       	cli
    25ec:	de bf       	out	0x3e, r29	; 62
    25ee:	0f be       	out	0x3f, r0	; 63
    25f0:	cd bf       	out	0x3d, r28	; 61


	LM35_enuInit();
    25f2:	0e 94 02 0d 	call	0x1a04	; 0x1a04 <LM35_enuInit>
	LCD_enuInit();
    25f6:	0e 94 5f 0d 	call	0x1abe	; 0x1abe <LCD_enuInit>
	LCD_enuSendCommand(0x01);
    25fa:	81 e0       	ldi	r24, 0x01	; 1
    25fc:	0e 94 94 0f 	call	0x1f28	; 0x1f28 <LCD_enuSendCommand>
	s32 Temperature;
	while(1)
	{
		LCD_enuSendCommand(0x01);
    2600:	81 e0       	ldi	r24, 0x01	; 1
    2602:	0e 94 94 0f 	call	0x1f28	; 0x1f28 <LCD_enuSendCommand>

		LM35_enuGetTemp(&Temperature);
    2606:	ce 01       	movw	r24, r28
    2608:	0f 96       	adiw	r24, 0x0f	; 15
    260a:	0e 94 19 0d 	call	0x1a32	; 0x1a32 <LM35_enuGetTemp>

		//f32 Analog_Result=(Digital_Result * (5000ul) ) / 1024.0;
		//Digital_Result =Analog_Result;
		LCD_enuSendCommand(0x01);
    260e:	81 e0       	ldi	r24, 0x01	; 1
    2610:	0e 94 94 0f 	call	0x1f28	; 0x1f28 <LCD_enuSendCommand>
		LCD_enuDisplayIntegerNum(Temperature);
    2614:	8f 85       	ldd	r24, Y+15	; 0x0f
    2616:	98 89       	ldd	r25, Y+16	; 0x10
    2618:	a9 89       	ldd	r26, Y+17	; 0x11
    261a:	ba 89       	ldd	r27, Y+18	; 0x12
    261c:	bc 01       	movw	r22, r24
    261e:	cd 01       	movw	r24, r26
    2620:	0e 94 a9 0f 	call	0x1f52	; 0x1f52 <LCD_enuDisplayIntegerNum>
    2624:	80 e0       	ldi	r24, 0x00	; 0
    2626:	90 e0       	ldi	r25, 0x00	; 0
    2628:	aa e7       	ldi	r26, 0x7A	; 122
    262a:	b4 e4       	ldi	r27, 0x44	; 68
    262c:	8b 87       	std	Y+11, r24	; 0x0b
    262e:	9c 87       	std	Y+12, r25	; 0x0c
    2630:	ad 87       	std	Y+13, r26	; 0x0d
    2632:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2634:	6b 85       	ldd	r22, Y+11	; 0x0b
    2636:	7c 85       	ldd	r23, Y+12	; 0x0c
    2638:	8d 85       	ldd	r24, Y+13	; 0x0d
    263a:	9e 85       	ldd	r25, Y+14	; 0x0e
    263c:	20 e0       	ldi	r18, 0x00	; 0
    263e:	30 e0       	ldi	r19, 0x00	; 0
    2640:	4a e7       	ldi	r20, 0x7A	; 122
    2642:	53 e4       	ldi	r21, 0x43	; 67
    2644:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2648:	dc 01       	movw	r26, r24
    264a:	cb 01       	movw	r24, r22
    264c:	8f 83       	std	Y+7, r24	; 0x07
    264e:	98 87       	std	Y+8, r25	; 0x08
    2650:	a9 87       	std	Y+9, r26	; 0x09
    2652:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2654:	6f 81       	ldd	r22, Y+7	; 0x07
    2656:	78 85       	ldd	r23, Y+8	; 0x08
    2658:	89 85       	ldd	r24, Y+9	; 0x09
    265a:	9a 85       	ldd	r25, Y+10	; 0x0a
    265c:	20 e0       	ldi	r18, 0x00	; 0
    265e:	30 e0       	ldi	r19, 0x00	; 0
    2660:	40 e8       	ldi	r20, 0x80	; 128
    2662:	5f e3       	ldi	r21, 0x3F	; 63
    2664:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    2668:	88 23       	and	r24, r24
    266a:	2c f4       	brge	.+10     	; 0x2676 <main+0x98>
		__ticks = 1;
    266c:	81 e0       	ldi	r24, 0x01	; 1
    266e:	90 e0       	ldi	r25, 0x00	; 0
    2670:	9e 83       	std	Y+6, r25	; 0x06
    2672:	8d 83       	std	Y+5, r24	; 0x05
    2674:	3f c0       	rjmp	.+126    	; 0x26f4 <main+0x116>
	else if (__tmp > 65535)
    2676:	6f 81       	ldd	r22, Y+7	; 0x07
    2678:	78 85       	ldd	r23, Y+8	; 0x08
    267a:	89 85       	ldd	r24, Y+9	; 0x09
    267c:	9a 85       	ldd	r25, Y+10	; 0x0a
    267e:	20 e0       	ldi	r18, 0x00	; 0
    2680:	3f ef       	ldi	r19, 0xFF	; 255
    2682:	4f e7       	ldi	r20, 0x7F	; 127
    2684:	57 e4       	ldi	r21, 0x47	; 71
    2686:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    268a:	18 16       	cp	r1, r24
    268c:	4c f5       	brge	.+82     	; 0x26e0 <main+0x102>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    268e:	6b 85       	ldd	r22, Y+11	; 0x0b
    2690:	7c 85       	ldd	r23, Y+12	; 0x0c
    2692:	8d 85       	ldd	r24, Y+13	; 0x0d
    2694:	9e 85       	ldd	r25, Y+14	; 0x0e
    2696:	20 e0       	ldi	r18, 0x00	; 0
    2698:	30 e0       	ldi	r19, 0x00	; 0
    269a:	40 e2       	ldi	r20, 0x20	; 32
    269c:	51 e4       	ldi	r21, 0x41	; 65
    269e:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    26a2:	dc 01       	movw	r26, r24
    26a4:	cb 01       	movw	r24, r22
    26a6:	bc 01       	movw	r22, r24
    26a8:	cd 01       	movw	r24, r26
    26aa:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    26ae:	dc 01       	movw	r26, r24
    26b0:	cb 01       	movw	r24, r22
    26b2:	9e 83       	std	Y+6, r25	; 0x06
    26b4:	8d 83       	std	Y+5, r24	; 0x05
    26b6:	0f c0       	rjmp	.+30     	; 0x26d6 <main+0xf8>
    26b8:	89 e1       	ldi	r24, 0x19	; 25
    26ba:	90 e0       	ldi	r25, 0x00	; 0
    26bc:	9c 83       	std	Y+4, r25	; 0x04
    26be:	8b 83       	std	Y+3, r24	; 0x03
    26c0:	8b 81       	ldd	r24, Y+3	; 0x03
    26c2:	9c 81       	ldd	r25, Y+4	; 0x04
    26c4:	01 97       	sbiw	r24, 0x01	; 1
    26c6:	f1 f7       	brne	.-4      	; 0x26c4 <main+0xe6>
    26c8:	9c 83       	std	Y+4, r25	; 0x04
    26ca:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    26cc:	8d 81       	ldd	r24, Y+5	; 0x05
    26ce:	9e 81       	ldd	r25, Y+6	; 0x06
    26d0:	01 97       	sbiw	r24, 0x01	; 1
    26d2:	9e 83       	std	Y+6, r25	; 0x06
    26d4:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    26d6:	8d 81       	ldd	r24, Y+5	; 0x05
    26d8:	9e 81       	ldd	r25, Y+6	; 0x06
    26da:	00 97       	sbiw	r24, 0x00	; 0
    26dc:	69 f7       	brne	.-38     	; 0x26b8 <main+0xda>
    26de:	90 cf       	rjmp	.-224    	; 0x2600 <main+0x22>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    26e0:	6f 81       	ldd	r22, Y+7	; 0x07
    26e2:	78 85       	ldd	r23, Y+8	; 0x08
    26e4:	89 85       	ldd	r24, Y+9	; 0x09
    26e6:	9a 85       	ldd	r25, Y+10	; 0x0a
    26e8:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    26ec:	dc 01       	movw	r26, r24
    26ee:	cb 01       	movw	r24, r22
    26f0:	9e 83       	std	Y+6, r25	; 0x06
    26f2:	8d 83       	std	Y+5, r24	; 0x05
    26f4:	8d 81       	ldd	r24, Y+5	; 0x05
    26f6:	9e 81       	ldd	r25, Y+6	; 0x06
    26f8:	9a 83       	std	Y+2, r25	; 0x02
    26fa:	89 83       	std	Y+1, r24	; 0x01
    26fc:	89 81       	ldd	r24, Y+1	; 0x01
    26fe:	9a 81       	ldd	r25, Y+2	; 0x02
    2700:	01 97       	sbiw	r24, 0x01	; 1
    2702:	f1 f7       	brne	.-4      	; 0x2700 <main+0x122>
    2704:	9a 83       	std	Y+2, r25	; 0x02
    2706:	89 83       	std	Y+1, r24	; 0x01
    2708:	7b cf       	rjmp	.-266    	; 0x2600 <main+0x22>

0000270a <__mulsi3>:
    270a:	62 9f       	mul	r22, r18
    270c:	d0 01       	movw	r26, r0
    270e:	73 9f       	mul	r23, r19
    2710:	f0 01       	movw	r30, r0
    2712:	82 9f       	mul	r24, r18
    2714:	e0 0d       	add	r30, r0
    2716:	f1 1d       	adc	r31, r1
    2718:	64 9f       	mul	r22, r20
    271a:	e0 0d       	add	r30, r0
    271c:	f1 1d       	adc	r31, r1
    271e:	92 9f       	mul	r25, r18
    2720:	f0 0d       	add	r31, r0
    2722:	83 9f       	mul	r24, r19
    2724:	f0 0d       	add	r31, r0
    2726:	74 9f       	mul	r23, r20
    2728:	f0 0d       	add	r31, r0
    272a:	65 9f       	mul	r22, r21
    272c:	f0 0d       	add	r31, r0
    272e:	99 27       	eor	r25, r25
    2730:	72 9f       	mul	r23, r18
    2732:	b0 0d       	add	r27, r0
    2734:	e1 1d       	adc	r30, r1
    2736:	f9 1f       	adc	r31, r25
    2738:	63 9f       	mul	r22, r19
    273a:	b0 0d       	add	r27, r0
    273c:	e1 1d       	adc	r30, r1
    273e:	f9 1f       	adc	r31, r25
    2740:	bd 01       	movw	r22, r26
    2742:	cf 01       	movw	r24, r30
    2744:	11 24       	eor	r1, r1
    2746:	08 95       	ret

00002748 <__divmodsi4>:
    2748:	97 fb       	bst	r25, 7
    274a:	09 2e       	mov	r0, r25
    274c:	05 26       	eor	r0, r21
    274e:	0e d0       	rcall	.+28     	; 0x276c <__divmodsi4_neg1>
    2750:	57 fd       	sbrc	r21, 7
    2752:	04 d0       	rcall	.+8      	; 0x275c <__divmodsi4_neg2>
    2754:	14 d0       	rcall	.+40     	; 0x277e <__udivmodsi4>
    2756:	0a d0       	rcall	.+20     	; 0x276c <__divmodsi4_neg1>
    2758:	00 1c       	adc	r0, r0
    275a:	38 f4       	brcc	.+14     	; 0x276a <__divmodsi4_exit>

0000275c <__divmodsi4_neg2>:
    275c:	50 95       	com	r21
    275e:	40 95       	com	r20
    2760:	30 95       	com	r19
    2762:	21 95       	neg	r18
    2764:	3f 4f       	sbci	r19, 0xFF	; 255
    2766:	4f 4f       	sbci	r20, 0xFF	; 255
    2768:	5f 4f       	sbci	r21, 0xFF	; 255

0000276a <__divmodsi4_exit>:
    276a:	08 95       	ret

0000276c <__divmodsi4_neg1>:
    276c:	f6 f7       	brtc	.-4      	; 0x276a <__divmodsi4_exit>
    276e:	90 95       	com	r25
    2770:	80 95       	com	r24
    2772:	70 95       	com	r23
    2774:	61 95       	neg	r22
    2776:	7f 4f       	sbci	r23, 0xFF	; 255
    2778:	8f 4f       	sbci	r24, 0xFF	; 255
    277a:	9f 4f       	sbci	r25, 0xFF	; 255
    277c:	08 95       	ret

0000277e <__udivmodsi4>:
    277e:	a1 e2       	ldi	r26, 0x21	; 33
    2780:	1a 2e       	mov	r1, r26
    2782:	aa 1b       	sub	r26, r26
    2784:	bb 1b       	sub	r27, r27
    2786:	fd 01       	movw	r30, r26
    2788:	0d c0       	rjmp	.+26     	; 0x27a4 <__udivmodsi4_ep>

0000278a <__udivmodsi4_loop>:
    278a:	aa 1f       	adc	r26, r26
    278c:	bb 1f       	adc	r27, r27
    278e:	ee 1f       	adc	r30, r30
    2790:	ff 1f       	adc	r31, r31
    2792:	a2 17       	cp	r26, r18
    2794:	b3 07       	cpc	r27, r19
    2796:	e4 07       	cpc	r30, r20
    2798:	f5 07       	cpc	r31, r21
    279a:	20 f0       	brcs	.+8      	; 0x27a4 <__udivmodsi4_ep>
    279c:	a2 1b       	sub	r26, r18
    279e:	b3 0b       	sbc	r27, r19
    27a0:	e4 0b       	sbc	r30, r20
    27a2:	f5 0b       	sbc	r31, r21

000027a4 <__udivmodsi4_ep>:
    27a4:	66 1f       	adc	r22, r22
    27a6:	77 1f       	adc	r23, r23
    27a8:	88 1f       	adc	r24, r24
    27aa:	99 1f       	adc	r25, r25
    27ac:	1a 94       	dec	r1
    27ae:	69 f7       	brne	.-38     	; 0x278a <__udivmodsi4_loop>
    27b0:	60 95       	com	r22
    27b2:	70 95       	com	r23
    27b4:	80 95       	com	r24
    27b6:	90 95       	com	r25
    27b8:	9b 01       	movw	r18, r22
    27ba:	ac 01       	movw	r20, r24
    27bc:	bd 01       	movw	r22, r26
    27be:	cf 01       	movw	r24, r30
    27c0:	08 95       	ret

000027c2 <__prologue_saves__>:
    27c2:	2f 92       	push	r2
    27c4:	3f 92       	push	r3
    27c6:	4f 92       	push	r4
    27c8:	5f 92       	push	r5
    27ca:	6f 92       	push	r6
    27cc:	7f 92       	push	r7
    27ce:	8f 92       	push	r8
    27d0:	9f 92       	push	r9
    27d2:	af 92       	push	r10
    27d4:	bf 92       	push	r11
    27d6:	cf 92       	push	r12
    27d8:	df 92       	push	r13
    27da:	ef 92       	push	r14
    27dc:	ff 92       	push	r15
    27de:	0f 93       	push	r16
    27e0:	1f 93       	push	r17
    27e2:	cf 93       	push	r28
    27e4:	df 93       	push	r29
    27e6:	cd b7       	in	r28, 0x3d	; 61
    27e8:	de b7       	in	r29, 0x3e	; 62
    27ea:	ca 1b       	sub	r28, r26
    27ec:	db 0b       	sbc	r29, r27
    27ee:	0f b6       	in	r0, 0x3f	; 63
    27f0:	f8 94       	cli
    27f2:	de bf       	out	0x3e, r29	; 62
    27f4:	0f be       	out	0x3f, r0	; 63
    27f6:	cd bf       	out	0x3d, r28	; 61
    27f8:	09 94       	ijmp

000027fa <__epilogue_restores__>:
    27fa:	2a 88       	ldd	r2, Y+18	; 0x12
    27fc:	39 88       	ldd	r3, Y+17	; 0x11
    27fe:	48 88       	ldd	r4, Y+16	; 0x10
    2800:	5f 84       	ldd	r5, Y+15	; 0x0f
    2802:	6e 84       	ldd	r6, Y+14	; 0x0e
    2804:	7d 84       	ldd	r7, Y+13	; 0x0d
    2806:	8c 84       	ldd	r8, Y+12	; 0x0c
    2808:	9b 84       	ldd	r9, Y+11	; 0x0b
    280a:	aa 84       	ldd	r10, Y+10	; 0x0a
    280c:	b9 84       	ldd	r11, Y+9	; 0x09
    280e:	c8 84       	ldd	r12, Y+8	; 0x08
    2810:	df 80       	ldd	r13, Y+7	; 0x07
    2812:	ee 80       	ldd	r14, Y+6	; 0x06
    2814:	fd 80       	ldd	r15, Y+5	; 0x05
    2816:	0c 81       	ldd	r16, Y+4	; 0x04
    2818:	1b 81       	ldd	r17, Y+3	; 0x03
    281a:	aa 81       	ldd	r26, Y+2	; 0x02
    281c:	b9 81       	ldd	r27, Y+1	; 0x01
    281e:	ce 0f       	add	r28, r30
    2820:	d1 1d       	adc	r29, r1
    2822:	0f b6       	in	r0, 0x3f	; 63
    2824:	f8 94       	cli
    2826:	de bf       	out	0x3e, r29	; 62
    2828:	0f be       	out	0x3f, r0	; 63
    282a:	cd bf       	out	0x3d, r28	; 61
    282c:	ed 01       	movw	r28, r26
    282e:	08 95       	ret

00002830 <_exit>:
    2830:	f8 94       	cli

00002832 <__stop_program>:
    2832:	ff cf       	rjmp	.-2      	; 0x2832 <__stop_program>
