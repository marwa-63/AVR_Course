
Interrupt.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002466  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000008  00800060  00002466  000024fa  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000006  00800068  00800068  00002502  2**0
                  ALLOC
  3 .stab         00001f08  00000000  00000000  00002504  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000bfe  00000000  00000000  0000440c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  0000500a  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  0000514a  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  000052ba  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  00006f03  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  00007dee  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  00008b9c  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  00008cfc  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  00008f89  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  00009757  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 23 0b 	jmp	0x1646	; 0x1646 <__vector_1>
       8:	0c 94 56 0b 	jmp	0x16ac	; 0x16ac <__vector_2>
       c:	0c 94 89 0b 	jmp	0x1712	; 0x1712 <__vector_3>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a8 e6       	ldi	r26, 0x68	; 104
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
      68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
      6a:	ae 36       	cpi	r26, 0x6E	; 110
      6c:	b1 07       	cpc	r27, r17
      6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>

00000070 <__do_copy_data>:
      70:	10 e0       	ldi	r17, 0x00	; 0
      72:	a0 e6       	ldi	r26, 0x60	; 96
      74:	b0 e0       	ldi	r27, 0x00	; 0
      76:	e6 e6       	ldi	r30, 0x66	; 102
      78:	f4 e2       	ldi	r31, 0x24	; 36
      7a:	02 c0       	rjmp	.+4      	; 0x80 <.do_copy_data_start>

0000007c <.do_copy_data_loop>:
      7c:	05 90       	lpm	r0, Z+
      7e:	0d 92       	st	X+, r0

00000080 <.do_copy_data_start>:
      80:	a8 36       	cpi	r26, 0x68	; 104
      82:	b1 07       	cpc	r27, r17
      84:	d9 f7       	brne	.-10     	; 0x7c <.do_copy_data_loop>
      86:	0e 94 5b 11 	call	0x22b6	; 0x22b6 <main>
      8a:	0c 94 31 12 	jmp	0x2462	; 0x2462 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 fa 11 	jmp	0x23f4	; 0x23f4 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a0 e6       	ldi	r26, 0x60	; 96
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 16 12 	jmp	0x242c	; 0x242c <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 06 12 	jmp	0x240c	; 0x240c <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 22 12 	jmp	0x2444	; 0x2444 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 06 12 	jmp	0x240c	; 0x240c <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 22 12 	jmp	0x2444	; 0x2444 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 fa 11 	jmp	0x23f4	; 0x23f4 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	80 e6       	ldi	r24, 0x60	; 96
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 16 12 	jmp	0x242c	; 0x242c <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 06 12 	jmp	0x240c	; 0x240c <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 22 12 	jmp	0x2444	; 0x2444 <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 06 12 	jmp	0x240c	; 0x240c <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 22 12 	jmp	0x2444	; 0x2444 <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 06 12 	jmp	0x240c	; 0x240c <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 22 12 	jmp	0x2444	; 0x2444 <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 0a 12 	jmp	0x2414	; 0x2414 <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 26 12 	jmp	0x244c	; 0x244c <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__stack+0x113>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__stack+0x10d>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__stack+0x117>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__stack+0xaf>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__stack+0x11>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__stack+0x65>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__stack+0x21>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__stack+0x19>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__stack+0x37>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__stack+0x2f>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__stack+0x59>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__stack+0x89>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__stack+0x91>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__stack+0x91>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__stack+0xa9>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__stack+0xfd>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__stack+0x10d>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__stack+0xdf>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__stack+0xef>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__stack+0xe7>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__stack+0xfd>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__stack+0xff>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__stack+0x117>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <DIO_enuInit>:

#include "DIO_priv.h"
#include "DIO_config.h"

ES_t DIO_enuInit(void)
{
     b46:	df 93       	push	r29
     b48:	cf 93       	push	r28
     b4a:	0f 92       	push	r0
     b4c:	cd b7       	in	r28, 0x3d	; 61
     b4e:	de b7       	in	r29, 0x3e	; 62
	ES_t Local_enuErrorstate = ES_NOK;
     b50:	19 82       	std	Y+1, r1	; 0x01

	DDRA = CONC(PA_PIN7_DIR,PA_PIN6_DIR,PA_PIN5_DIR,PA_PIN4_DIR,PA_PIN3_DIR,PA_PIN2_DIR,PA_PIN1_DIR,PA_PIN0_DIR);
     b52:	ea e3       	ldi	r30, 0x3A	; 58
     b54:	f0 e0       	ldi	r31, 0x00	; 0
     b56:	8f ef       	ldi	r24, 0xFF	; 255
     b58:	80 83       	st	Z, r24
	DDRB = CONC(PB_PIN7_DIR,PB_PIN6_DIR,PB_PIN5_DIR,PB_PIN4_DIR,PB_PIN3_DIR,PB_PIN2_DIR,PB_PIN1_DIR,PB_PIN0_DIR);
     b5a:	e7 e3       	ldi	r30, 0x37	; 55
     b5c:	f0 e0       	ldi	r31, 0x00	; 0
     b5e:	8f ef       	ldi	r24, 0xFF	; 255
     b60:	80 83       	st	Z, r24
	DDRC = CONC(PC_PIN7_DIR,PC_PIN6_DIR,PC_PIN5_DIR,PC_PIN4_DIR,PC_PIN3_DIR,PC_PIN2_DIR,PC_PIN1_DIR,PC_PIN0_DIR);
     b62:	e4 e3       	ldi	r30, 0x34	; 52
     b64:	f0 e0       	ldi	r31, 0x00	; 0
     b66:	86 e9       	ldi	r24, 0x96	; 150
     b68:	80 83       	st	Z, r24
	DDRD = CONC(PD_PIN7_DIR,PD_PIN6_DIR,PD_PIN5_DIR,PD_PIN4_DIR,PD_PIN3_DIR,PD_PIN2_DIR,PD_PIN1_DIR,PD_PIN0_DIR);
     b6a:	e1 e3       	ldi	r30, 0x31	; 49
     b6c:	f0 e0       	ldi	r31, 0x00	; 0
     b6e:	86 e9       	ldi	r24, 0x96	; 150
     b70:	80 83       	st	Z, r24

	PORTA =CONC(PA_PIN7_VAL,PA_PIN6_VAL,PA_PIN5_VAL,PA_PIN4_VAL,PA_PIN3_VAL,PA_PIN2_VAL,PA_PIN1_VAL,PA_PIN0_VAL);
     b72:	eb e3       	ldi	r30, 0x3B	; 59
     b74:	f0 e0       	ldi	r31, 0x00	; 0
     b76:	10 82       	st	Z, r1

	Local_enuErrorstate = ES_OK;
     b78:	81 e0       	ldi	r24, 0x01	; 1
     b7a:	89 83       	std	Y+1, r24	; 0x01

	return Local_enuErrorstate;
     b7c:	89 81       	ldd	r24, Y+1	; 0x01
}
     b7e:	0f 90       	pop	r0
     b80:	cf 91       	pop	r28
     b82:	df 91       	pop	r29
     b84:	08 95       	ret

00000b86 <DIO_enuSetPortDirection>:

ES_t DIO_enuSetPortDirection(u8 Copy_u8PortID , u8 Copy_u8Value)
{
     b86:	df 93       	push	r29
     b88:	cf 93       	push	r28
     b8a:	00 d0       	rcall	.+0      	; 0xb8c <DIO_enuSetPortDirection+0x6>
     b8c:	00 d0       	rcall	.+0      	; 0xb8e <DIO_enuSetPortDirection+0x8>
     b8e:	0f 92       	push	r0
     b90:	cd b7       	in	r28, 0x3d	; 61
     b92:	de b7       	in	r29, 0x3e	; 62
     b94:	8a 83       	std	Y+2, r24	; 0x02
     b96:	6b 83       	std	Y+3, r22	; 0x03
	ES_t Local_enuErrorstate = ES_NOK;
     b98:	19 82       	std	Y+1, r1	; 0x01

	if (Copy_u8PortID <= DIO_PORTD)
     b9a:	8a 81       	ldd	r24, Y+2	; 0x02
     b9c:	84 30       	cpi	r24, 0x04	; 4
     b9e:	a8 f5       	brcc	.+106    	; 0xc0a <DIO_enuSetPortDirection+0x84>
	{
		switch (Copy_u8PortID)
     ba0:	8a 81       	ldd	r24, Y+2	; 0x02
     ba2:	28 2f       	mov	r18, r24
     ba4:	30 e0       	ldi	r19, 0x00	; 0
     ba6:	3d 83       	std	Y+5, r19	; 0x05
     ba8:	2c 83       	std	Y+4, r18	; 0x04
     baa:	8c 81       	ldd	r24, Y+4	; 0x04
     bac:	9d 81       	ldd	r25, Y+5	; 0x05
     bae:	81 30       	cpi	r24, 0x01	; 1
     bb0:	91 05       	cpc	r25, r1
     bb2:	d1 f0       	breq	.+52     	; 0xbe8 <DIO_enuSetPortDirection+0x62>
     bb4:	2c 81       	ldd	r18, Y+4	; 0x04
     bb6:	3d 81       	ldd	r19, Y+5	; 0x05
     bb8:	22 30       	cpi	r18, 0x02	; 2
     bba:	31 05       	cpc	r19, r1
     bbc:	2c f4       	brge	.+10     	; 0xbc8 <DIO_enuSetPortDirection+0x42>
     bbe:	8c 81       	ldd	r24, Y+4	; 0x04
     bc0:	9d 81       	ldd	r25, Y+5	; 0x05
     bc2:	00 97       	sbiw	r24, 0x00	; 0
     bc4:	61 f0       	breq	.+24     	; 0xbde <DIO_enuSetPortDirection+0x58>
     bc6:	1e c0       	rjmp	.+60     	; 0xc04 <DIO_enuSetPortDirection+0x7e>
     bc8:	2c 81       	ldd	r18, Y+4	; 0x04
     bca:	3d 81       	ldd	r19, Y+5	; 0x05
     bcc:	22 30       	cpi	r18, 0x02	; 2
     bce:	31 05       	cpc	r19, r1
     bd0:	81 f0       	breq	.+32     	; 0xbf2 <DIO_enuSetPortDirection+0x6c>
     bd2:	8c 81       	ldd	r24, Y+4	; 0x04
     bd4:	9d 81       	ldd	r25, Y+5	; 0x05
     bd6:	83 30       	cpi	r24, 0x03	; 3
     bd8:	91 05       	cpc	r25, r1
     bda:	81 f0       	breq	.+32     	; 0xbfc <DIO_enuSetPortDirection+0x76>
     bdc:	13 c0       	rjmp	.+38     	; 0xc04 <DIO_enuSetPortDirection+0x7e>
		{
		case DIO_PORTA:
			DDRA = Copy_u8Value;
     bde:	ea e3       	ldi	r30, 0x3A	; 58
     be0:	f0 e0       	ldi	r31, 0x00	; 0
     be2:	8b 81       	ldd	r24, Y+3	; 0x03
     be4:	80 83       	st	Z, r24
     be6:	0e c0       	rjmp	.+28     	; 0xc04 <DIO_enuSetPortDirection+0x7e>
			break;
		case DIO_PORTB:
			DDRB = Copy_u8Value;
     be8:	e7 e3       	ldi	r30, 0x37	; 55
     bea:	f0 e0       	ldi	r31, 0x00	; 0
     bec:	8b 81       	ldd	r24, Y+3	; 0x03
     bee:	80 83       	st	Z, r24
     bf0:	09 c0       	rjmp	.+18     	; 0xc04 <DIO_enuSetPortDirection+0x7e>
			break;
		case DIO_PORTC:
			DDRC = Copy_u8Value;
     bf2:	e4 e3       	ldi	r30, 0x34	; 52
     bf4:	f0 e0       	ldi	r31, 0x00	; 0
     bf6:	8b 81       	ldd	r24, Y+3	; 0x03
     bf8:	80 83       	st	Z, r24
     bfa:	04 c0       	rjmp	.+8      	; 0xc04 <DIO_enuSetPortDirection+0x7e>
			break;
		case DIO_PORTD:
			DDRD = Copy_u8Value;
     bfc:	e1 e3       	ldi	r30, 0x31	; 49
     bfe:	f0 e0       	ldi	r31, 0x00	; 0
     c00:	8b 81       	ldd	r24, Y+3	; 0x03
     c02:	80 83       	st	Z, r24
			break;
		}
		Local_enuErrorstate = ES_OK;
     c04:	81 e0       	ldi	r24, 0x01	; 1
     c06:	89 83       	std	Y+1, r24	; 0x01
     c08:	02 c0       	rjmp	.+4      	; 0xc0e <DIO_enuSetPortDirection+0x88>
	}
	else
	{
		Local_enuErrorstate = ES_OUT_OF_RANGE;
     c0a:	83 e0       	ldi	r24, 0x03	; 3
     c0c:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_enuErrorstate;
     c0e:	89 81       	ldd	r24, Y+1	; 0x01
}
     c10:	0f 90       	pop	r0
     c12:	0f 90       	pop	r0
     c14:	0f 90       	pop	r0
     c16:	0f 90       	pop	r0
     c18:	0f 90       	pop	r0
     c1a:	cf 91       	pop	r28
     c1c:	df 91       	pop	r29
     c1e:	08 95       	ret

00000c20 <DIO_enuSetPortValue>:

ES_t DIO_enuSetPortValue(u8 Copy_u8PortID , u8 Copy_u8Value)
{
     c20:	df 93       	push	r29
     c22:	cf 93       	push	r28
     c24:	00 d0       	rcall	.+0      	; 0xc26 <DIO_enuSetPortValue+0x6>
     c26:	00 d0       	rcall	.+0      	; 0xc28 <DIO_enuSetPortValue+0x8>
     c28:	0f 92       	push	r0
     c2a:	cd b7       	in	r28, 0x3d	; 61
     c2c:	de b7       	in	r29, 0x3e	; 62
     c2e:	8a 83       	std	Y+2, r24	; 0x02
     c30:	6b 83       	std	Y+3, r22	; 0x03
	ES_t Local_enuErrorstate = ES_NOK;
     c32:	19 82       	std	Y+1, r1	; 0x01

	if (Copy_u8PortID <= DIO_PORTD)
     c34:	8a 81       	ldd	r24, Y+2	; 0x02
     c36:	84 30       	cpi	r24, 0x04	; 4
     c38:	a8 f5       	brcc	.+106    	; 0xca4 <DIO_enuSetPortValue+0x84>
	{
		switch (Copy_u8PortID)
     c3a:	8a 81       	ldd	r24, Y+2	; 0x02
     c3c:	28 2f       	mov	r18, r24
     c3e:	30 e0       	ldi	r19, 0x00	; 0
     c40:	3d 83       	std	Y+5, r19	; 0x05
     c42:	2c 83       	std	Y+4, r18	; 0x04
     c44:	8c 81       	ldd	r24, Y+4	; 0x04
     c46:	9d 81       	ldd	r25, Y+5	; 0x05
     c48:	81 30       	cpi	r24, 0x01	; 1
     c4a:	91 05       	cpc	r25, r1
     c4c:	d1 f0       	breq	.+52     	; 0xc82 <DIO_enuSetPortValue+0x62>
     c4e:	2c 81       	ldd	r18, Y+4	; 0x04
     c50:	3d 81       	ldd	r19, Y+5	; 0x05
     c52:	22 30       	cpi	r18, 0x02	; 2
     c54:	31 05       	cpc	r19, r1
     c56:	2c f4       	brge	.+10     	; 0xc62 <DIO_enuSetPortValue+0x42>
     c58:	8c 81       	ldd	r24, Y+4	; 0x04
     c5a:	9d 81       	ldd	r25, Y+5	; 0x05
     c5c:	00 97       	sbiw	r24, 0x00	; 0
     c5e:	61 f0       	breq	.+24     	; 0xc78 <DIO_enuSetPortValue+0x58>
     c60:	1e c0       	rjmp	.+60     	; 0xc9e <DIO_enuSetPortValue+0x7e>
     c62:	2c 81       	ldd	r18, Y+4	; 0x04
     c64:	3d 81       	ldd	r19, Y+5	; 0x05
     c66:	22 30       	cpi	r18, 0x02	; 2
     c68:	31 05       	cpc	r19, r1
     c6a:	81 f0       	breq	.+32     	; 0xc8c <DIO_enuSetPortValue+0x6c>
     c6c:	8c 81       	ldd	r24, Y+4	; 0x04
     c6e:	9d 81       	ldd	r25, Y+5	; 0x05
     c70:	83 30       	cpi	r24, 0x03	; 3
     c72:	91 05       	cpc	r25, r1
     c74:	81 f0       	breq	.+32     	; 0xc96 <DIO_enuSetPortValue+0x76>
     c76:	13 c0       	rjmp	.+38     	; 0xc9e <DIO_enuSetPortValue+0x7e>
		{
		case DIO_PORTA:
			PORTA = Copy_u8Value;
     c78:	eb e3       	ldi	r30, 0x3B	; 59
     c7a:	f0 e0       	ldi	r31, 0x00	; 0
     c7c:	8b 81       	ldd	r24, Y+3	; 0x03
     c7e:	80 83       	st	Z, r24
     c80:	0e c0       	rjmp	.+28     	; 0xc9e <DIO_enuSetPortValue+0x7e>
			break;
		case DIO_PORTB:
			PORTB = Copy_u8Value;
     c82:	e8 e3       	ldi	r30, 0x38	; 56
     c84:	f0 e0       	ldi	r31, 0x00	; 0
     c86:	8b 81       	ldd	r24, Y+3	; 0x03
     c88:	80 83       	st	Z, r24
     c8a:	09 c0       	rjmp	.+18     	; 0xc9e <DIO_enuSetPortValue+0x7e>
			break;
		case DIO_PORTC:
			PORTC = Copy_u8Value;
     c8c:	e5 e3       	ldi	r30, 0x35	; 53
     c8e:	f0 e0       	ldi	r31, 0x00	; 0
     c90:	8b 81       	ldd	r24, Y+3	; 0x03
     c92:	80 83       	st	Z, r24
     c94:	04 c0       	rjmp	.+8      	; 0xc9e <DIO_enuSetPortValue+0x7e>
			break;
		case DIO_PORTD:
			PORTD = Copy_u8Value;
     c96:	e2 e3       	ldi	r30, 0x32	; 50
     c98:	f0 e0       	ldi	r31, 0x00	; 0
     c9a:	8b 81       	ldd	r24, Y+3	; 0x03
     c9c:	80 83       	st	Z, r24
			break;
		}
		Local_enuErrorstate = ES_OK;
     c9e:	81 e0       	ldi	r24, 0x01	; 1
     ca0:	89 83       	std	Y+1, r24	; 0x01
     ca2:	02 c0       	rjmp	.+4      	; 0xca8 <DIO_enuSetPortValue+0x88>
	}
	else
	{
		Local_enuErrorstate = ES_OUT_OF_RANGE;
     ca4:	83 e0       	ldi	r24, 0x03	; 3
     ca6:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_enuErrorstate;
     ca8:	89 81       	ldd	r24, Y+1	; 0x01
}
     caa:	0f 90       	pop	r0
     cac:	0f 90       	pop	r0
     cae:	0f 90       	pop	r0
     cb0:	0f 90       	pop	r0
     cb2:	0f 90       	pop	r0
     cb4:	cf 91       	pop	r28
     cb6:	df 91       	pop	r29
     cb8:	08 95       	ret

00000cba <DIO_enuTogPortValue>:

ES_t DIO_enuTogPortValue(u8 Copy_u8PortID)
{
     cba:	df 93       	push	r29
     cbc:	cf 93       	push	r28
     cbe:	00 d0       	rcall	.+0      	; 0xcc0 <DIO_enuTogPortValue+0x6>
     cc0:	00 d0       	rcall	.+0      	; 0xcc2 <DIO_enuTogPortValue+0x8>
     cc2:	cd b7       	in	r28, 0x3d	; 61
     cc4:	de b7       	in	r29, 0x3e	; 62
     cc6:	8a 83       	std	Y+2, r24	; 0x02
	ES_t Local_enuErrorstate = ES_NOK;
     cc8:	19 82       	std	Y+1, r1	; 0x01

	if (Copy_u8PortID <= DIO_PORTD)
     cca:	8a 81       	ldd	r24, Y+2	; 0x02
     ccc:	84 30       	cpi	r24, 0x04	; 4
     cce:	08 f0       	brcs	.+2      	; 0xcd2 <DIO_enuTogPortValue+0x18>
     cd0:	41 c0       	rjmp	.+130    	; 0xd54 <DIO_enuTogPortValue+0x9a>
	{
		switch (Copy_u8PortID)
     cd2:	8a 81       	ldd	r24, Y+2	; 0x02
     cd4:	28 2f       	mov	r18, r24
     cd6:	30 e0       	ldi	r19, 0x00	; 0
     cd8:	3c 83       	std	Y+4, r19	; 0x04
     cda:	2b 83       	std	Y+3, r18	; 0x03
     cdc:	8b 81       	ldd	r24, Y+3	; 0x03
     cde:	9c 81       	ldd	r25, Y+4	; 0x04
     ce0:	81 30       	cpi	r24, 0x01	; 1
     ce2:	91 05       	cpc	r25, r1
     ce4:	e9 f0       	breq	.+58     	; 0xd20 <DIO_enuTogPortValue+0x66>
     ce6:	2b 81       	ldd	r18, Y+3	; 0x03
     ce8:	3c 81       	ldd	r19, Y+4	; 0x04
     cea:	22 30       	cpi	r18, 0x02	; 2
     cec:	31 05       	cpc	r19, r1
     cee:	2c f4       	brge	.+10     	; 0xcfa <DIO_enuTogPortValue+0x40>
     cf0:	8b 81       	ldd	r24, Y+3	; 0x03
     cf2:	9c 81       	ldd	r25, Y+4	; 0x04
     cf4:	00 97       	sbiw	r24, 0x00	; 0
     cf6:	61 f0       	breq	.+24     	; 0xd10 <DIO_enuTogPortValue+0x56>
     cf8:	2a c0       	rjmp	.+84     	; 0xd4e <DIO_enuTogPortValue+0x94>
     cfa:	2b 81       	ldd	r18, Y+3	; 0x03
     cfc:	3c 81       	ldd	r19, Y+4	; 0x04
     cfe:	22 30       	cpi	r18, 0x02	; 2
     d00:	31 05       	cpc	r19, r1
     d02:	b1 f0       	breq	.+44     	; 0xd30 <DIO_enuTogPortValue+0x76>
     d04:	8b 81       	ldd	r24, Y+3	; 0x03
     d06:	9c 81       	ldd	r25, Y+4	; 0x04
     d08:	83 30       	cpi	r24, 0x03	; 3
     d0a:	91 05       	cpc	r25, r1
     d0c:	c9 f0       	breq	.+50     	; 0xd40 <DIO_enuTogPortValue+0x86>
     d0e:	1f c0       	rjmp	.+62     	; 0xd4e <DIO_enuTogPortValue+0x94>
		{
		case DIO_PORTA:
			PORTA = ~PORTA;
     d10:	ab e3       	ldi	r26, 0x3B	; 59
     d12:	b0 e0       	ldi	r27, 0x00	; 0
     d14:	eb e3       	ldi	r30, 0x3B	; 59
     d16:	f0 e0       	ldi	r31, 0x00	; 0
     d18:	80 81       	ld	r24, Z
     d1a:	80 95       	com	r24
     d1c:	8c 93       	st	X, r24
     d1e:	17 c0       	rjmp	.+46     	; 0xd4e <DIO_enuTogPortValue+0x94>
			break;
		case DIO_PORTB:
			PORTB = ~PORTB;
     d20:	a8 e3       	ldi	r26, 0x38	; 56
     d22:	b0 e0       	ldi	r27, 0x00	; 0
     d24:	e8 e3       	ldi	r30, 0x38	; 56
     d26:	f0 e0       	ldi	r31, 0x00	; 0
     d28:	80 81       	ld	r24, Z
     d2a:	80 95       	com	r24
     d2c:	8c 93       	st	X, r24
     d2e:	0f c0       	rjmp	.+30     	; 0xd4e <DIO_enuTogPortValue+0x94>
			break;
		case DIO_PORTC:
			PORTC = ~PORTC;
     d30:	a5 e3       	ldi	r26, 0x35	; 53
     d32:	b0 e0       	ldi	r27, 0x00	; 0
     d34:	e5 e3       	ldi	r30, 0x35	; 53
     d36:	f0 e0       	ldi	r31, 0x00	; 0
     d38:	80 81       	ld	r24, Z
     d3a:	80 95       	com	r24
     d3c:	8c 93       	st	X, r24
     d3e:	07 c0       	rjmp	.+14     	; 0xd4e <DIO_enuTogPortValue+0x94>
			break;
		case DIO_PORTD:
			PORTD = ~PORTD;
     d40:	a2 e3       	ldi	r26, 0x32	; 50
     d42:	b0 e0       	ldi	r27, 0x00	; 0
     d44:	e2 e3       	ldi	r30, 0x32	; 50
     d46:	f0 e0       	ldi	r31, 0x00	; 0
     d48:	80 81       	ld	r24, Z
     d4a:	80 95       	com	r24
     d4c:	8c 93       	st	X, r24
			break;
		}
		Local_enuErrorstate = ES_OK;
     d4e:	81 e0       	ldi	r24, 0x01	; 1
     d50:	89 83       	std	Y+1, r24	; 0x01
     d52:	02 c0       	rjmp	.+4      	; 0xd58 <DIO_enuTogPortValue+0x9e>
	}
	else
	{
		Local_enuErrorstate = ES_OUT_OF_RANGE;
     d54:	83 e0       	ldi	r24, 0x03	; 3
     d56:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_enuErrorstate;
     d58:	89 81       	ldd	r24, Y+1	; 0x01
}
     d5a:	0f 90       	pop	r0
     d5c:	0f 90       	pop	r0
     d5e:	0f 90       	pop	r0
     d60:	0f 90       	pop	r0
     d62:	cf 91       	pop	r28
     d64:	df 91       	pop	r29
     d66:	08 95       	ret

00000d68 <DIO_enuGetPortValue>:

ES_t DIO_enuGetPortValue(u8 Copy_u8PortID , u8 * Copy_pu8Value)
{
     d68:	df 93       	push	r29
     d6a:	cf 93       	push	r28
     d6c:	00 d0       	rcall	.+0      	; 0xd6e <DIO_enuGetPortValue+0x6>
     d6e:	00 d0       	rcall	.+0      	; 0xd70 <DIO_enuGetPortValue+0x8>
     d70:	00 d0       	rcall	.+0      	; 0xd72 <DIO_enuGetPortValue+0xa>
     d72:	cd b7       	in	r28, 0x3d	; 61
     d74:	de b7       	in	r29, 0x3e	; 62
     d76:	8a 83       	std	Y+2, r24	; 0x02
     d78:	7c 83       	std	Y+4, r23	; 0x04
     d7a:	6b 83       	std	Y+3, r22	; 0x03
	ES_t Local_enuErrorstate = ES_NOK;
     d7c:	19 82       	std	Y+1, r1	; 0x01

	if (Copy_pu8Value != NULL)
     d7e:	8b 81       	ldd	r24, Y+3	; 0x03
     d80:	9c 81       	ldd	r25, Y+4	; 0x04
     d82:	00 97       	sbiw	r24, 0x00	; 0
     d84:	09 f4       	brne	.+2      	; 0xd88 <DIO_enuGetPortValue+0x20>
     d86:	43 c0       	rjmp	.+134    	; 0xe0e <DIO_enuGetPortValue+0xa6>
	{
		if (Copy_u8PortID <= DIO_PORTD)
     d88:	8a 81       	ldd	r24, Y+2	; 0x02
     d8a:	84 30       	cpi	r24, 0x04	; 4
     d8c:	e8 f5       	brcc	.+122    	; 0xe08 <DIO_enuGetPortValue+0xa0>
		{
			switch (Copy_u8PortID)
     d8e:	8a 81       	ldd	r24, Y+2	; 0x02
     d90:	28 2f       	mov	r18, r24
     d92:	30 e0       	ldi	r19, 0x00	; 0
     d94:	3e 83       	std	Y+6, r19	; 0x06
     d96:	2d 83       	std	Y+5, r18	; 0x05
     d98:	8d 81       	ldd	r24, Y+5	; 0x05
     d9a:	9e 81       	ldd	r25, Y+6	; 0x06
     d9c:	81 30       	cpi	r24, 0x01	; 1
     d9e:	91 05       	cpc	r25, r1
     da0:	e1 f0       	breq	.+56     	; 0xdda <DIO_enuGetPortValue+0x72>
     da2:	2d 81       	ldd	r18, Y+5	; 0x05
     da4:	3e 81       	ldd	r19, Y+6	; 0x06
     da6:	22 30       	cpi	r18, 0x02	; 2
     da8:	31 05       	cpc	r19, r1
     daa:	2c f4       	brge	.+10     	; 0xdb6 <DIO_enuGetPortValue+0x4e>
     dac:	8d 81       	ldd	r24, Y+5	; 0x05
     dae:	9e 81       	ldd	r25, Y+6	; 0x06
     db0:	00 97       	sbiw	r24, 0x00	; 0
     db2:	61 f0       	breq	.+24     	; 0xdcc <DIO_enuGetPortValue+0x64>
     db4:	26 c0       	rjmp	.+76     	; 0xe02 <DIO_enuGetPortValue+0x9a>
     db6:	2d 81       	ldd	r18, Y+5	; 0x05
     db8:	3e 81       	ldd	r19, Y+6	; 0x06
     dba:	22 30       	cpi	r18, 0x02	; 2
     dbc:	31 05       	cpc	r19, r1
     dbe:	a1 f0       	breq	.+40     	; 0xde8 <DIO_enuGetPortValue+0x80>
     dc0:	8d 81       	ldd	r24, Y+5	; 0x05
     dc2:	9e 81       	ldd	r25, Y+6	; 0x06
     dc4:	83 30       	cpi	r24, 0x03	; 3
     dc6:	91 05       	cpc	r25, r1
     dc8:	b1 f0       	breq	.+44     	; 0xdf6 <DIO_enuGetPortValue+0x8e>
     dca:	1b c0       	rjmp	.+54     	; 0xe02 <DIO_enuGetPortValue+0x9a>
			{
			case DIO_PORTA:
				*Copy_pu8Value = PINA;
     dcc:	e9 e3       	ldi	r30, 0x39	; 57
     dce:	f0 e0       	ldi	r31, 0x00	; 0
     dd0:	80 81       	ld	r24, Z
     dd2:	eb 81       	ldd	r30, Y+3	; 0x03
     dd4:	fc 81       	ldd	r31, Y+4	; 0x04
     dd6:	80 83       	st	Z, r24
     dd8:	14 c0       	rjmp	.+40     	; 0xe02 <DIO_enuGetPortValue+0x9a>
				break;
			case DIO_PORTB:
				*Copy_pu8Value = PINB;
     dda:	e6 e3       	ldi	r30, 0x36	; 54
     ddc:	f0 e0       	ldi	r31, 0x00	; 0
     dde:	80 81       	ld	r24, Z
     de0:	eb 81       	ldd	r30, Y+3	; 0x03
     de2:	fc 81       	ldd	r31, Y+4	; 0x04
     de4:	80 83       	st	Z, r24
     de6:	0d c0       	rjmp	.+26     	; 0xe02 <DIO_enuGetPortValue+0x9a>
				break;
			case DIO_PORTC:
				*Copy_pu8Value = PINC;
     de8:	e3 e3       	ldi	r30, 0x33	; 51
     dea:	f0 e0       	ldi	r31, 0x00	; 0
     dec:	80 81       	ld	r24, Z
     dee:	eb 81       	ldd	r30, Y+3	; 0x03
     df0:	fc 81       	ldd	r31, Y+4	; 0x04
     df2:	80 83       	st	Z, r24
     df4:	06 c0       	rjmp	.+12     	; 0xe02 <DIO_enuGetPortValue+0x9a>
				break;
			case DIO_PORTD:
				*Copy_pu8Value = PIND;
     df6:	e0 e3       	ldi	r30, 0x30	; 48
     df8:	f0 e0       	ldi	r31, 0x00	; 0
     dfa:	80 81       	ld	r24, Z
     dfc:	eb 81       	ldd	r30, Y+3	; 0x03
     dfe:	fc 81       	ldd	r31, Y+4	; 0x04
     e00:	80 83       	st	Z, r24
				break;
			}
			Local_enuErrorstate = ES_OK;
     e02:	81 e0       	ldi	r24, 0x01	; 1
     e04:	89 83       	std	Y+1, r24	; 0x01
     e06:	05 c0       	rjmp	.+10     	; 0xe12 <DIO_enuGetPortValue+0xaa>
		}
		else
		{
			Local_enuErrorstate = ES_OUT_OF_RANGE;
     e08:	83 e0       	ldi	r24, 0x03	; 3
     e0a:	89 83       	std	Y+1, r24	; 0x01
     e0c:	02 c0       	rjmp	.+4      	; 0xe12 <DIO_enuGetPortValue+0xaa>
		}
	}
	else
	{
		Local_enuErrorstate = ES_NULL_POINTER;
     e0e:	82 e0       	ldi	r24, 0x02	; 2
     e10:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_enuErrorstate;
     e12:	89 81       	ldd	r24, Y+1	; 0x01
}
     e14:	26 96       	adiw	r28, 0x06	; 6
     e16:	0f b6       	in	r0, 0x3f	; 63
     e18:	f8 94       	cli
     e1a:	de bf       	out	0x3e, r29	; 62
     e1c:	0f be       	out	0x3f, r0	; 63
     e1e:	cd bf       	out	0x3d, r28	; 61
     e20:	cf 91       	pop	r28
     e22:	df 91       	pop	r29
     e24:	08 95       	ret

00000e26 <DIO_enuSetPinDirection>:

ES_t DIO_enuSetPinDirection(u8 Copy_u8PortID ,u8 Copy_u8PinID , u8 Copy_u8Value)
{
     e26:	df 93       	push	r29
     e28:	cf 93       	push	r28
     e2a:	00 d0       	rcall	.+0      	; 0xe2c <DIO_enuSetPinDirection+0x6>
     e2c:	00 d0       	rcall	.+0      	; 0xe2e <DIO_enuSetPinDirection+0x8>
     e2e:	00 d0       	rcall	.+0      	; 0xe30 <DIO_enuSetPinDirection+0xa>
     e30:	cd b7       	in	r28, 0x3d	; 61
     e32:	de b7       	in	r29, 0x3e	; 62
     e34:	8a 83       	std	Y+2, r24	; 0x02
     e36:	6b 83       	std	Y+3, r22	; 0x03
     e38:	4c 83       	std	Y+4, r20	; 0x04
	ES_t Local_enuErrorstate = ES_NOK;
     e3a:	19 82       	std	Y+1, r1	; 0x01

	if (Copy_u8PortID <= DIO_PORTD &&
     e3c:	8a 81       	ldd	r24, Y+2	; 0x02
     e3e:	84 30       	cpi	r24, 0x04	; 4
     e40:	08 f0       	brcs	.+2      	; 0xe44 <DIO_enuSetPinDirection+0x1e>
     e42:	d1 c0       	rjmp	.+418    	; 0xfe6 <DIO_enuSetPinDirection+0x1c0>
     e44:	8b 81       	ldd	r24, Y+3	; 0x03
     e46:	88 30       	cpi	r24, 0x08	; 8
     e48:	08 f0       	brcs	.+2      	; 0xe4c <DIO_enuSetPinDirection+0x26>
     e4a:	cd c0       	rjmp	.+410    	; 0xfe6 <DIO_enuSetPinDirection+0x1c0>
     e4c:	8c 81       	ldd	r24, Y+4	; 0x04
     e4e:	82 30       	cpi	r24, 0x02	; 2
     e50:	08 f0       	brcs	.+2      	; 0xe54 <DIO_enuSetPinDirection+0x2e>
     e52:	c9 c0       	rjmp	.+402    	; 0xfe6 <DIO_enuSetPinDirection+0x1c0>
			Copy_u8PinID <= DIO_PIN7 &&
			Copy_u8Value <= OUTPUT)
	{
		switch (Copy_u8PortID)
     e54:	8a 81       	ldd	r24, Y+2	; 0x02
     e56:	28 2f       	mov	r18, r24
     e58:	30 e0       	ldi	r19, 0x00	; 0
     e5a:	3e 83       	std	Y+6, r19	; 0x06
     e5c:	2d 83       	std	Y+5, r18	; 0x05
     e5e:	6d 81       	ldd	r22, Y+5	; 0x05
     e60:	7e 81       	ldd	r23, Y+6	; 0x06
     e62:	61 30       	cpi	r22, 0x01	; 1
     e64:	71 05       	cpc	r23, r1
     e66:	09 f4       	brne	.+2      	; 0xe6a <DIO_enuSetPinDirection+0x44>
     e68:	41 c0       	rjmp	.+130    	; 0xeec <DIO_enuSetPinDirection+0xc6>
     e6a:	8d 81       	ldd	r24, Y+5	; 0x05
     e6c:	9e 81       	ldd	r25, Y+6	; 0x06
     e6e:	82 30       	cpi	r24, 0x02	; 2
     e70:	91 05       	cpc	r25, r1
     e72:	34 f4       	brge	.+12     	; 0xe80 <DIO_enuSetPinDirection+0x5a>
     e74:	2d 81       	ldd	r18, Y+5	; 0x05
     e76:	3e 81       	ldd	r19, Y+6	; 0x06
     e78:	21 15       	cp	r18, r1
     e7a:	31 05       	cpc	r19, r1
     e7c:	71 f0       	breq	.+28     	; 0xe9a <DIO_enuSetPinDirection+0x74>
     e7e:	b0 c0       	rjmp	.+352    	; 0xfe0 <DIO_enuSetPinDirection+0x1ba>
     e80:	6d 81       	ldd	r22, Y+5	; 0x05
     e82:	7e 81       	ldd	r23, Y+6	; 0x06
     e84:	62 30       	cpi	r22, 0x02	; 2
     e86:	71 05       	cpc	r23, r1
     e88:	09 f4       	brne	.+2      	; 0xe8c <DIO_enuSetPinDirection+0x66>
     e8a:	59 c0       	rjmp	.+178    	; 0xf3e <DIO_enuSetPinDirection+0x118>
     e8c:	8d 81       	ldd	r24, Y+5	; 0x05
     e8e:	9e 81       	ldd	r25, Y+6	; 0x06
     e90:	83 30       	cpi	r24, 0x03	; 3
     e92:	91 05       	cpc	r25, r1
     e94:	09 f4       	brne	.+2      	; 0xe98 <DIO_enuSetPinDirection+0x72>
     e96:	7c c0       	rjmp	.+248    	; 0xf90 <DIO_enuSetPinDirection+0x16a>
     e98:	a3 c0       	rjmp	.+326    	; 0xfe0 <DIO_enuSetPinDirection+0x1ba>
		{
		case DIO_PORTA:
			DDRA &= ~(DIO_MASK_BIT<<Copy_u8PinID);
     e9a:	aa e3       	ldi	r26, 0x3A	; 58
     e9c:	b0 e0       	ldi	r27, 0x00	; 0
     e9e:	ea e3       	ldi	r30, 0x3A	; 58
     ea0:	f0 e0       	ldi	r31, 0x00	; 0
     ea2:	80 81       	ld	r24, Z
     ea4:	48 2f       	mov	r20, r24
     ea6:	8b 81       	ldd	r24, Y+3	; 0x03
     ea8:	28 2f       	mov	r18, r24
     eaa:	30 e0       	ldi	r19, 0x00	; 0
     eac:	81 e0       	ldi	r24, 0x01	; 1
     eae:	90 e0       	ldi	r25, 0x00	; 0
     eb0:	02 c0       	rjmp	.+4      	; 0xeb6 <DIO_enuSetPinDirection+0x90>
     eb2:	88 0f       	add	r24, r24
     eb4:	99 1f       	adc	r25, r25
     eb6:	2a 95       	dec	r18
     eb8:	e2 f7       	brpl	.-8      	; 0xeb2 <DIO_enuSetPinDirection+0x8c>
     eba:	80 95       	com	r24
     ebc:	84 23       	and	r24, r20
     ebe:	8c 93       	st	X, r24
			DDRA |=  (Copy_u8Value << Copy_u8PinID);
     ec0:	aa e3       	ldi	r26, 0x3A	; 58
     ec2:	b0 e0       	ldi	r27, 0x00	; 0
     ec4:	ea e3       	ldi	r30, 0x3A	; 58
     ec6:	f0 e0       	ldi	r31, 0x00	; 0
     ec8:	80 81       	ld	r24, Z
     eca:	48 2f       	mov	r20, r24
     ecc:	8c 81       	ldd	r24, Y+4	; 0x04
     ece:	28 2f       	mov	r18, r24
     ed0:	30 e0       	ldi	r19, 0x00	; 0
     ed2:	8b 81       	ldd	r24, Y+3	; 0x03
     ed4:	88 2f       	mov	r24, r24
     ed6:	90 e0       	ldi	r25, 0x00	; 0
     ed8:	b9 01       	movw	r22, r18
     eda:	02 c0       	rjmp	.+4      	; 0xee0 <DIO_enuSetPinDirection+0xba>
     edc:	66 0f       	add	r22, r22
     ede:	77 1f       	adc	r23, r23
     ee0:	8a 95       	dec	r24
     ee2:	e2 f7       	brpl	.-8      	; 0xedc <DIO_enuSetPinDirection+0xb6>
     ee4:	cb 01       	movw	r24, r22
     ee6:	84 2b       	or	r24, r20
     ee8:	8c 93       	st	X, r24
     eea:	7a c0       	rjmp	.+244    	; 0xfe0 <DIO_enuSetPinDirection+0x1ba>
			break;
		case DIO_PORTB:
			DDRB &= ~(DIO_MASK_BIT<<Copy_u8PinID);
     eec:	a7 e3       	ldi	r26, 0x37	; 55
     eee:	b0 e0       	ldi	r27, 0x00	; 0
     ef0:	e7 e3       	ldi	r30, 0x37	; 55
     ef2:	f0 e0       	ldi	r31, 0x00	; 0
     ef4:	80 81       	ld	r24, Z
     ef6:	48 2f       	mov	r20, r24
     ef8:	8b 81       	ldd	r24, Y+3	; 0x03
     efa:	28 2f       	mov	r18, r24
     efc:	30 e0       	ldi	r19, 0x00	; 0
     efe:	81 e0       	ldi	r24, 0x01	; 1
     f00:	90 e0       	ldi	r25, 0x00	; 0
     f02:	02 c0       	rjmp	.+4      	; 0xf08 <DIO_enuSetPinDirection+0xe2>
     f04:	88 0f       	add	r24, r24
     f06:	99 1f       	adc	r25, r25
     f08:	2a 95       	dec	r18
     f0a:	e2 f7       	brpl	.-8      	; 0xf04 <DIO_enuSetPinDirection+0xde>
     f0c:	80 95       	com	r24
     f0e:	84 23       	and	r24, r20
     f10:	8c 93       	st	X, r24
			DDRB |=  (Copy_u8Value << Copy_u8PinID);
     f12:	a7 e3       	ldi	r26, 0x37	; 55
     f14:	b0 e0       	ldi	r27, 0x00	; 0
     f16:	e7 e3       	ldi	r30, 0x37	; 55
     f18:	f0 e0       	ldi	r31, 0x00	; 0
     f1a:	80 81       	ld	r24, Z
     f1c:	48 2f       	mov	r20, r24
     f1e:	8c 81       	ldd	r24, Y+4	; 0x04
     f20:	28 2f       	mov	r18, r24
     f22:	30 e0       	ldi	r19, 0x00	; 0
     f24:	8b 81       	ldd	r24, Y+3	; 0x03
     f26:	88 2f       	mov	r24, r24
     f28:	90 e0       	ldi	r25, 0x00	; 0
     f2a:	b9 01       	movw	r22, r18
     f2c:	02 c0       	rjmp	.+4      	; 0xf32 <DIO_enuSetPinDirection+0x10c>
     f2e:	66 0f       	add	r22, r22
     f30:	77 1f       	adc	r23, r23
     f32:	8a 95       	dec	r24
     f34:	e2 f7       	brpl	.-8      	; 0xf2e <DIO_enuSetPinDirection+0x108>
     f36:	cb 01       	movw	r24, r22
     f38:	84 2b       	or	r24, r20
     f3a:	8c 93       	st	X, r24
     f3c:	51 c0       	rjmp	.+162    	; 0xfe0 <DIO_enuSetPinDirection+0x1ba>
			break;
		case DIO_PORTC:
			DDRC &= ~(DIO_MASK_BIT<<Copy_u8PinID);
     f3e:	a4 e3       	ldi	r26, 0x34	; 52
     f40:	b0 e0       	ldi	r27, 0x00	; 0
     f42:	e4 e3       	ldi	r30, 0x34	; 52
     f44:	f0 e0       	ldi	r31, 0x00	; 0
     f46:	80 81       	ld	r24, Z
     f48:	48 2f       	mov	r20, r24
     f4a:	8b 81       	ldd	r24, Y+3	; 0x03
     f4c:	28 2f       	mov	r18, r24
     f4e:	30 e0       	ldi	r19, 0x00	; 0
     f50:	81 e0       	ldi	r24, 0x01	; 1
     f52:	90 e0       	ldi	r25, 0x00	; 0
     f54:	02 c0       	rjmp	.+4      	; 0xf5a <DIO_enuSetPinDirection+0x134>
     f56:	88 0f       	add	r24, r24
     f58:	99 1f       	adc	r25, r25
     f5a:	2a 95       	dec	r18
     f5c:	e2 f7       	brpl	.-8      	; 0xf56 <DIO_enuSetPinDirection+0x130>
     f5e:	80 95       	com	r24
     f60:	84 23       	and	r24, r20
     f62:	8c 93       	st	X, r24
			DDRC |=  (Copy_u8Value << Copy_u8PinID);
     f64:	a4 e3       	ldi	r26, 0x34	; 52
     f66:	b0 e0       	ldi	r27, 0x00	; 0
     f68:	e4 e3       	ldi	r30, 0x34	; 52
     f6a:	f0 e0       	ldi	r31, 0x00	; 0
     f6c:	80 81       	ld	r24, Z
     f6e:	48 2f       	mov	r20, r24
     f70:	8c 81       	ldd	r24, Y+4	; 0x04
     f72:	28 2f       	mov	r18, r24
     f74:	30 e0       	ldi	r19, 0x00	; 0
     f76:	8b 81       	ldd	r24, Y+3	; 0x03
     f78:	88 2f       	mov	r24, r24
     f7a:	90 e0       	ldi	r25, 0x00	; 0
     f7c:	b9 01       	movw	r22, r18
     f7e:	02 c0       	rjmp	.+4      	; 0xf84 <DIO_enuSetPinDirection+0x15e>
     f80:	66 0f       	add	r22, r22
     f82:	77 1f       	adc	r23, r23
     f84:	8a 95       	dec	r24
     f86:	e2 f7       	brpl	.-8      	; 0xf80 <DIO_enuSetPinDirection+0x15a>
     f88:	cb 01       	movw	r24, r22
     f8a:	84 2b       	or	r24, r20
     f8c:	8c 93       	st	X, r24
     f8e:	28 c0       	rjmp	.+80     	; 0xfe0 <DIO_enuSetPinDirection+0x1ba>
			break;
		case DIO_PORTD:
			DDRD &= ~(DIO_MASK_BIT<<Copy_u8PinID);
     f90:	a1 e3       	ldi	r26, 0x31	; 49
     f92:	b0 e0       	ldi	r27, 0x00	; 0
     f94:	e1 e3       	ldi	r30, 0x31	; 49
     f96:	f0 e0       	ldi	r31, 0x00	; 0
     f98:	80 81       	ld	r24, Z
     f9a:	48 2f       	mov	r20, r24
     f9c:	8b 81       	ldd	r24, Y+3	; 0x03
     f9e:	28 2f       	mov	r18, r24
     fa0:	30 e0       	ldi	r19, 0x00	; 0
     fa2:	81 e0       	ldi	r24, 0x01	; 1
     fa4:	90 e0       	ldi	r25, 0x00	; 0
     fa6:	02 c0       	rjmp	.+4      	; 0xfac <DIO_enuSetPinDirection+0x186>
     fa8:	88 0f       	add	r24, r24
     faa:	99 1f       	adc	r25, r25
     fac:	2a 95       	dec	r18
     fae:	e2 f7       	brpl	.-8      	; 0xfa8 <DIO_enuSetPinDirection+0x182>
     fb0:	80 95       	com	r24
     fb2:	84 23       	and	r24, r20
     fb4:	8c 93       	st	X, r24
			DDRD |=  (Copy_u8Value << Copy_u8PinID);
     fb6:	a1 e3       	ldi	r26, 0x31	; 49
     fb8:	b0 e0       	ldi	r27, 0x00	; 0
     fba:	e1 e3       	ldi	r30, 0x31	; 49
     fbc:	f0 e0       	ldi	r31, 0x00	; 0
     fbe:	80 81       	ld	r24, Z
     fc0:	48 2f       	mov	r20, r24
     fc2:	8c 81       	ldd	r24, Y+4	; 0x04
     fc4:	28 2f       	mov	r18, r24
     fc6:	30 e0       	ldi	r19, 0x00	; 0
     fc8:	8b 81       	ldd	r24, Y+3	; 0x03
     fca:	88 2f       	mov	r24, r24
     fcc:	90 e0       	ldi	r25, 0x00	; 0
     fce:	b9 01       	movw	r22, r18
     fd0:	02 c0       	rjmp	.+4      	; 0xfd6 <DIO_enuSetPinDirection+0x1b0>
     fd2:	66 0f       	add	r22, r22
     fd4:	77 1f       	adc	r23, r23
     fd6:	8a 95       	dec	r24
     fd8:	e2 f7       	brpl	.-8      	; 0xfd2 <DIO_enuSetPinDirection+0x1ac>
     fda:	cb 01       	movw	r24, r22
     fdc:	84 2b       	or	r24, r20
     fde:	8c 93       	st	X, r24
			break;
		}
		Local_enuErrorstate = ES_OK;
     fe0:	81 e0       	ldi	r24, 0x01	; 1
     fe2:	89 83       	std	Y+1, r24	; 0x01
     fe4:	02 c0       	rjmp	.+4      	; 0xfea <DIO_enuSetPinDirection+0x1c4>
	}
	else
	{
		Local_enuErrorstate = ES_OUT_OF_RANGE;
     fe6:	83 e0       	ldi	r24, 0x03	; 3
     fe8:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_enuErrorstate;
     fea:	89 81       	ldd	r24, Y+1	; 0x01
}
     fec:	26 96       	adiw	r28, 0x06	; 6
     fee:	0f b6       	in	r0, 0x3f	; 63
     ff0:	f8 94       	cli
     ff2:	de bf       	out	0x3e, r29	; 62
     ff4:	0f be       	out	0x3f, r0	; 63
     ff6:	cd bf       	out	0x3d, r28	; 61
     ff8:	cf 91       	pop	r28
     ffa:	df 91       	pop	r29
     ffc:	08 95       	ret

00000ffe <DIO_enuSetPinValue>:

ES_t DIO_enuSetPinValue(u8 Copy_u8PortID , u8 Copy_u8PinID ,u8 Copy_u8Value)
{
     ffe:	df 93       	push	r29
    1000:	cf 93       	push	r28
    1002:	00 d0       	rcall	.+0      	; 0x1004 <DIO_enuSetPinValue+0x6>
    1004:	00 d0       	rcall	.+0      	; 0x1006 <DIO_enuSetPinValue+0x8>
    1006:	00 d0       	rcall	.+0      	; 0x1008 <DIO_enuSetPinValue+0xa>
    1008:	cd b7       	in	r28, 0x3d	; 61
    100a:	de b7       	in	r29, 0x3e	; 62
    100c:	8a 83       	std	Y+2, r24	; 0x02
    100e:	6b 83       	std	Y+3, r22	; 0x03
    1010:	4c 83       	std	Y+4, r20	; 0x04
	ES_t Local_enuErrorstate = ES_NOK;
    1012:	19 82       	std	Y+1, r1	; 0x01

	if (Copy_u8PortID <= DIO_PORTD &&
    1014:	8a 81       	ldd	r24, Y+2	; 0x02
    1016:	84 30       	cpi	r24, 0x04	; 4
    1018:	08 f0       	brcs	.+2      	; 0x101c <DIO_enuSetPinValue+0x1e>
    101a:	d1 c0       	rjmp	.+418    	; 0x11be <DIO_enuSetPinValue+0x1c0>
    101c:	8b 81       	ldd	r24, Y+3	; 0x03
    101e:	88 30       	cpi	r24, 0x08	; 8
    1020:	08 f0       	brcs	.+2      	; 0x1024 <DIO_enuSetPinValue+0x26>
    1022:	cd c0       	rjmp	.+410    	; 0x11be <DIO_enuSetPinValue+0x1c0>
    1024:	8c 81       	ldd	r24, Y+4	; 0x04
    1026:	82 30       	cpi	r24, 0x02	; 2
    1028:	08 f0       	brcs	.+2      	; 0x102c <DIO_enuSetPinValue+0x2e>
    102a:	c9 c0       	rjmp	.+402    	; 0x11be <DIO_enuSetPinValue+0x1c0>
			Copy_u8PinID <= DIO_PIN7 &&
			Copy_u8Value <= OUTPUT)
	{
		switch (Copy_u8PortID)
    102c:	8a 81       	ldd	r24, Y+2	; 0x02
    102e:	28 2f       	mov	r18, r24
    1030:	30 e0       	ldi	r19, 0x00	; 0
    1032:	3e 83       	std	Y+6, r19	; 0x06
    1034:	2d 83       	std	Y+5, r18	; 0x05
    1036:	6d 81       	ldd	r22, Y+5	; 0x05
    1038:	7e 81       	ldd	r23, Y+6	; 0x06
    103a:	61 30       	cpi	r22, 0x01	; 1
    103c:	71 05       	cpc	r23, r1
    103e:	09 f4       	brne	.+2      	; 0x1042 <DIO_enuSetPinValue+0x44>
    1040:	41 c0       	rjmp	.+130    	; 0x10c4 <DIO_enuSetPinValue+0xc6>
    1042:	8d 81       	ldd	r24, Y+5	; 0x05
    1044:	9e 81       	ldd	r25, Y+6	; 0x06
    1046:	82 30       	cpi	r24, 0x02	; 2
    1048:	91 05       	cpc	r25, r1
    104a:	34 f4       	brge	.+12     	; 0x1058 <DIO_enuSetPinValue+0x5a>
    104c:	2d 81       	ldd	r18, Y+5	; 0x05
    104e:	3e 81       	ldd	r19, Y+6	; 0x06
    1050:	21 15       	cp	r18, r1
    1052:	31 05       	cpc	r19, r1
    1054:	71 f0       	breq	.+28     	; 0x1072 <DIO_enuSetPinValue+0x74>
    1056:	b0 c0       	rjmp	.+352    	; 0x11b8 <DIO_enuSetPinValue+0x1ba>
    1058:	6d 81       	ldd	r22, Y+5	; 0x05
    105a:	7e 81       	ldd	r23, Y+6	; 0x06
    105c:	62 30       	cpi	r22, 0x02	; 2
    105e:	71 05       	cpc	r23, r1
    1060:	09 f4       	brne	.+2      	; 0x1064 <DIO_enuSetPinValue+0x66>
    1062:	59 c0       	rjmp	.+178    	; 0x1116 <DIO_enuSetPinValue+0x118>
    1064:	8d 81       	ldd	r24, Y+5	; 0x05
    1066:	9e 81       	ldd	r25, Y+6	; 0x06
    1068:	83 30       	cpi	r24, 0x03	; 3
    106a:	91 05       	cpc	r25, r1
    106c:	09 f4       	brne	.+2      	; 0x1070 <DIO_enuSetPinValue+0x72>
    106e:	7c c0       	rjmp	.+248    	; 0x1168 <DIO_enuSetPinValue+0x16a>
    1070:	a3 c0       	rjmp	.+326    	; 0x11b8 <DIO_enuSetPinValue+0x1ba>
		{
		case DIO_PORTA:
			PORTA &= ~(DIO_MASK_BIT<<Copy_u8PinID);
    1072:	ab e3       	ldi	r26, 0x3B	; 59
    1074:	b0 e0       	ldi	r27, 0x00	; 0
    1076:	eb e3       	ldi	r30, 0x3B	; 59
    1078:	f0 e0       	ldi	r31, 0x00	; 0
    107a:	80 81       	ld	r24, Z
    107c:	48 2f       	mov	r20, r24
    107e:	8b 81       	ldd	r24, Y+3	; 0x03
    1080:	28 2f       	mov	r18, r24
    1082:	30 e0       	ldi	r19, 0x00	; 0
    1084:	81 e0       	ldi	r24, 0x01	; 1
    1086:	90 e0       	ldi	r25, 0x00	; 0
    1088:	02 c0       	rjmp	.+4      	; 0x108e <DIO_enuSetPinValue+0x90>
    108a:	88 0f       	add	r24, r24
    108c:	99 1f       	adc	r25, r25
    108e:	2a 95       	dec	r18
    1090:	e2 f7       	brpl	.-8      	; 0x108a <DIO_enuSetPinValue+0x8c>
    1092:	80 95       	com	r24
    1094:	84 23       	and	r24, r20
    1096:	8c 93       	st	X, r24
			PORTA |=  (Copy_u8Value << Copy_u8PinID);
    1098:	ab e3       	ldi	r26, 0x3B	; 59
    109a:	b0 e0       	ldi	r27, 0x00	; 0
    109c:	eb e3       	ldi	r30, 0x3B	; 59
    109e:	f0 e0       	ldi	r31, 0x00	; 0
    10a0:	80 81       	ld	r24, Z
    10a2:	48 2f       	mov	r20, r24
    10a4:	8c 81       	ldd	r24, Y+4	; 0x04
    10a6:	28 2f       	mov	r18, r24
    10a8:	30 e0       	ldi	r19, 0x00	; 0
    10aa:	8b 81       	ldd	r24, Y+3	; 0x03
    10ac:	88 2f       	mov	r24, r24
    10ae:	90 e0       	ldi	r25, 0x00	; 0
    10b0:	b9 01       	movw	r22, r18
    10b2:	02 c0       	rjmp	.+4      	; 0x10b8 <DIO_enuSetPinValue+0xba>
    10b4:	66 0f       	add	r22, r22
    10b6:	77 1f       	adc	r23, r23
    10b8:	8a 95       	dec	r24
    10ba:	e2 f7       	brpl	.-8      	; 0x10b4 <DIO_enuSetPinValue+0xb6>
    10bc:	cb 01       	movw	r24, r22
    10be:	84 2b       	or	r24, r20
    10c0:	8c 93       	st	X, r24
    10c2:	7a c0       	rjmp	.+244    	; 0x11b8 <DIO_enuSetPinValue+0x1ba>
			break;
		case DIO_PORTB:
			PORTB &= ~(DIO_MASK_BIT<<Copy_u8PinID);
    10c4:	a8 e3       	ldi	r26, 0x38	; 56
    10c6:	b0 e0       	ldi	r27, 0x00	; 0
    10c8:	e8 e3       	ldi	r30, 0x38	; 56
    10ca:	f0 e0       	ldi	r31, 0x00	; 0
    10cc:	80 81       	ld	r24, Z
    10ce:	48 2f       	mov	r20, r24
    10d0:	8b 81       	ldd	r24, Y+3	; 0x03
    10d2:	28 2f       	mov	r18, r24
    10d4:	30 e0       	ldi	r19, 0x00	; 0
    10d6:	81 e0       	ldi	r24, 0x01	; 1
    10d8:	90 e0       	ldi	r25, 0x00	; 0
    10da:	02 c0       	rjmp	.+4      	; 0x10e0 <DIO_enuSetPinValue+0xe2>
    10dc:	88 0f       	add	r24, r24
    10de:	99 1f       	adc	r25, r25
    10e0:	2a 95       	dec	r18
    10e2:	e2 f7       	brpl	.-8      	; 0x10dc <DIO_enuSetPinValue+0xde>
    10e4:	80 95       	com	r24
    10e6:	84 23       	and	r24, r20
    10e8:	8c 93       	st	X, r24
			PORTB |=  (Copy_u8Value << Copy_u8PinID);
    10ea:	a8 e3       	ldi	r26, 0x38	; 56
    10ec:	b0 e0       	ldi	r27, 0x00	; 0
    10ee:	e8 e3       	ldi	r30, 0x38	; 56
    10f0:	f0 e0       	ldi	r31, 0x00	; 0
    10f2:	80 81       	ld	r24, Z
    10f4:	48 2f       	mov	r20, r24
    10f6:	8c 81       	ldd	r24, Y+4	; 0x04
    10f8:	28 2f       	mov	r18, r24
    10fa:	30 e0       	ldi	r19, 0x00	; 0
    10fc:	8b 81       	ldd	r24, Y+3	; 0x03
    10fe:	88 2f       	mov	r24, r24
    1100:	90 e0       	ldi	r25, 0x00	; 0
    1102:	b9 01       	movw	r22, r18
    1104:	02 c0       	rjmp	.+4      	; 0x110a <DIO_enuSetPinValue+0x10c>
    1106:	66 0f       	add	r22, r22
    1108:	77 1f       	adc	r23, r23
    110a:	8a 95       	dec	r24
    110c:	e2 f7       	brpl	.-8      	; 0x1106 <DIO_enuSetPinValue+0x108>
    110e:	cb 01       	movw	r24, r22
    1110:	84 2b       	or	r24, r20
    1112:	8c 93       	st	X, r24
    1114:	51 c0       	rjmp	.+162    	; 0x11b8 <DIO_enuSetPinValue+0x1ba>
			break;
		case DIO_PORTC:
			PORTC &= ~(DIO_MASK_BIT<<Copy_u8PinID);
    1116:	a5 e3       	ldi	r26, 0x35	; 53
    1118:	b0 e0       	ldi	r27, 0x00	; 0
    111a:	e5 e3       	ldi	r30, 0x35	; 53
    111c:	f0 e0       	ldi	r31, 0x00	; 0
    111e:	80 81       	ld	r24, Z
    1120:	48 2f       	mov	r20, r24
    1122:	8b 81       	ldd	r24, Y+3	; 0x03
    1124:	28 2f       	mov	r18, r24
    1126:	30 e0       	ldi	r19, 0x00	; 0
    1128:	81 e0       	ldi	r24, 0x01	; 1
    112a:	90 e0       	ldi	r25, 0x00	; 0
    112c:	02 c0       	rjmp	.+4      	; 0x1132 <DIO_enuSetPinValue+0x134>
    112e:	88 0f       	add	r24, r24
    1130:	99 1f       	adc	r25, r25
    1132:	2a 95       	dec	r18
    1134:	e2 f7       	brpl	.-8      	; 0x112e <DIO_enuSetPinValue+0x130>
    1136:	80 95       	com	r24
    1138:	84 23       	and	r24, r20
    113a:	8c 93       	st	X, r24
			PORTC |=  (Copy_u8Value << Copy_u8PinID);
    113c:	a5 e3       	ldi	r26, 0x35	; 53
    113e:	b0 e0       	ldi	r27, 0x00	; 0
    1140:	e5 e3       	ldi	r30, 0x35	; 53
    1142:	f0 e0       	ldi	r31, 0x00	; 0
    1144:	80 81       	ld	r24, Z
    1146:	48 2f       	mov	r20, r24
    1148:	8c 81       	ldd	r24, Y+4	; 0x04
    114a:	28 2f       	mov	r18, r24
    114c:	30 e0       	ldi	r19, 0x00	; 0
    114e:	8b 81       	ldd	r24, Y+3	; 0x03
    1150:	88 2f       	mov	r24, r24
    1152:	90 e0       	ldi	r25, 0x00	; 0
    1154:	b9 01       	movw	r22, r18
    1156:	02 c0       	rjmp	.+4      	; 0x115c <DIO_enuSetPinValue+0x15e>
    1158:	66 0f       	add	r22, r22
    115a:	77 1f       	adc	r23, r23
    115c:	8a 95       	dec	r24
    115e:	e2 f7       	brpl	.-8      	; 0x1158 <DIO_enuSetPinValue+0x15a>
    1160:	cb 01       	movw	r24, r22
    1162:	84 2b       	or	r24, r20
    1164:	8c 93       	st	X, r24
    1166:	28 c0       	rjmp	.+80     	; 0x11b8 <DIO_enuSetPinValue+0x1ba>
			break;
		case DIO_PORTD:
			PORTD &= ~(DIO_MASK_BIT<<Copy_u8PinID);
    1168:	a2 e3       	ldi	r26, 0x32	; 50
    116a:	b0 e0       	ldi	r27, 0x00	; 0
    116c:	e2 e3       	ldi	r30, 0x32	; 50
    116e:	f0 e0       	ldi	r31, 0x00	; 0
    1170:	80 81       	ld	r24, Z
    1172:	48 2f       	mov	r20, r24
    1174:	8b 81       	ldd	r24, Y+3	; 0x03
    1176:	28 2f       	mov	r18, r24
    1178:	30 e0       	ldi	r19, 0x00	; 0
    117a:	81 e0       	ldi	r24, 0x01	; 1
    117c:	90 e0       	ldi	r25, 0x00	; 0
    117e:	02 c0       	rjmp	.+4      	; 0x1184 <DIO_enuSetPinValue+0x186>
    1180:	88 0f       	add	r24, r24
    1182:	99 1f       	adc	r25, r25
    1184:	2a 95       	dec	r18
    1186:	e2 f7       	brpl	.-8      	; 0x1180 <DIO_enuSetPinValue+0x182>
    1188:	80 95       	com	r24
    118a:	84 23       	and	r24, r20
    118c:	8c 93       	st	X, r24
			PORTD |=  (Copy_u8Value << Copy_u8PinID);
    118e:	a2 e3       	ldi	r26, 0x32	; 50
    1190:	b0 e0       	ldi	r27, 0x00	; 0
    1192:	e2 e3       	ldi	r30, 0x32	; 50
    1194:	f0 e0       	ldi	r31, 0x00	; 0
    1196:	80 81       	ld	r24, Z
    1198:	48 2f       	mov	r20, r24
    119a:	8c 81       	ldd	r24, Y+4	; 0x04
    119c:	28 2f       	mov	r18, r24
    119e:	30 e0       	ldi	r19, 0x00	; 0
    11a0:	8b 81       	ldd	r24, Y+3	; 0x03
    11a2:	88 2f       	mov	r24, r24
    11a4:	90 e0       	ldi	r25, 0x00	; 0
    11a6:	b9 01       	movw	r22, r18
    11a8:	02 c0       	rjmp	.+4      	; 0x11ae <DIO_enuSetPinValue+0x1b0>
    11aa:	66 0f       	add	r22, r22
    11ac:	77 1f       	adc	r23, r23
    11ae:	8a 95       	dec	r24
    11b0:	e2 f7       	brpl	.-8      	; 0x11aa <DIO_enuSetPinValue+0x1ac>
    11b2:	cb 01       	movw	r24, r22
    11b4:	84 2b       	or	r24, r20
    11b6:	8c 93       	st	X, r24
			break;
		}
		Local_enuErrorstate = ES_OK;
    11b8:	81 e0       	ldi	r24, 0x01	; 1
    11ba:	89 83       	std	Y+1, r24	; 0x01
    11bc:	02 c0       	rjmp	.+4      	; 0x11c2 <DIO_enuSetPinValue+0x1c4>
	}
	else
	{
		Local_enuErrorstate = ES_OUT_OF_RANGE;
    11be:	83 e0       	ldi	r24, 0x03	; 3
    11c0:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_enuErrorstate;
    11c2:	89 81       	ldd	r24, Y+1	; 0x01
}
    11c4:	26 96       	adiw	r28, 0x06	; 6
    11c6:	0f b6       	in	r0, 0x3f	; 63
    11c8:	f8 94       	cli
    11ca:	de bf       	out	0x3e, r29	; 62
    11cc:	0f be       	out	0x3f, r0	; 63
    11ce:	cd bf       	out	0x3d, r28	; 61
    11d0:	cf 91       	pop	r28
    11d2:	df 91       	pop	r29
    11d4:	08 95       	ret

000011d6 <DIO_enuTogPin>:

ES_t DIO_enuTogPin(u8 Copy_u8PortID, u8 Copy_u8PinID )
{
    11d6:	df 93       	push	r29
    11d8:	cf 93       	push	r28
    11da:	00 d0       	rcall	.+0      	; 0x11dc <DIO_enuTogPin+0x6>
    11dc:	00 d0       	rcall	.+0      	; 0x11de <DIO_enuTogPin+0x8>
    11de:	0f 92       	push	r0
    11e0:	cd b7       	in	r28, 0x3d	; 61
    11e2:	de b7       	in	r29, 0x3e	; 62
    11e4:	8a 83       	std	Y+2, r24	; 0x02
    11e6:	6b 83       	std	Y+3, r22	; 0x03
	ES_t Local_enuErrorstate = ES_NOK;
    11e8:	19 82       	std	Y+1, r1	; 0x01

	if (Copy_u8PortID <= DIO_PORTD &&
    11ea:	8a 81       	ldd	r24, Y+2	; 0x02
    11ec:	84 30       	cpi	r24, 0x04	; 4
    11ee:	08 f0       	brcs	.+2      	; 0x11f2 <DIO_enuTogPin+0x1c>
    11f0:	75 c0       	rjmp	.+234    	; 0x12dc <DIO_enuTogPin+0x106>
    11f2:	8b 81       	ldd	r24, Y+3	; 0x03
    11f4:	88 30       	cpi	r24, 0x08	; 8
    11f6:	08 f0       	brcs	.+2      	; 0x11fa <DIO_enuTogPin+0x24>
    11f8:	71 c0       	rjmp	.+226    	; 0x12dc <DIO_enuTogPin+0x106>
			Copy_u8PinID <= DIO_PIN7)
	{
		switch (Copy_u8PortID)
    11fa:	8a 81       	ldd	r24, Y+2	; 0x02
    11fc:	28 2f       	mov	r18, r24
    11fe:	30 e0       	ldi	r19, 0x00	; 0
    1200:	3d 83       	std	Y+5, r19	; 0x05
    1202:	2c 83       	std	Y+4, r18	; 0x04
    1204:	8c 81       	ldd	r24, Y+4	; 0x04
    1206:	9d 81       	ldd	r25, Y+5	; 0x05
    1208:	81 30       	cpi	r24, 0x01	; 1
    120a:	91 05       	cpc	r25, r1
    120c:	49 f1       	breq	.+82     	; 0x1260 <DIO_enuTogPin+0x8a>
    120e:	2c 81       	ldd	r18, Y+4	; 0x04
    1210:	3d 81       	ldd	r19, Y+5	; 0x05
    1212:	22 30       	cpi	r18, 0x02	; 2
    1214:	31 05       	cpc	r19, r1
    1216:	2c f4       	brge	.+10     	; 0x1222 <DIO_enuTogPin+0x4c>
    1218:	8c 81       	ldd	r24, Y+4	; 0x04
    121a:	9d 81       	ldd	r25, Y+5	; 0x05
    121c:	00 97       	sbiw	r24, 0x00	; 0
    121e:	61 f0       	breq	.+24     	; 0x1238 <DIO_enuTogPin+0x62>
    1220:	5a c0       	rjmp	.+180    	; 0x12d6 <DIO_enuTogPin+0x100>
    1222:	2c 81       	ldd	r18, Y+4	; 0x04
    1224:	3d 81       	ldd	r19, Y+5	; 0x05
    1226:	22 30       	cpi	r18, 0x02	; 2
    1228:	31 05       	cpc	r19, r1
    122a:	71 f1       	breq	.+92     	; 0x1288 <DIO_enuTogPin+0xb2>
    122c:	8c 81       	ldd	r24, Y+4	; 0x04
    122e:	9d 81       	ldd	r25, Y+5	; 0x05
    1230:	83 30       	cpi	r24, 0x03	; 3
    1232:	91 05       	cpc	r25, r1
    1234:	e9 f1       	breq	.+122    	; 0x12b0 <DIO_enuTogPin+0xda>
    1236:	4f c0       	rjmp	.+158    	; 0x12d6 <DIO_enuTogPin+0x100>
		{
		case DIO_PORTA:
			PORTA ^= (DIO_MASK_BIT<<Copy_u8PinID);
    1238:	ab e3       	ldi	r26, 0x3B	; 59
    123a:	b0 e0       	ldi	r27, 0x00	; 0
    123c:	eb e3       	ldi	r30, 0x3B	; 59
    123e:	f0 e0       	ldi	r31, 0x00	; 0
    1240:	80 81       	ld	r24, Z
    1242:	48 2f       	mov	r20, r24
    1244:	8b 81       	ldd	r24, Y+3	; 0x03
    1246:	28 2f       	mov	r18, r24
    1248:	30 e0       	ldi	r19, 0x00	; 0
    124a:	81 e0       	ldi	r24, 0x01	; 1
    124c:	90 e0       	ldi	r25, 0x00	; 0
    124e:	02 2e       	mov	r0, r18
    1250:	02 c0       	rjmp	.+4      	; 0x1256 <DIO_enuTogPin+0x80>
    1252:	88 0f       	add	r24, r24
    1254:	99 1f       	adc	r25, r25
    1256:	0a 94       	dec	r0
    1258:	e2 f7       	brpl	.-8      	; 0x1252 <DIO_enuTogPin+0x7c>
    125a:	84 27       	eor	r24, r20
    125c:	8c 93       	st	X, r24
    125e:	3b c0       	rjmp	.+118    	; 0x12d6 <DIO_enuTogPin+0x100>
			break;
		case DIO_PORTB:
			PORTB ^= (DIO_MASK_BIT<<Copy_u8PinID);
    1260:	a8 e3       	ldi	r26, 0x38	; 56
    1262:	b0 e0       	ldi	r27, 0x00	; 0
    1264:	e8 e3       	ldi	r30, 0x38	; 56
    1266:	f0 e0       	ldi	r31, 0x00	; 0
    1268:	80 81       	ld	r24, Z
    126a:	48 2f       	mov	r20, r24
    126c:	8b 81       	ldd	r24, Y+3	; 0x03
    126e:	28 2f       	mov	r18, r24
    1270:	30 e0       	ldi	r19, 0x00	; 0
    1272:	81 e0       	ldi	r24, 0x01	; 1
    1274:	90 e0       	ldi	r25, 0x00	; 0
    1276:	02 2e       	mov	r0, r18
    1278:	02 c0       	rjmp	.+4      	; 0x127e <DIO_enuTogPin+0xa8>
    127a:	88 0f       	add	r24, r24
    127c:	99 1f       	adc	r25, r25
    127e:	0a 94       	dec	r0
    1280:	e2 f7       	brpl	.-8      	; 0x127a <DIO_enuTogPin+0xa4>
    1282:	84 27       	eor	r24, r20
    1284:	8c 93       	st	X, r24
    1286:	27 c0       	rjmp	.+78     	; 0x12d6 <DIO_enuTogPin+0x100>
			break;
		case DIO_PORTC:
			PORTC ^= (DIO_MASK_BIT<<Copy_u8PinID);
    1288:	a5 e3       	ldi	r26, 0x35	; 53
    128a:	b0 e0       	ldi	r27, 0x00	; 0
    128c:	e5 e3       	ldi	r30, 0x35	; 53
    128e:	f0 e0       	ldi	r31, 0x00	; 0
    1290:	80 81       	ld	r24, Z
    1292:	48 2f       	mov	r20, r24
    1294:	8b 81       	ldd	r24, Y+3	; 0x03
    1296:	28 2f       	mov	r18, r24
    1298:	30 e0       	ldi	r19, 0x00	; 0
    129a:	81 e0       	ldi	r24, 0x01	; 1
    129c:	90 e0       	ldi	r25, 0x00	; 0
    129e:	02 2e       	mov	r0, r18
    12a0:	02 c0       	rjmp	.+4      	; 0x12a6 <DIO_enuTogPin+0xd0>
    12a2:	88 0f       	add	r24, r24
    12a4:	99 1f       	adc	r25, r25
    12a6:	0a 94       	dec	r0
    12a8:	e2 f7       	brpl	.-8      	; 0x12a2 <DIO_enuTogPin+0xcc>
    12aa:	84 27       	eor	r24, r20
    12ac:	8c 93       	st	X, r24
    12ae:	13 c0       	rjmp	.+38     	; 0x12d6 <DIO_enuTogPin+0x100>
			break;
		case DIO_PORTD:
			PORTD ^= (DIO_MASK_BIT<<Copy_u8PinID);
    12b0:	a2 e3       	ldi	r26, 0x32	; 50
    12b2:	b0 e0       	ldi	r27, 0x00	; 0
    12b4:	e2 e3       	ldi	r30, 0x32	; 50
    12b6:	f0 e0       	ldi	r31, 0x00	; 0
    12b8:	80 81       	ld	r24, Z
    12ba:	48 2f       	mov	r20, r24
    12bc:	8b 81       	ldd	r24, Y+3	; 0x03
    12be:	28 2f       	mov	r18, r24
    12c0:	30 e0       	ldi	r19, 0x00	; 0
    12c2:	81 e0       	ldi	r24, 0x01	; 1
    12c4:	90 e0       	ldi	r25, 0x00	; 0
    12c6:	02 2e       	mov	r0, r18
    12c8:	02 c0       	rjmp	.+4      	; 0x12ce <DIO_enuTogPin+0xf8>
    12ca:	88 0f       	add	r24, r24
    12cc:	99 1f       	adc	r25, r25
    12ce:	0a 94       	dec	r0
    12d0:	e2 f7       	brpl	.-8      	; 0x12ca <DIO_enuTogPin+0xf4>
    12d2:	84 27       	eor	r24, r20
    12d4:	8c 93       	st	X, r24
			break;
		}
		Local_enuErrorstate = ES_OK;
    12d6:	81 e0       	ldi	r24, 0x01	; 1
    12d8:	89 83       	std	Y+1, r24	; 0x01
    12da:	02 c0       	rjmp	.+4      	; 0x12e0 <DIO_enuTogPin+0x10a>
	}
	else
	{
		Local_enuErrorstate = ES_OUT_OF_RANGE;
    12dc:	83 e0       	ldi	r24, 0x03	; 3
    12de:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_enuErrorstate;
    12e0:	89 81       	ldd	r24, Y+1	; 0x01
}
    12e2:	0f 90       	pop	r0
    12e4:	0f 90       	pop	r0
    12e6:	0f 90       	pop	r0
    12e8:	0f 90       	pop	r0
    12ea:	0f 90       	pop	r0
    12ec:	cf 91       	pop	r28
    12ee:	df 91       	pop	r29
    12f0:	08 95       	ret

000012f2 <DIO_enuGetPinValue>:

ES_t DIO_enuGetPinValue(u8 Copy_u8PortID ,u8 Copy_u8PinID , u8 * Copy_pu8Value)
{
    12f2:	df 93       	push	r29
    12f4:	cf 93       	push	r28
    12f6:	cd b7       	in	r28, 0x3d	; 61
    12f8:	de b7       	in	r29, 0x3e	; 62
    12fa:	27 97       	sbiw	r28, 0x07	; 7
    12fc:	0f b6       	in	r0, 0x3f	; 63
    12fe:	f8 94       	cli
    1300:	de bf       	out	0x3e, r29	; 62
    1302:	0f be       	out	0x3f, r0	; 63
    1304:	cd bf       	out	0x3d, r28	; 61
    1306:	8a 83       	std	Y+2, r24	; 0x02
    1308:	6b 83       	std	Y+3, r22	; 0x03
    130a:	5d 83       	std	Y+5, r21	; 0x05
    130c:	4c 83       	std	Y+4, r20	; 0x04
	ES_t Local_enuErrorstate = ES_NOK;
    130e:	19 82       	std	Y+1, r1	; 0x01

	if (Copy_pu8Value != NULL)
    1310:	8c 81       	ldd	r24, Y+4	; 0x04
    1312:	9d 81       	ldd	r25, Y+5	; 0x05
    1314:	00 97       	sbiw	r24, 0x00	; 0
    1316:	09 f4       	brne	.+2      	; 0x131a <DIO_enuGetPinValue+0x28>
    1318:	7e c0       	rjmp	.+252    	; 0x1416 <DIO_enuGetPinValue+0x124>
	{
		if (Copy_u8PortID <= DIO_PORTD &&
    131a:	8a 81       	ldd	r24, Y+2	; 0x02
    131c:	84 30       	cpi	r24, 0x04	; 4
    131e:	08 f0       	brcs	.+2      	; 0x1322 <DIO_enuGetPinValue+0x30>
    1320:	77 c0       	rjmp	.+238    	; 0x1410 <DIO_enuGetPinValue+0x11e>
    1322:	8b 81       	ldd	r24, Y+3	; 0x03
    1324:	88 30       	cpi	r24, 0x08	; 8
    1326:	08 f0       	brcs	.+2      	; 0x132a <DIO_enuGetPinValue+0x38>
    1328:	73 c0       	rjmp	.+230    	; 0x1410 <DIO_enuGetPinValue+0x11e>
				Copy_u8PinID <= DIO_PIN7)
		{
			switch (Copy_u8PortID)
    132a:	8a 81       	ldd	r24, Y+2	; 0x02
    132c:	28 2f       	mov	r18, r24
    132e:	30 e0       	ldi	r19, 0x00	; 0
    1330:	3f 83       	std	Y+7, r19	; 0x07
    1332:	2e 83       	std	Y+6, r18	; 0x06
    1334:	4e 81       	ldd	r20, Y+6	; 0x06
    1336:	5f 81       	ldd	r21, Y+7	; 0x07
    1338:	41 30       	cpi	r20, 0x01	; 1
    133a:	51 05       	cpc	r21, r1
    133c:	59 f1       	breq	.+86     	; 0x1394 <DIO_enuGetPinValue+0xa2>
    133e:	8e 81       	ldd	r24, Y+6	; 0x06
    1340:	9f 81       	ldd	r25, Y+7	; 0x07
    1342:	82 30       	cpi	r24, 0x02	; 2
    1344:	91 05       	cpc	r25, r1
    1346:	34 f4       	brge	.+12     	; 0x1354 <DIO_enuGetPinValue+0x62>
    1348:	2e 81       	ldd	r18, Y+6	; 0x06
    134a:	3f 81       	ldd	r19, Y+7	; 0x07
    134c:	21 15       	cp	r18, r1
    134e:	31 05       	cpc	r19, r1
    1350:	69 f0       	breq	.+26     	; 0x136c <DIO_enuGetPinValue+0x7a>
    1352:	5b c0       	rjmp	.+182    	; 0x140a <DIO_enuGetPinValue+0x118>
    1354:	4e 81       	ldd	r20, Y+6	; 0x06
    1356:	5f 81       	ldd	r21, Y+7	; 0x07
    1358:	42 30       	cpi	r20, 0x02	; 2
    135a:	51 05       	cpc	r21, r1
    135c:	79 f1       	breq	.+94     	; 0x13bc <DIO_enuGetPinValue+0xca>
    135e:	8e 81       	ldd	r24, Y+6	; 0x06
    1360:	9f 81       	ldd	r25, Y+7	; 0x07
    1362:	83 30       	cpi	r24, 0x03	; 3
    1364:	91 05       	cpc	r25, r1
    1366:	09 f4       	brne	.+2      	; 0x136a <DIO_enuGetPinValue+0x78>
    1368:	3d c0       	rjmp	.+122    	; 0x13e4 <DIO_enuGetPinValue+0xf2>
    136a:	4f c0       	rjmp	.+158    	; 0x140a <DIO_enuGetPinValue+0x118>
			{
			case DIO_PORTA:
				*Copy_pu8Value = ((PINA>>Copy_u8PinID) &DIO_MASK_BIT);
    136c:	e9 e3       	ldi	r30, 0x39	; 57
    136e:	f0 e0       	ldi	r31, 0x00	; 0
    1370:	80 81       	ld	r24, Z
    1372:	28 2f       	mov	r18, r24
    1374:	30 e0       	ldi	r19, 0x00	; 0
    1376:	8b 81       	ldd	r24, Y+3	; 0x03
    1378:	88 2f       	mov	r24, r24
    137a:	90 e0       	ldi	r25, 0x00	; 0
    137c:	a9 01       	movw	r20, r18
    137e:	02 c0       	rjmp	.+4      	; 0x1384 <DIO_enuGetPinValue+0x92>
    1380:	55 95       	asr	r21
    1382:	47 95       	ror	r20
    1384:	8a 95       	dec	r24
    1386:	e2 f7       	brpl	.-8      	; 0x1380 <DIO_enuGetPinValue+0x8e>
    1388:	ca 01       	movw	r24, r20
    138a:	81 70       	andi	r24, 0x01	; 1
    138c:	ec 81       	ldd	r30, Y+4	; 0x04
    138e:	fd 81       	ldd	r31, Y+5	; 0x05
    1390:	80 83       	st	Z, r24
    1392:	3b c0       	rjmp	.+118    	; 0x140a <DIO_enuGetPinValue+0x118>
				break;
			case DIO_PORTB:
				*Copy_pu8Value = ((PINB>>Copy_u8PinID) &DIO_MASK_BIT);
    1394:	e6 e3       	ldi	r30, 0x36	; 54
    1396:	f0 e0       	ldi	r31, 0x00	; 0
    1398:	80 81       	ld	r24, Z
    139a:	28 2f       	mov	r18, r24
    139c:	30 e0       	ldi	r19, 0x00	; 0
    139e:	8b 81       	ldd	r24, Y+3	; 0x03
    13a0:	88 2f       	mov	r24, r24
    13a2:	90 e0       	ldi	r25, 0x00	; 0
    13a4:	a9 01       	movw	r20, r18
    13a6:	02 c0       	rjmp	.+4      	; 0x13ac <DIO_enuGetPinValue+0xba>
    13a8:	55 95       	asr	r21
    13aa:	47 95       	ror	r20
    13ac:	8a 95       	dec	r24
    13ae:	e2 f7       	brpl	.-8      	; 0x13a8 <DIO_enuGetPinValue+0xb6>
    13b0:	ca 01       	movw	r24, r20
    13b2:	81 70       	andi	r24, 0x01	; 1
    13b4:	ec 81       	ldd	r30, Y+4	; 0x04
    13b6:	fd 81       	ldd	r31, Y+5	; 0x05
    13b8:	80 83       	st	Z, r24
    13ba:	27 c0       	rjmp	.+78     	; 0x140a <DIO_enuGetPinValue+0x118>
				break;
			case DIO_PORTC:
				*Copy_pu8Value = ((PINC>>Copy_u8PinID) &DIO_MASK_BIT);
    13bc:	e3 e3       	ldi	r30, 0x33	; 51
    13be:	f0 e0       	ldi	r31, 0x00	; 0
    13c0:	80 81       	ld	r24, Z
    13c2:	28 2f       	mov	r18, r24
    13c4:	30 e0       	ldi	r19, 0x00	; 0
    13c6:	8b 81       	ldd	r24, Y+3	; 0x03
    13c8:	88 2f       	mov	r24, r24
    13ca:	90 e0       	ldi	r25, 0x00	; 0
    13cc:	a9 01       	movw	r20, r18
    13ce:	02 c0       	rjmp	.+4      	; 0x13d4 <DIO_enuGetPinValue+0xe2>
    13d0:	55 95       	asr	r21
    13d2:	47 95       	ror	r20
    13d4:	8a 95       	dec	r24
    13d6:	e2 f7       	brpl	.-8      	; 0x13d0 <DIO_enuGetPinValue+0xde>
    13d8:	ca 01       	movw	r24, r20
    13da:	81 70       	andi	r24, 0x01	; 1
    13dc:	ec 81       	ldd	r30, Y+4	; 0x04
    13de:	fd 81       	ldd	r31, Y+5	; 0x05
    13e0:	80 83       	st	Z, r24
    13e2:	13 c0       	rjmp	.+38     	; 0x140a <DIO_enuGetPinValue+0x118>
				break;
			case DIO_PORTD:
				*Copy_pu8Value = ((PIND>>Copy_u8PinID) &DIO_MASK_BIT);
    13e4:	e0 e3       	ldi	r30, 0x30	; 48
    13e6:	f0 e0       	ldi	r31, 0x00	; 0
    13e8:	80 81       	ld	r24, Z
    13ea:	28 2f       	mov	r18, r24
    13ec:	30 e0       	ldi	r19, 0x00	; 0
    13ee:	8b 81       	ldd	r24, Y+3	; 0x03
    13f0:	88 2f       	mov	r24, r24
    13f2:	90 e0       	ldi	r25, 0x00	; 0
    13f4:	a9 01       	movw	r20, r18
    13f6:	02 c0       	rjmp	.+4      	; 0x13fc <DIO_enuGetPinValue+0x10a>
    13f8:	55 95       	asr	r21
    13fa:	47 95       	ror	r20
    13fc:	8a 95       	dec	r24
    13fe:	e2 f7       	brpl	.-8      	; 0x13f8 <DIO_enuGetPinValue+0x106>
    1400:	ca 01       	movw	r24, r20
    1402:	81 70       	andi	r24, 0x01	; 1
    1404:	ec 81       	ldd	r30, Y+4	; 0x04
    1406:	fd 81       	ldd	r31, Y+5	; 0x05
    1408:	80 83       	st	Z, r24
				break;
			}
			Local_enuErrorstate = ES_OK;
    140a:	81 e0       	ldi	r24, 0x01	; 1
    140c:	89 83       	std	Y+1, r24	; 0x01
    140e:	05 c0       	rjmp	.+10     	; 0x141a <DIO_enuGetPinValue+0x128>
		}
		else
		{
			Local_enuErrorstate = ES_OUT_OF_RANGE;
    1410:	83 e0       	ldi	r24, 0x03	; 3
    1412:	89 83       	std	Y+1, r24	; 0x01
    1414:	02 c0       	rjmp	.+4      	; 0x141a <DIO_enuGetPinValue+0x128>
		}
	}
	else
	{
		Local_enuErrorstate = ES_NULL_POINTER;
    1416:	82 e0       	ldi	r24, 0x02	; 2
    1418:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_enuErrorstate;
    141a:	89 81       	ldd	r24, Y+1	; 0x01
}
    141c:	27 96       	adiw	r28, 0x07	; 7
    141e:	0f b6       	in	r0, 0x3f	; 63
    1420:	f8 94       	cli
    1422:	de bf       	out	0x3e, r29	; 62
    1424:	0f be       	out	0x3f, r0	; 63
    1426:	cd bf       	out	0x3d, r28	; 61
    1428:	cf 91       	pop	r28
    142a:	df 91       	pop	r29
    142c:	08 95       	ret

0000142e <EXINT_Init>:
void (*CallbackPtr_1)(void)=NULL;
void (*CallbackPtr_2)(void)=NULL;


ES_t EXINT_Init(void)
{
    142e:	df 93       	push	r29
    1430:	cf 93       	push	r28
    1432:	0f 92       	push	r0
    1434:	cd b7       	in	r28, 0x3d	; 61
    1436:	de b7       	in	r29, 0x3e	; 62
	ES_t Local_enuErrorState = ES_NOK;
    1438:	19 82       	std	Y+1, r1	; 0x01
		MCUCR &=~(15<<0); //clear bit 0,1,2,3
    143a:	a5 e5       	ldi	r26, 0x55	; 85
    143c:	b0 e0       	ldi	r27, 0x00	; 0
    143e:	e5 e5       	ldi	r30, 0x55	; 85
    1440:	f0 e0       	ldi	r31, 0x00	; 0
    1442:	80 81       	ld	r24, Z
    1444:	80 7f       	andi	r24, 0xF0	; 240
    1446:	8c 93       	st	X, r24

		#if  EX_INT0_MODE == FALLING_EDGE
		MCUCR|=FALLING_EDGE;
    1448:	a5 e5       	ldi	r26, 0x55	; 85
    144a:	b0 e0       	ldi	r27, 0x00	; 0
    144c:	e5 e5       	ldi	r30, 0x55	; 85
    144e:	f0 e0       	ldi	r31, 0x00	; 0
    1450:	80 81       	ld	r24, Z
    1452:	82 60       	ori	r24, 0x02	; 2
    1454:	8c 93       	st	X, r24
		#elif   EX_INT0_MODE == ANY_LOGIC
		MCUCR|=ANY_LOGIC;
		#endif

		#if  EX_INT1_MODE == FALLING_EDGE
		MCUCR|=(FALLING_EDGE<<2);
    1456:	a5 e5       	ldi	r26, 0x55	; 85
    1458:	b0 e0       	ldi	r27, 0x00	; 0
    145a:	e5 e5       	ldi	r30, 0x55	; 85
    145c:	f0 e0       	ldi	r31, 0x00	; 0
    145e:	80 81       	ld	r24, Z
    1460:	88 60       	ori	r24, 0x08	; 8
    1462:	8c 93       	st	X, r24
		#elif   EX_INT1_MODE == ANY_LOGIC
		MCUCR|=(ANY_LOGIC<<2);
		#endif

		#if  EX_INT2_MODE == FALLING_EDGE
		MCUCSR &= ~(1<<ISC2);
    1464:	a4 e5       	ldi	r26, 0x54	; 84
    1466:	b0 e0       	ldi	r27, 0x00	; 0
    1468:	e4 e5       	ldi	r30, 0x54	; 84
    146a:	f0 e0       	ldi	r31, 0x00	; 0
    146c:	80 81       	ld	r24, Z
    146e:	8f 7b       	andi	r24, 0xBF	; 191
    1470:	8c 93       	st	X, r24
		MCUCSR |= (1<<ISC2);
		#endif


		#if EX_INT0_STATE == ACTIVE
		GICR |=(1<<6);
    1472:	ab e5       	ldi	r26, 0x5B	; 91
    1474:	b0 e0       	ldi	r27, 0x00	; 0
    1476:	eb e5       	ldi	r30, 0x5B	; 91
    1478:	f0 e0       	ldi	r31, 0x00	; 0
    147a:	80 81       	ld	r24, Z
    147c:	80 64       	ori	r24, 0x40	; 64
    147e:	8c 93       	st	X, r24


		#if EX_INT1_STATE == ACTIVE
		GICR |=(1<<7);
		#elif  EX_INT1_STATE == DEACTIVE
		GICR &=~(1<<7);
    1480:	ab e5       	ldi	r26, 0x5B	; 91
    1482:	b0 e0       	ldi	r27, 0x00	; 0
    1484:	eb e5       	ldi	r30, 0x5B	; 91
    1486:	f0 e0       	ldi	r31, 0x00	; 0
    1488:	80 81       	ld	r24, Z
    148a:	8f 77       	andi	r24, 0x7F	; 127
    148c:	8c 93       	st	X, r24
		#endif

		#if EX_INT2_STATE == ACTIVE
		GICR |=(1<<5);
		#elif  EX_INT2_STATE == DEACTIVE
		GICR &=~(1<<5);
    148e:	ab e5       	ldi	r26, 0x5B	; 91
    1490:	b0 e0       	ldi	r27, 0x00	; 0
    1492:	eb e5       	ldi	r30, 0x5B	; 91
    1494:	f0 e0       	ldi	r31, 0x00	; 0
    1496:	80 81       	ld	r24, Z
    1498:	8f 7d       	andi	r24, 0xDF	; 223
    149a:	8c 93       	st	X, r24
		#endif

		GIFR|=(7<<5); // clear bits 5,6,7 to disable interrupt flags
    149c:	aa e5       	ldi	r26, 0x5A	; 90
    149e:	b0 e0       	ldi	r27, 0x00	; 0
    14a0:	ea e5       	ldi	r30, 0x5A	; 90
    14a2:	f0 e0       	ldi	r31, 0x00	; 0
    14a4:	80 81       	ld	r24, Z
    14a6:	80 6e       	ori	r24, 0xE0	; 224
    14a8:	8c 93       	st	X, r24

	  Local_enuErrorState = ES_OK;
    14aa:	81 e0       	ldi	r24, 0x01	; 1
    14ac:	89 83       	std	Y+1, r24	; 0x01
		return Local_enuErrorState ;
    14ae:	89 81       	ldd	r24, Y+1	; 0x01
}
    14b0:	0f 90       	pop	r0
    14b2:	cf 91       	pop	r28
    14b4:	df 91       	pop	r29
    14b6:	08 95       	ret

000014b8 <EXINT_Enable>:
ES_t EXINT_Enable(u8 EXINT_ID)
{
    14b8:	df 93       	push	r29
    14ba:	cf 93       	push	r28
    14bc:	00 d0       	rcall	.+0      	; 0x14be <EXINT_Enable+0x6>
    14be:	cd b7       	in	r28, 0x3d	; 61
    14c0:	de b7       	in	r29, 0x3e	; 62
    14c2:	8a 83       	std	Y+2, r24	; 0x02
	ES_t Local_enuErrorState = ES_NOK;
    14c4:	19 82       	std	Y+1, r1	; 0x01
	if (EXINT_ID ==0)
    14c6:	8a 81       	ldd	r24, Y+2	; 0x02
    14c8:	88 23       	and	r24, r24
    14ca:	41 f4       	brne	.+16     	; 0x14dc <EXINT_Enable+0x24>
	{
		GICR |= (1<<6);
    14cc:	ab e5       	ldi	r26, 0x5B	; 91
    14ce:	b0 e0       	ldi	r27, 0x00	; 0
    14d0:	eb e5       	ldi	r30, 0x5B	; 91
    14d2:	f0 e0       	ldi	r31, 0x00	; 0
    14d4:	80 81       	ld	r24, Z
    14d6:	80 64       	ori	r24, 0x40	; 64
    14d8:	8c 93       	st	X, r24
    14da:	15 c0       	rjmp	.+42     	; 0x1506 <EXINT_Enable+0x4e>
	}
	else if (EXINT_ID ==1)
    14dc:	8a 81       	ldd	r24, Y+2	; 0x02
    14de:	81 30       	cpi	r24, 0x01	; 1
    14e0:	41 f4       	brne	.+16     	; 0x14f2 <EXINT_Enable+0x3a>
	{
		GICR |= (1<<7);
    14e2:	ab e5       	ldi	r26, 0x5B	; 91
    14e4:	b0 e0       	ldi	r27, 0x00	; 0
    14e6:	eb e5       	ldi	r30, 0x5B	; 91
    14e8:	f0 e0       	ldi	r31, 0x00	; 0
    14ea:	80 81       	ld	r24, Z
    14ec:	80 68       	ori	r24, 0x80	; 128
    14ee:	8c 93       	st	X, r24
    14f0:	0a c0       	rjmp	.+20     	; 0x1506 <EXINT_Enable+0x4e>
	}
	else if (EXINT_ID ==2)
    14f2:	8a 81       	ldd	r24, Y+2	; 0x02
    14f4:	82 30       	cpi	r24, 0x02	; 2
    14f6:	39 f4       	brne	.+14     	; 0x1506 <EXINT_Enable+0x4e>
	{
		GICR |= (1<<5);
    14f8:	ab e5       	ldi	r26, 0x5B	; 91
    14fa:	b0 e0       	ldi	r27, 0x00	; 0
    14fc:	eb e5       	ldi	r30, 0x5B	; 91
    14fe:	f0 e0       	ldi	r31, 0x00	; 0
    1500:	80 81       	ld	r24, Z
    1502:	80 62       	ori	r24, 0x20	; 32
    1504:	8c 93       	st	X, r24
	}
	  Local_enuErrorState = ES_OK;
    1506:	81 e0       	ldi	r24, 0x01	; 1
    1508:	89 83       	std	Y+1, r24	; 0x01
	return Local_enuErrorState ;
    150a:	89 81       	ldd	r24, Y+1	; 0x01
}
    150c:	0f 90       	pop	r0
    150e:	0f 90       	pop	r0
    1510:	cf 91       	pop	r28
    1512:	df 91       	pop	r29
    1514:	08 95       	ret

00001516 <EXINT_Disable>:

ES_t EXINT_Disable(u8 EXINT_ID)
{
    1516:	df 93       	push	r29
    1518:	cf 93       	push	r28
    151a:	00 d0       	rcall	.+0      	; 0x151c <EXINT_Disable+0x6>
    151c:	cd b7       	in	r28, 0x3d	; 61
    151e:	de b7       	in	r29, 0x3e	; 62
    1520:	8a 83       	std	Y+2, r24	; 0x02
	ES_t Local_enuErrorState = ES_NOK;
    1522:	19 82       	std	Y+1, r1	; 0x01
	if (EXINT_ID ==0)
    1524:	8a 81       	ldd	r24, Y+2	; 0x02
    1526:	88 23       	and	r24, r24
    1528:	41 f4       	brne	.+16     	; 0x153a <EXINT_Disable+0x24>
	{
		GICR &=~(1<<6);
    152a:	ab e5       	ldi	r26, 0x5B	; 91
    152c:	b0 e0       	ldi	r27, 0x00	; 0
    152e:	eb e5       	ldi	r30, 0x5B	; 91
    1530:	f0 e0       	ldi	r31, 0x00	; 0
    1532:	80 81       	ld	r24, Z
    1534:	8f 7b       	andi	r24, 0xBF	; 191
    1536:	8c 93       	st	X, r24
    1538:	15 c0       	rjmp	.+42     	; 0x1564 <EXINT_Disable+0x4e>
	}
	else if (EXINT_ID==1)
    153a:	8a 81       	ldd	r24, Y+2	; 0x02
    153c:	81 30       	cpi	r24, 0x01	; 1
    153e:	41 f4       	brne	.+16     	; 0x1550 <EXINT_Disable+0x3a>
	{
		GICR &=~(1<<7);
    1540:	ab e5       	ldi	r26, 0x5B	; 91
    1542:	b0 e0       	ldi	r27, 0x00	; 0
    1544:	eb e5       	ldi	r30, 0x5B	; 91
    1546:	f0 e0       	ldi	r31, 0x00	; 0
    1548:	80 81       	ld	r24, Z
    154a:	8f 77       	andi	r24, 0x7F	; 127
    154c:	8c 93       	st	X, r24
    154e:	0a c0       	rjmp	.+20     	; 0x1564 <EXINT_Disable+0x4e>
	}
	else if (EXINT_ID ==2)
    1550:	8a 81       	ldd	r24, Y+2	; 0x02
    1552:	82 30       	cpi	r24, 0x02	; 2
    1554:	39 f4       	brne	.+14     	; 0x1564 <EXINT_Disable+0x4e>
	{
		GICR &=~(1<<5);
    1556:	ab e5       	ldi	r26, 0x5B	; 91
    1558:	b0 e0       	ldi	r27, 0x00	; 0
    155a:	eb e5       	ldi	r30, 0x5B	; 91
    155c:	f0 e0       	ldi	r31, 0x00	; 0
    155e:	80 81       	ld	r24, Z
    1560:	8f 7d       	andi	r24, 0xDF	; 223
    1562:	8c 93       	st	X, r24
	}

	 Local_enuErrorState = ES_OK;
    1564:	81 e0       	ldi	r24, 0x01	; 1
    1566:	89 83       	std	Y+1, r24	; 0x01
	return Local_enuErrorState ;
    1568:	89 81       	ldd	r24, Y+1	; 0x01

}
    156a:	0f 90       	pop	r0
    156c:	0f 90       	pop	r0
    156e:	cf 91       	pop	r28
    1570:	df 91       	pop	r29
    1572:	08 95       	ret

00001574 <EXINTGLOBAL_Enable>:

ES_t EXINTGLOBAL_Enable(void)
{
    1574:	df 93       	push	r29
    1576:	cf 93       	push	r28
    1578:	0f 92       	push	r0
    157a:	cd b7       	in	r28, 0x3d	; 61
    157c:	de b7       	in	r29, 0x3e	; 62
	ES_t Local_enuErrorState = ES_NOK;
    157e:	19 82       	std	Y+1, r1	; 0x01
	SREG |= (1<<7);
    1580:	af e5       	ldi	r26, 0x5F	; 95
    1582:	b0 e0       	ldi	r27, 0x00	; 0
    1584:	ef e5       	ldi	r30, 0x5F	; 95
    1586:	f0 e0       	ldi	r31, 0x00	; 0
    1588:	80 81       	ld	r24, Z
    158a:	80 68       	ori	r24, 0x80	; 128
    158c:	8c 93       	st	X, r24

	 Local_enuErrorState = ES_OK;
    158e:	81 e0       	ldi	r24, 0x01	; 1
    1590:	89 83       	std	Y+1, r24	; 0x01
	return Local_enuErrorState ;
    1592:	89 81       	ldd	r24, Y+1	; 0x01
}
    1594:	0f 90       	pop	r0
    1596:	cf 91       	pop	r28
    1598:	df 91       	pop	r29
    159a:	08 95       	ret

0000159c <EXINTGLOBAL_Disable>:
ES_t EXINTGLOBAL_Disable(void)
{
    159c:	df 93       	push	r29
    159e:	cf 93       	push	r28
    15a0:	0f 92       	push	r0
    15a2:	cd b7       	in	r28, 0x3d	; 61
    15a4:	de b7       	in	r29, 0x3e	; 62
	ES_t Local_enuErrorState = ES_NOK;
    15a6:	19 82       	std	Y+1, r1	; 0x01
	SREG &=~(1<<7);
    15a8:	af e5       	ldi	r26, 0x5F	; 95
    15aa:	b0 e0       	ldi	r27, 0x00	; 0
    15ac:	ef e5       	ldi	r30, 0x5F	; 95
    15ae:	f0 e0       	ldi	r31, 0x00	; 0
    15b0:	80 81       	ld	r24, Z
    15b2:	8f 77       	andi	r24, 0x7F	; 127
    15b4:	8c 93       	st	X, r24
	 Local_enuErrorState = ES_OK;
    15b6:	81 e0       	ldi	r24, 0x01	; 1
    15b8:	89 83       	std	Y+1, r24	; 0x01
	return Local_enuErrorState ;
    15ba:	89 81       	ldd	r24, Y+1	; 0x01
}
    15bc:	0f 90       	pop	r0
    15be:	cf 91       	pop	r28
    15c0:	df 91       	pop	r29
    15c2:	08 95       	ret

000015c4 <EXINT_Callback>:

 ES_t EXINT_Callback(void (*Func_ptr) (void) , u8 EX_INT_ID )
 {
    15c4:	df 93       	push	r29
    15c6:	cf 93       	push	r28
    15c8:	00 d0       	rcall	.+0      	; 0x15ca <EXINT_Callback+0x6>
    15ca:	00 d0       	rcall	.+0      	; 0x15cc <EXINT_Callback+0x8>
    15cc:	00 d0       	rcall	.+0      	; 0x15ce <EXINT_Callback+0xa>
    15ce:	cd b7       	in	r28, 0x3d	; 61
    15d0:	de b7       	in	r29, 0x3e	; 62
    15d2:	9b 83       	std	Y+3, r25	; 0x03
    15d4:	8a 83       	std	Y+2, r24	; 0x02
    15d6:	6c 83       	std	Y+4, r22	; 0x04
	 ES_t Local_enuErrorState = ES_NOK;
    15d8:	19 82       	std	Y+1, r1	; 0x01
	 if(EX_INT_ID < 3)
    15da:	8c 81       	ldd	r24, Y+4	; 0x04
    15dc:	83 30       	cpi	r24, 0x03	; 3
    15de:	48 f5       	brcc	.+82     	; 0x1632 <EXINT_Callback+0x6e>
	 {
	 switch(EX_INT_ID)
    15e0:	8c 81       	ldd	r24, Y+4	; 0x04
    15e2:	28 2f       	mov	r18, r24
    15e4:	30 e0       	ldi	r19, 0x00	; 0
    15e6:	3e 83       	std	Y+6, r19	; 0x06
    15e8:	2d 83       	std	Y+5, r18	; 0x05
    15ea:	8d 81       	ldd	r24, Y+5	; 0x05
    15ec:	9e 81       	ldd	r25, Y+6	; 0x06
    15ee:	81 30       	cpi	r24, 0x01	; 1
    15f0:	91 05       	cpc	r25, r1
    15f2:	81 f0       	breq	.+32     	; 0x1614 <EXINT_Callback+0x50>
    15f4:	2d 81       	ldd	r18, Y+5	; 0x05
    15f6:	3e 81       	ldd	r19, Y+6	; 0x06
    15f8:	22 30       	cpi	r18, 0x02	; 2
    15fa:	31 05       	cpc	r19, r1
    15fc:	91 f0       	breq	.+36     	; 0x1622 <EXINT_Callback+0x5e>
    15fe:	8d 81       	ldd	r24, Y+5	; 0x05
    1600:	9e 81       	ldd	r25, Y+6	; 0x06
    1602:	00 97       	sbiw	r24, 0x00	; 0
    1604:	a1 f4       	brne	.+40     	; 0x162e <EXINT_Callback+0x6a>
	 {
	 case 0:
		   CallbackPtr_0=Func_ptr;
    1606:	8a 81       	ldd	r24, Y+2	; 0x02
    1608:	9b 81       	ldd	r25, Y+3	; 0x03
    160a:	90 93 69 00 	sts	0x0069, r25
    160e:	80 93 68 00 	sts	0x0068, r24
    1612:	0d c0       	rjmp	.+26     	; 0x162e <EXINT_Callback+0x6a>
		    break;
	 case 1:
	 		 CallbackPtr_1=Func_ptr;
    1614:	8a 81       	ldd	r24, Y+2	; 0x02
    1616:	9b 81       	ldd	r25, Y+3	; 0x03
    1618:	90 93 6b 00 	sts	0x006B, r25
    161c:	80 93 6a 00 	sts	0x006A, r24
    1620:	06 c0       	rjmp	.+12     	; 0x162e <EXINT_Callback+0x6a>
	 		 break;
	 case 2:
	 		 CallbackPtr_2=Func_ptr;
    1622:	8a 81       	ldd	r24, Y+2	; 0x02
    1624:	9b 81       	ldd	r25, Y+3	; 0x03
    1626:	90 93 6d 00 	sts	0x006D, r25
    162a:	80 93 6c 00 	sts	0x006C, r24
	 		 break;

	 }
	 Local_enuErrorState = ES_OK;
    162e:	81 e0       	ldi	r24, 0x01	; 1
    1630:	89 83       	std	Y+1, r24	; 0x01
	 }

	 return Local_enuErrorState ;
    1632:	89 81       	ldd	r24, Y+1	; 0x01
 }
    1634:	26 96       	adiw	r28, 0x06	; 6
    1636:	0f b6       	in	r0, 0x3f	; 63
    1638:	f8 94       	cli
    163a:	de bf       	out	0x3e, r29	; 62
    163c:	0f be       	out	0x3f, r0	; 63
    163e:	cd bf       	out	0x3d, r28	; 61
    1640:	cf 91       	pop	r28
    1642:	df 91       	pop	r29
    1644:	08 95       	ret

00001646 <__vector_1>:

 ISR(VECT_INT0)
 {
    1646:	1f 92       	push	r1
    1648:	0f 92       	push	r0
    164a:	0f b6       	in	r0, 0x3f	; 63
    164c:	0f 92       	push	r0
    164e:	11 24       	eor	r1, r1
    1650:	2f 93       	push	r18
    1652:	3f 93       	push	r19
    1654:	4f 93       	push	r20
    1656:	5f 93       	push	r21
    1658:	6f 93       	push	r22
    165a:	7f 93       	push	r23
    165c:	8f 93       	push	r24
    165e:	9f 93       	push	r25
    1660:	af 93       	push	r26
    1662:	bf 93       	push	r27
    1664:	ef 93       	push	r30
    1666:	ff 93       	push	r31
    1668:	df 93       	push	r29
    166a:	cf 93       	push	r28
    166c:	cd b7       	in	r28, 0x3d	; 61
    166e:	de b7       	in	r29, 0x3e	; 62
	 if(  CallbackPtr_0 != NULL)
    1670:	80 91 68 00 	lds	r24, 0x0068
    1674:	90 91 69 00 	lds	r25, 0x0069
    1678:	00 97       	sbiw	r24, 0x00	; 0
    167a:	29 f0       	breq	.+10     	; 0x1686 <__vector_1+0x40>
	    CallbackPtr_0();
    167c:	e0 91 68 00 	lds	r30, 0x0068
    1680:	f0 91 69 00 	lds	r31, 0x0069
    1684:	09 95       	icall
 }
    1686:	cf 91       	pop	r28
    1688:	df 91       	pop	r29
    168a:	ff 91       	pop	r31
    168c:	ef 91       	pop	r30
    168e:	bf 91       	pop	r27
    1690:	af 91       	pop	r26
    1692:	9f 91       	pop	r25
    1694:	8f 91       	pop	r24
    1696:	7f 91       	pop	r23
    1698:	6f 91       	pop	r22
    169a:	5f 91       	pop	r21
    169c:	4f 91       	pop	r20
    169e:	3f 91       	pop	r19
    16a0:	2f 91       	pop	r18
    16a2:	0f 90       	pop	r0
    16a4:	0f be       	out	0x3f, r0	; 63
    16a6:	0f 90       	pop	r0
    16a8:	1f 90       	pop	r1
    16aa:	18 95       	reti

000016ac <__vector_2>:
 ISR(VECT_INT1)
 {
    16ac:	1f 92       	push	r1
    16ae:	0f 92       	push	r0
    16b0:	0f b6       	in	r0, 0x3f	; 63
    16b2:	0f 92       	push	r0
    16b4:	11 24       	eor	r1, r1
    16b6:	2f 93       	push	r18
    16b8:	3f 93       	push	r19
    16ba:	4f 93       	push	r20
    16bc:	5f 93       	push	r21
    16be:	6f 93       	push	r22
    16c0:	7f 93       	push	r23
    16c2:	8f 93       	push	r24
    16c4:	9f 93       	push	r25
    16c6:	af 93       	push	r26
    16c8:	bf 93       	push	r27
    16ca:	ef 93       	push	r30
    16cc:	ff 93       	push	r31
    16ce:	df 93       	push	r29
    16d0:	cf 93       	push	r28
    16d2:	cd b7       	in	r28, 0x3d	; 61
    16d4:	de b7       	in	r29, 0x3e	; 62
	 if(  CallbackPtr_1 != NULL)
    16d6:	80 91 6a 00 	lds	r24, 0x006A
    16da:	90 91 6b 00 	lds	r25, 0x006B
    16de:	00 97       	sbiw	r24, 0x00	; 0
    16e0:	29 f0       	breq	.+10     	; 0x16ec <__vector_2+0x40>
	    CallbackPtr_1();
    16e2:	e0 91 6a 00 	lds	r30, 0x006A
    16e6:	f0 91 6b 00 	lds	r31, 0x006B
    16ea:	09 95       	icall
 }
    16ec:	cf 91       	pop	r28
    16ee:	df 91       	pop	r29
    16f0:	ff 91       	pop	r31
    16f2:	ef 91       	pop	r30
    16f4:	bf 91       	pop	r27
    16f6:	af 91       	pop	r26
    16f8:	9f 91       	pop	r25
    16fa:	8f 91       	pop	r24
    16fc:	7f 91       	pop	r23
    16fe:	6f 91       	pop	r22
    1700:	5f 91       	pop	r21
    1702:	4f 91       	pop	r20
    1704:	3f 91       	pop	r19
    1706:	2f 91       	pop	r18
    1708:	0f 90       	pop	r0
    170a:	0f be       	out	0x3f, r0	; 63
    170c:	0f 90       	pop	r0
    170e:	1f 90       	pop	r1
    1710:	18 95       	reti

00001712 <__vector_3>:
 ISR(VECT_INT2)
 {
    1712:	1f 92       	push	r1
    1714:	0f 92       	push	r0
    1716:	0f b6       	in	r0, 0x3f	; 63
    1718:	0f 92       	push	r0
    171a:	11 24       	eor	r1, r1
    171c:	2f 93       	push	r18
    171e:	3f 93       	push	r19
    1720:	4f 93       	push	r20
    1722:	5f 93       	push	r21
    1724:	6f 93       	push	r22
    1726:	7f 93       	push	r23
    1728:	8f 93       	push	r24
    172a:	9f 93       	push	r25
    172c:	af 93       	push	r26
    172e:	bf 93       	push	r27
    1730:	ef 93       	push	r30
    1732:	ff 93       	push	r31
    1734:	df 93       	push	r29
    1736:	cf 93       	push	r28
    1738:	cd b7       	in	r28, 0x3d	; 61
    173a:	de b7       	in	r29, 0x3e	; 62
	 if(  CallbackPtr_2 != NULL)
    173c:	80 91 6c 00 	lds	r24, 0x006C
    1740:	90 91 6d 00 	lds	r25, 0x006D
    1744:	00 97       	sbiw	r24, 0x00	; 0
    1746:	29 f0       	breq	.+10     	; 0x1752 <__vector_3+0x40>
	    CallbackPtr_2();
    1748:	e0 91 6c 00 	lds	r30, 0x006C
    174c:	f0 91 6d 00 	lds	r31, 0x006D
    1750:	09 95       	icall
 }
    1752:	cf 91       	pop	r28
    1754:	df 91       	pop	r29
    1756:	ff 91       	pop	r31
    1758:	ef 91       	pop	r30
    175a:	bf 91       	pop	r27
    175c:	af 91       	pop	r26
    175e:	9f 91       	pop	r25
    1760:	8f 91       	pop	r24
    1762:	7f 91       	pop	r23
    1764:	6f 91       	pop	r22
    1766:	5f 91       	pop	r21
    1768:	4f 91       	pop	r20
    176a:	3f 91       	pop	r19
    176c:	2f 91       	pop	r18
    176e:	0f 90       	pop	r0
    1770:	0f be       	out	0x3f, r0	; 63
    1772:	0f 90       	pop	r0
    1774:	1f 90       	pop	r1
    1776:	18 95       	reti

00001778 <LCD_enuInit>:
#include "LCD_priv.h"

#include "util/delay.h"

ES_t LCD_enuInit(void)
{
    1778:	df 93       	push	r29
    177a:	cf 93       	push	r28
    177c:	cd b7       	in	r28, 0x3d	; 61
    177e:	de b7       	in	r29, 0x3e	; 62
    1780:	e9 97       	sbiw	r28, 0x39	; 57
    1782:	0f b6       	in	r0, 0x3f	; 63
    1784:	f8 94       	cli
    1786:	de bf       	out	0x3e, r29	; 62
    1788:	0f be       	out	0x3f, r0	; 63
    178a:	cd bf       	out	0x3d, r28	; 61
	ES_t Local_enuErrorState = ES_NOK;
    178c:	19 ae       	std	Y+57, r1	; 0x39

	DIO_enuSetPinDirection(RS_PORT, RS_PIN, DIO_u8OUTPUT);
    178e:	80 e0       	ldi	r24, 0x00	; 0
    1790:	60 e0       	ldi	r22, 0x00	; 0
    1792:	41 e0       	ldi	r20, 0x01	; 1
    1794:	0e 94 13 07 	call	0xe26	; 0xe26 <DIO_enuSetPinDirection>
	DIO_enuSetPinDirection(RW_PORT, RW_PIN, DIO_u8OUTPUT);
    1798:	80 e0       	ldi	r24, 0x00	; 0
    179a:	61 e0       	ldi	r22, 0x01	; 1
    179c:	41 e0       	ldi	r20, 0x01	; 1
    179e:	0e 94 13 07 	call	0xe26	; 0xe26 <DIO_enuSetPinDirection>
	DIO_enuSetPinDirection(EN_PORT, EN_PIN, DIO_u8OUTPUT);
    17a2:	80 e0       	ldi	r24, 0x00	; 0
    17a4:	62 e0       	ldi	r22, 0x02	; 2
    17a6:	41 e0       	ldi	r20, 0x01	; 1
    17a8:	0e 94 13 07 	call	0xe26	; 0xe26 <DIO_enuSetPinDirection>

	DIO_enuSetPinDirection(D7_PORT, D7_PIN, DIO_u8OUTPUT);
    17ac:	81 e0       	ldi	r24, 0x01	; 1
    17ae:	60 e0       	ldi	r22, 0x00	; 0
    17b0:	41 e0       	ldi	r20, 0x01	; 1
    17b2:	0e 94 13 07 	call	0xe26	; 0xe26 <DIO_enuSetPinDirection>
	DIO_enuSetPinDirection(D6_PORT, D6_PIN, DIO_u8OUTPUT);
    17b6:	81 e0       	ldi	r24, 0x01	; 1
    17b8:	61 e0       	ldi	r22, 0x01	; 1
    17ba:	41 e0       	ldi	r20, 0x01	; 1
    17bc:	0e 94 13 07 	call	0xe26	; 0xe26 <DIO_enuSetPinDirection>
	DIO_enuSetPinDirection(D5_PORT, D5_PIN, DIO_u8OUTPUT);
    17c0:	81 e0       	ldi	r24, 0x01	; 1
    17c2:	62 e0       	ldi	r22, 0x02	; 2
    17c4:	41 e0       	ldi	r20, 0x01	; 1
    17c6:	0e 94 13 07 	call	0xe26	; 0xe26 <DIO_enuSetPinDirection>
	DIO_enuSetPinDirection(D4_PORT, D4_PIN, DIO_u8OUTPUT);
    17ca:	81 e0       	ldi	r24, 0x01	; 1
    17cc:	63 e0       	ldi	r22, 0x03	; 3
    17ce:	41 e0       	ldi	r20, 0x01	; 1
    17d0:	0e 94 13 07 	call	0xe26	; 0xe26 <DIO_enuSetPinDirection>
    17d4:	80 e0       	ldi	r24, 0x00	; 0
    17d6:	90 e0       	ldi	r25, 0x00	; 0
    17d8:	ac e0       	ldi	r26, 0x0C	; 12
    17da:	b2 e4       	ldi	r27, 0x42	; 66
    17dc:	8d ab       	std	Y+53, r24	; 0x35
    17de:	9e ab       	std	Y+54, r25	; 0x36
    17e0:	af ab       	std	Y+55, r26	; 0x37
    17e2:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    17e4:	6d a9       	ldd	r22, Y+53	; 0x35
    17e6:	7e a9       	ldd	r23, Y+54	; 0x36
    17e8:	8f a9       	ldd	r24, Y+55	; 0x37
    17ea:	98 ad       	ldd	r25, Y+56	; 0x38
    17ec:	20 e0       	ldi	r18, 0x00	; 0
    17ee:	30 e0       	ldi	r19, 0x00	; 0
    17f0:	4a e7       	ldi	r20, 0x7A	; 122
    17f2:	53 e4       	ldi	r21, 0x43	; 67
    17f4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    17f8:	dc 01       	movw	r26, r24
    17fa:	cb 01       	movw	r24, r22
    17fc:	89 ab       	std	Y+49, r24	; 0x31
    17fe:	9a ab       	std	Y+50, r25	; 0x32
    1800:	ab ab       	std	Y+51, r26	; 0x33
    1802:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    1804:	69 a9       	ldd	r22, Y+49	; 0x31
    1806:	7a a9       	ldd	r23, Y+50	; 0x32
    1808:	8b a9       	ldd	r24, Y+51	; 0x33
    180a:	9c a9       	ldd	r25, Y+52	; 0x34
    180c:	20 e0       	ldi	r18, 0x00	; 0
    180e:	30 e0       	ldi	r19, 0x00	; 0
    1810:	40 e8       	ldi	r20, 0x80	; 128
    1812:	5f e3       	ldi	r21, 0x3F	; 63
    1814:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1818:	88 23       	and	r24, r24
    181a:	2c f4       	brge	.+10     	; 0x1826 <LCD_enuInit+0xae>
		__ticks = 1;
    181c:	81 e0       	ldi	r24, 0x01	; 1
    181e:	90 e0       	ldi	r25, 0x00	; 0
    1820:	98 ab       	std	Y+48, r25	; 0x30
    1822:	8f a7       	std	Y+47, r24	; 0x2f
    1824:	3f c0       	rjmp	.+126    	; 0x18a4 <LCD_enuInit+0x12c>
	else if (__tmp > 65535)
    1826:	69 a9       	ldd	r22, Y+49	; 0x31
    1828:	7a a9       	ldd	r23, Y+50	; 0x32
    182a:	8b a9       	ldd	r24, Y+51	; 0x33
    182c:	9c a9       	ldd	r25, Y+52	; 0x34
    182e:	20 e0       	ldi	r18, 0x00	; 0
    1830:	3f ef       	ldi	r19, 0xFF	; 255
    1832:	4f e7       	ldi	r20, 0x7F	; 127
    1834:	57 e4       	ldi	r21, 0x47	; 71
    1836:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    183a:	18 16       	cp	r1, r24
    183c:	4c f5       	brge	.+82     	; 0x1890 <LCD_enuInit+0x118>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    183e:	6d a9       	ldd	r22, Y+53	; 0x35
    1840:	7e a9       	ldd	r23, Y+54	; 0x36
    1842:	8f a9       	ldd	r24, Y+55	; 0x37
    1844:	98 ad       	ldd	r25, Y+56	; 0x38
    1846:	20 e0       	ldi	r18, 0x00	; 0
    1848:	30 e0       	ldi	r19, 0x00	; 0
    184a:	40 e2       	ldi	r20, 0x20	; 32
    184c:	51 e4       	ldi	r21, 0x41	; 65
    184e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1852:	dc 01       	movw	r26, r24
    1854:	cb 01       	movw	r24, r22
    1856:	bc 01       	movw	r22, r24
    1858:	cd 01       	movw	r24, r26
    185a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    185e:	dc 01       	movw	r26, r24
    1860:	cb 01       	movw	r24, r22
    1862:	98 ab       	std	Y+48, r25	; 0x30
    1864:	8f a7       	std	Y+47, r24	; 0x2f
    1866:	0f c0       	rjmp	.+30     	; 0x1886 <LCD_enuInit+0x10e>
    1868:	89 e1       	ldi	r24, 0x19	; 25
    186a:	90 e0       	ldi	r25, 0x00	; 0
    186c:	9e a7       	std	Y+46, r25	; 0x2e
    186e:	8d a7       	std	Y+45, r24	; 0x2d
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1870:	8d a5       	ldd	r24, Y+45	; 0x2d
    1872:	9e a5       	ldd	r25, Y+46	; 0x2e
    1874:	01 97       	sbiw	r24, 0x01	; 1
    1876:	f1 f7       	brne	.-4      	; 0x1874 <LCD_enuInit+0xfc>
    1878:	9e a7       	std	Y+46, r25	; 0x2e
    187a:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    187c:	8f a5       	ldd	r24, Y+47	; 0x2f
    187e:	98 a9       	ldd	r25, Y+48	; 0x30
    1880:	01 97       	sbiw	r24, 0x01	; 1
    1882:	98 ab       	std	Y+48, r25	; 0x30
    1884:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1886:	8f a5       	ldd	r24, Y+47	; 0x2f
    1888:	98 a9       	ldd	r25, Y+48	; 0x30
    188a:	00 97       	sbiw	r24, 0x00	; 0
    188c:	69 f7       	brne	.-38     	; 0x1868 <LCD_enuInit+0xf0>
    188e:	14 c0       	rjmp	.+40     	; 0x18b8 <LCD_enuInit+0x140>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1890:	69 a9       	ldd	r22, Y+49	; 0x31
    1892:	7a a9       	ldd	r23, Y+50	; 0x32
    1894:	8b a9       	ldd	r24, Y+51	; 0x33
    1896:	9c a9       	ldd	r25, Y+52	; 0x34
    1898:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    189c:	dc 01       	movw	r26, r24
    189e:	cb 01       	movw	r24, r22
    18a0:	98 ab       	std	Y+48, r25	; 0x30
    18a2:	8f a7       	std	Y+47, r24	; 0x2f
    18a4:	8f a5       	ldd	r24, Y+47	; 0x2f
    18a6:	98 a9       	ldd	r25, Y+48	; 0x30
    18a8:	9c a7       	std	Y+44, r25	; 0x2c
    18aa:	8b a7       	std	Y+43, r24	; 0x2b
    18ac:	8b a5       	ldd	r24, Y+43	; 0x2b
    18ae:	9c a5       	ldd	r25, Y+44	; 0x2c
    18b0:	01 97       	sbiw	r24, 0x01	; 1
    18b2:	f1 f7       	brne	.-4      	; 0x18b0 <LCD_enuInit+0x138>
    18b4:	9c a7       	std	Y+44, r25	; 0x2c
    18b6:	8b a7       	std	Y+43, r24	; 0x2b

	_delay_ms(35);

#if LCD_MODE == EIGHT_BIT

	DIO_enuSetPinDirection(D3_PORT, D3_PIN, DIO_u8OUTPUT);
    18b8:	81 e0       	ldi	r24, 0x01	; 1
    18ba:	64 e0       	ldi	r22, 0x04	; 4
    18bc:	41 e0       	ldi	r20, 0x01	; 1
    18be:	0e 94 13 07 	call	0xe26	; 0xe26 <DIO_enuSetPinDirection>
	DIO_enuSetPinDirection(D2_PORT, D2_PIN, DIO_u8OUTPUT);
    18c2:	81 e0       	ldi	r24, 0x01	; 1
    18c4:	65 e0       	ldi	r22, 0x05	; 5
    18c6:	41 e0       	ldi	r20, 0x01	; 1
    18c8:	0e 94 13 07 	call	0xe26	; 0xe26 <DIO_enuSetPinDirection>
	DIO_enuSetPinDirection(D1_PORT, D1_PIN, DIO_u8OUTPUT);
    18cc:	81 e0       	ldi	r24, 0x01	; 1
    18ce:	66 e0       	ldi	r22, 0x06	; 6
    18d0:	41 e0       	ldi	r20, 0x01	; 1
    18d2:	0e 94 13 07 	call	0xe26	; 0xe26 <DIO_enuSetPinDirection>
	DIO_enuSetPinDirection(D0_PORT, D0_PIN, DIO_u8OUTPUT);
    18d6:	81 e0       	ldi	r24, 0x01	; 1
    18d8:	67 e0       	ldi	r22, 0x07	; 7
    18da:	41 e0       	ldi	r20, 0x01	; 1
    18dc:	0e 94 13 07 	call	0xe26	; 0xe26 <DIO_enuSetPinDirection>

	//function set
	LCD_invidSendCommend(0x38);
    18e0:	88 e3       	ldi	r24, 0x38	; 56
    18e2:	0e 94 2b 10 	call	0x2056	; 0x2056 <LCD_invidSendCommend>
    18e6:	80 e0       	ldi	r24, 0x00	; 0
    18e8:	90 e0       	ldi	r25, 0x00	; 0
    18ea:	a0 e8       	ldi	r26, 0x80	; 128
    18ec:	bf e3       	ldi	r27, 0x3F	; 63
    18ee:	8f a3       	std	Y+39, r24	; 0x27
    18f0:	98 a7       	std	Y+40, r25	; 0x28
    18f2:	a9 a7       	std	Y+41, r26	; 0x29
    18f4:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    18f6:	6f a1       	ldd	r22, Y+39	; 0x27
    18f8:	78 a5       	ldd	r23, Y+40	; 0x28
    18fa:	89 a5       	ldd	r24, Y+41	; 0x29
    18fc:	9a a5       	ldd	r25, Y+42	; 0x2a
    18fe:	20 e0       	ldi	r18, 0x00	; 0
    1900:	30 e0       	ldi	r19, 0x00	; 0
    1902:	4a e7       	ldi	r20, 0x7A	; 122
    1904:	53 e4       	ldi	r21, 0x43	; 67
    1906:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    190a:	dc 01       	movw	r26, r24
    190c:	cb 01       	movw	r24, r22
    190e:	8b a3       	std	Y+35, r24	; 0x23
    1910:	9c a3       	std	Y+36, r25	; 0x24
    1912:	ad a3       	std	Y+37, r26	; 0x25
    1914:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1916:	6b a1       	ldd	r22, Y+35	; 0x23
    1918:	7c a1       	ldd	r23, Y+36	; 0x24
    191a:	8d a1       	ldd	r24, Y+37	; 0x25
    191c:	9e a1       	ldd	r25, Y+38	; 0x26
    191e:	20 e0       	ldi	r18, 0x00	; 0
    1920:	30 e0       	ldi	r19, 0x00	; 0
    1922:	40 e8       	ldi	r20, 0x80	; 128
    1924:	5f e3       	ldi	r21, 0x3F	; 63
    1926:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    192a:	88 23       	and	r24, r24
    192c:	2c f4       	brge	.+10     	; 0x1938 <LCD_enuInit+0x1c0>
		__ticks = 1;
    192e:	81 e0       	ldi	r24, 0x01	; 1
    1930:	90 e0       	ldi	r25, 0x00	; 0
    1932:	9a a3       	std	Y+34, r25	; 0x22
    1934:	89 a3       	std	Y+33, r24	; 0x21
    1936:	3f c0       	rjmp	.+126    	; 0x19b6 <LCD_enuInit+0x23e>
	else if (__tmp > 65535)
    1938:	6b a1       	ldd	r22, Y+35	; 0x23
    193a:	7c a1       	ldd	r23, Y+36	; 0x24
    193c:	8d a1       	ldd	r24, Y+37	; 0x25
    193e:	9e a1       	ldd	r25, Y+38	; 0x26
    1940:	20 e0       	ldi	r18, 0x00	; 0
    1942:	3f ef       	ldi	r19, 0xFF	; 255
    1944:	4f e7       	ldi	r20, 0x7F	; 127
    1946:	57 e4       	ldi	r21, 0x47	; 71
    1948:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    194c:	18 16       	cp	r1, r24
    194e:	4c f5       	brge	.+82     	; 0x19a2 <LCD_enuInit+0x22a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1950:	6f a1       	ldd	r22, Y+39	; 0x27
    1952:	78 a5       	ldd	r23, Y+40	; 0x28
    1954:	89 a5       	ldd	r24, Y+41	; 0x29
    1956:	9a a5       	ldd	r25, Y+42	; 0x2a
    1958:	20 e0       	ldi	r18, 0x00	; 0
    195a:	30 e0       	ldi	r19, 0x00	; 0
    195c:	40 e2       	ldi	r20, 0x20	; 32
    195e:	51 e4       	ldi	r21, 0x41	; 65
    1960:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1964:	dc 01       	movw	r26, r24
    1966:	cb 01       	movw	r24, r22
    1968:	bc 01       	movw	r22, r24
    196a:	cd 01       	movw	r24, r26
    196c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1970:	dc 01       	movw	r26, r24
    1972:	cb 01       	movw	r24, r22
    1974:	9a a3       	std	Y+34, r25	; 0x22
    1976:	89 a3       	std	Y+33, r24	; 0x21
    1978:	0f c0       	rjmp	.+30     	; 0x1998 <LCD_enuInit+0x220>
    197a:	89 e1       	ldi	r24, 0x19	; 25
    197c:	90 e0       	ldi	r25, 0x00	; 0
    197e:	98 a3       	std	Y+32, r25	; 0x20
    1980:	8f 8f       	std	Y+31, r24	; 0x1f
    1982:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1984:	98 a1       	ldd	r25, Y+32	; 0x20
    1986:	01 97       	sbiw	r24, 0x01	; 1
    1988:	f1 f7       	brne	.-4      	; 0x1986 <LCD_enuInit+0x20e>
    198a:	98 a3       	std	Y+32, r25	; 0x20
    198c:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    198e:	89 a1       	ldd	r24, Y+33	; 0x21
    1990:	9a a1       	ldd	r25, Y+34	; 0x22
    1992:	01 97       	sbiw	r24, 0x01	; 1
    1994:	9a a3       	std	Y+34, r25	; 0x22
    1996:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1998:	89 a1       	ldd	r24, Y+33	; 0x21
    199a:	9a a1       	ldd	r25, Y+34	; 0x22
    199c:	00 97       	sbiw	r24, 0x00	; 0
    199e:	69 f7       	brne	.-38     	; 0x197a <LCD_enuInit+0x202>
    19a0:	14 c0       	rjmp	.+40     	; 0x19ca <LCD_enuInit+0x252>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    19a2:	6b a1       	ldd	r22, Y+35	; 0x23
    19a4:	7c a1       	ldd	r23, Y+36	; 0x24
    19a6:	8d a1       	ldd	r24, Y+37	; 0x25
    19a8:	9e a1       	ldd	r25, Y+38	; 0x26
    19aa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    19ae:	dc 01       	movw	r26, r24
    19b0:	cb 01       	movw	r24, r22
    19b2:	9a a3       	std	Y+34, r25	; 0x22
    19b4:	89 a3       	std	Y+33, r24	; 0x21
    19b6:	89 a1       	ldd	r24, Y+33	; 0x21
    19b8:	9a a1       	ldd	r25, Y+34	; 0x22
    19ba:	9e 8f       	std	Y+30, r25	; 0x1e
    19bc:	8d 8f       	std	Y+29, r24	; 0x1d
    19be:	8d 8d       	ldd	r24, Y+29	; 0x1d
    19c0:	9e 8d       	ldd	r25, Y+30	; 0x1e
    19c2:	01 97       	sbiw	r24, 0x01	; 1
    19c4:	f1 f7       	brne	.-4      	; 0x19c2 <LCD_enuInit+0x24a>
    19c6:	9e 8f       	std	Y+30, r25	; 0x1e
    19c8:	8d 8f       	std	Y+29, r24	; 0x1d
#elif LCD_MODE == FOUR_BIT
	LCD_invidSendCommend(0x28);
#endif
	_delay_ms(1);
	LCD_invidSendCommend(0x0f);
    19ca:	8f e0       	ldi	r24, 0x0F	; 15
    19cc:	0e 94 2b 10 	call	0x2056	; 0x2056 <LCD_invidSendCommend>
    19d0:	80 e0       	ldi	r24, 0x00	; 0
    19d2:	90 e0       	ldi	r25, 0x00	; 0
    19d4:	a0 e8       	ldi	r26, 0x80	; 128
    19d6:	bf e3       	ldi	r27, 0x3F	; 63
    19d8:	89 8f       	std	Y+25, r24	; 0x19
    19da:	9a 8f       	std	Y+26, r25	; 0x1a
    19dc:	ab 8f       	std	Y+27, r26	; 0x1b
    19de:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    19e0:	69 8d       	ldd	r22, Y+25	; 0x19
    19e2:	7a 8d       	ldd	r23, Y+26	; 0x1a
    19e4:	8b 8d       	ldd	r24, Y+27	; 0x1b
    19e6:	9c 8d       	ldd	r25, Y+28	; 0x1c
    19e8:	20 e0       	ldi	r18, 0x00	; 0
    19ea:	30 e0       	ldi	r19, 0x00	; 0
    19ec:	4a e7       	ldi	r20, 0x7A	; 122
    19ee:	53 e4       	ldi	r21, 0x43	; 67
    19f0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    19f4:	dc 01       	movw	r26, r24
    19f6:	cb 01       	movw	r24, r22
    19f8:	8d 8b       	std	Y+21, r24	; 0x15
    19fa:	9e 8b       	std	Y+22, r25	; 0x16
    19fc:	af 8b       	std	Y+23, r26	; 0x17
    19fe:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1a00:	6d 89       	ldd	r22, Y+21	; 0x15
    1a02:	7e 89       	ldd	r23, Y+22	; 0x16
    1a04:	8f 89       	ldd	r24, Y+23	; 0x17
    1a06:	98 8d       	ldd	r25, Y+24	; 0x18
    1a08:	20 e0       	ldi	r18, 0x00	; 0
    1a0a:	30 e0       	ldi	r19, 0x00	; 0
    1a0c:	40 e8       	ldi	r20, 0x80	; 128
    1a0e:	5f e3       	ldi	r21, 0x3F	; 63
    1a10:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1a14:	88 23       	and	r24, r24
    1a16:	2c f4       	brge	.+10     	; 0x1a22 <LCD_enuInit+0x2aa>
		__ticks = 1;
    1a18:	81 e0       	ldi	r24, 0x01	; 1
    1a1a:	90 e0       	ldi	r25, 0x00	; 0
    1a1c:	9c 8b       	std	Y+20, r25	; 0x14
    1a1e:	8b 8b       	std	Y+19, r24	; 0x13
    1a20:	3f c0       	rjmp	.+126    	; 0x1aa0 <LCD_enuInit+0x328>
	else if (__tmp > 65535)
    1a22:	6d 89       	ldd	r22, Y+21	; 0x15
    1a24:	7e 89       	ldd	r23, Y+22	; 0x16
    1a26:	8f 89       	ldd	r24, Y+23	; 0x17
    1a28:	98 8d       	ldd	r25, Y+24	; 0x18
    1a2a:	20 e0       	ldi	r18, 0x00	; 0
    1a2c:	3f ef       	ldi	r19, 0xFF	; 255
    1a2e:	4f e7       	ldi	r20, 0x7F	; 127
    1a30:	57 e4       	ldi	r21, 0x47	; 71
    1a32:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1a36:	18 16       	cp	r1, r24
    1a38:	4c f5       	brge	.+82     	; 0x1a8c <LCD_enuInit+0x314>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1a3a:	69 8d       	ldd	r22, Y+25	; 0x19
    1a3c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1a3e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1a40:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1a42:	20 e0       	ldi	r18, 0x00	; 0
    1a44:	30 e0       	ldi	r19, 0x00	; 0
    1a46:	40 e2       	ldi	r20, 0x20	; 32
    1a48:	51 e4       	ldi	r21, 0x41	; 65
    1a4a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1a4e:	dc 01       	movw	r26, r24
    1a50:	cb 01       	movw	r24, r22
    1a52:	bc 01       	movw	r22, r24
    1a54:	cd 01       	movw	r24, r26
    1a56:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1a5a:	dc 01       	movw	r26, r24
    1a5c:	cb 01       	movw	r24, r22
    1a5e:	9c 8b       	std	Y+20, r25	; 0x14
    1a60:	8b 8b       	std	Y+19, r24	; 0x13
    1a62:	0f c0       	rjmp	.+30     	; 0x1a82 <LCD_enuInit+0x30a>
    1a64:	89 e1       	ldi	r24, 0x19	; 25
    1a66:	90 e0       	ldi	r25, 0x00	; 0
    1a68:	9a 8b       	std	Y+18, r25	; 0x12
    1a6a:	89 8b       	std	Y+17, r24	; 0x11
    1a6c:	89 89       	ldd	r24, Y+17	; 0x11
    1a6e:	9a 89       	ldd	r25, Y+18	; 0x12
    1a70:	01 97       	sbiw	r24, 0x01	; 1
    1a72:	f1 f7       	brne	.-4      	; 0x1a70 <LCD_enuInit+0x2f8>
    1a74:	9a 8b       	std	Y+18, r25	; 0x12
    1a76:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1a78:	8b 89       	ldd	r24, Y+19	; 0x13
    1a7a:	9c 89       	ldd	r25, Y+20	; 0x14
    1a7c:	01 97       	sbiw	r24, 0x01	; 1
    1a7e:	9c 8b       	std	Y+20, r25	; 0x14
    1a80:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1a82:	8b 89       	ldd	r24, Y+19	; 0x13
    1a84:	9c 89       	ldd	r25, Y+20	; 0x14
    1a86:	00 97       	sbiw	r24, 0x00	; 0
    1a88:	69 f7       	brne	.-38     	; 0x1a64 <LCD_enuInit+0x2ec>
    1a8a:	14 c0       	rjmp	.+40     	; 0x1ab4 <LCD_enuInit+0x33c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1a8c:	6d 89       	ldd	r22, Y+21	; 0x15
    1a8e:	7e 89       	ldd	r23, Y+22	; 0x16
    1a90:	8f 89       	ldd	r24, Y+23	; 0x17
    1a92:	98 8d       	ldd	r25, Y+24	; 0x18
    1a94:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1a98:	dc 01       	movw	r26, r24
    1a9a:	cb 01       	movw	r24, r22
    1a9c:	9c 8b       	std	Y+20, r25	; 0x14
    1a9e:	8b 8b       	std	Y+19, r24	; 0x13
    1aa0:	8b 89       	ldd	r24, Y+19	; 0x13
    1aa2:	9c 89       	ldd	r25, Y+20	; 0x14
    1aa4:	98 8b       	std	Y+16, r25	; 0x10
    1aa6:	8f 87       	std	Y+15, r24	; 0x0f
    1aa8:	8f 85       	ldd	r24, Y+15	; 0x0f
    1aaa:	98 89       	ldd	r25, Y+16	; 0x10
    1aac:	01 97       	sbiw	r24, 0x01	; 1
    1aae:	f1 f7       	brne	.-4      	; 0x1aac <LCD_enuInit+0x334>
    1ab0:	98 8b       	std	Y+16, r25	; 0x10
    1ab2:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1);
	LCD_invidSendCommend(0x01);
    1ab4:	81 e0       	ldi	r24, 0x01	; 1
    1ab6:	0e 94 2b 10 	call	0x2056	; 0x2056 <LCD_invidSendCommend>
    1aba:	80 e0       	ldi	r24, 0x00	; 0
    1abc:	90 e0       	ldi	r25, 0x00	; 0
    1abe:	a0 e0       	ldi	r26, 0x00	; 0
    1ac0:	b0 e4       	ldi	r27, 0x40	; 64
    1ac2:	8b 87       	std	Y+11, r24	; 0x0b
    1ac4:	9c 87       	std	Y+12, r25	; 0x0c
    1ac6:	ad 87       	std	Y+13, r26	; 0x0d
    1ac8:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1aca:	6b 85       	ldd	r22, Y+11	; 0x0b
    1acc:	7c 85       	ldd	r23, Y+12	; 0x0c
    1ace:	8d 85       	ldd	r24, Y+13	; 0x0d
    1ad0:	9e 85       	ldd	r25, Y+14	; 0x0e
    1ad2:	20 e0       	ldi	r18, 0x00	; 0
    1ad4:	30 e0       	ldi	r19, 0x00	; 0
    1ad6:	4a e7       	ldi	r20, 0x7A	; 122
    1ad8:	53 e4       	ldi	r21, 0x43	; 67
    1ada:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1ade:	dc 01       	movw	r26, r24
    1ae0:	cb 01       	movw	r24, r22
    1ae2:	8f 83       	std	Y+7, r24	; 0x07
    1ae4:	98 87       	std	Y+8, r25	; 0x08
    1ae6:	a9 87       	std	Y+9, r26	; 0x09
    1ae8:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1aea:	6f 81       	ldd	r22, Y+7	; 0x07
    1aec:	78 85       	ldd	r23, Y+8	; 0x08
    1aee:	89 85       	ldd	r24, Y+9	; 0x09
    1af0:	9a 85       	ldd	r25, Y+10	; 0x0a
    1af2:	20 e0       	ldi	r18, 0x00	; 0
    1af4:	30 e0       	ldi	r19, 0x00	; 0
    1af6:	40 e8       	ldi	r20, 0x80	; 128
    1af8:	5f e3       	ldi	r21, 0x3F	; 63
    1afa:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1afe:	88 23       	and	r24, r24
    1b00:	2c f4       	brge	.+10     	; 0x1b0c <LCD_enuInit+0x394>
		__ticks = 1;
    1b02:	81 e0       	ldi	r24, 0x01	; 1
    1b04:	90 e0       	ldi	r25, 0x00	; 0
    1b06:	9e 83       	std	Y+6, r25	; 0x06
    1b08:	8d 83       	std	Y+5, r24	; 0x05
    1b0a:	3f c0       	rjmp	.+126    	; 0x1b8a <LCD_enuInit+0x412>
	else if (__tmp > 65535)
    1b0c:	6f 81       	ldd	r22, Y+7	; 0x07
    1b0e:	78 85       	ldd	r23, Y+8	; 0x08
    1b10:	89 85       	ldd	r24, Y+9	; 0x09
    1b12:	9a 85       	ldd	r25, Y+10	; 0x0a
    1b14:	20 e0       	ldi	r18, 0x00	; 0
    1b16:	3f ef       	ldi	r19, 0xFF	; 255
    1b18:	4f e7       	ldi	r20, 0x7F	; 127
    1b1a:	57 e4       	ldi	r21, 0x47	; 71
    1b1c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1b20:	18 16       	cp	r1, r24
    1b22:	4c f5       	brge	.+82     	; 0x1b76 <LCD_enuInit+0x3fe>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1b24:	6b 85       	ldd	r22, Y+11	; 0x0b
    1b26:	7c 85       	ldd	r23, Y+12	; 0x0c
    1b28:	8d 85       	ldd	r24, Y+13	; 0x0d
    1b2a:	9e 85       	ldd	r25, Y+14	; 0x0e
    1b2c:	20 e0       	ldi	r18, 0x00	; 0
    1b2e:	30 e0       	ldi	r19, 0x00	; 0
    1b30:	40 e2       	ldi	r20, 0x20	; 32
    1b32:	51 e4       	ldi	r21, 0x41	; 65
    1b34:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1b38:	dc 01       	movw	r26, r24
    1b3a:	cb 01       	movw	r24, r22
    1b3c:	bc 01       	movw	r22, r24
    1b3e:	cd 01       	movw	r24, r26
    1b40:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1b44:	dc 01       	movw	r26, r24
    1b46:	cb 01       	movw	r24, r22
    1b48:	9e 83       	std	Y+6, r25	; 0x06
    1b4a:	8d 83       	std	Y+5, r24	; 0x05
    1b4c:	0f c0       	rjmp	.+30     	; 0x1b6c <LCD_enuInit+0x3f4>
    1b4e:	89 e1       	ldi	r24, 0x19	; 25
    1b50:	90 e0       	ldi	r25, 0x00	; 0
    1b52:	9c 83       	std	Y+4, r25	; 0x04
    1b54:	8b 83       	std	Y+3, r24	; 0x03
    1b56:	8b 81       	ldd	r24, Y+3	; 0x03
    1b58:	9c 81       	ldd	r25, Y+4	; 0x04
    1b5a:	01 97       	sbiw	r24, 0x01	; 1
    1b5c:	f1 f7       	brne	.-4      	; 0x1b5a <LCD_enuInit+0x3e2>
    1b5e:	9c 83       	std	Y+4, r25	; 0x04
    1b60:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1b62:	8d 81       	ldd	r24, Y+5	; 0x05
    1b64:	9e 81       	ldd	r25, Y+6	; 0x06
    1b66:	01 97       	sbiw	r24, 0x01	; 1
    1b68:	9e 83       	std	Y+6, r25	; 0x06
    1b6a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1b6c:	8d 81       	ldd	r24, Y+5	; 0x05
    1b6e:	9e 81       	ldd	r25, Y+6	; 0x06
    1b70:	00 97       	sbiw	r24, 0x00	; 0
    1b72:	69 f7       	brne	.-38     	; 0x1b4e <LCD_enuInit+0x3d6>
    1b74:	14 c0       	rjmp	.+40     	; 0x1b9e <LCD_enuInit+0x426>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1b76:	6f 81       	ldd	r22, Y+7	; 0x07
    1b78:	78 85       	ldd	r23, Y+8	; 0x08
    1b7a:	89 85       	ldd	r24, Y+9	; 0x09
    1b7c:	9a 85       	ldd	r25, Y+10	; 0x0a
    1b7e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1b82:	dc 01       	movw	r26, r24
    1b84:	cb 01       	movw	r24, r22
    1b86:	9e 83       	std	Y+6, r25	; 0x06
    1b88:	8d 83       	std	Y+5, r24	; 0x05
    1b8a:	8d 81       	ldd	r24, Y+5	; 0x05
    1b8c:	9e 81       	ldd	r25, Y+6	; 0x06
    1b8e:	9a 83       	std	Y+2, r25	; 0x02
    1b90:	89 83       	std	Y+1, r24	; 0x01
    1b92:	89 81       	ldd	r24, Y+1	; 0x01
    1b94:	9a 81       	ldd	r25, Y+2	; 0x02
    1b96:	01 97       	sbiw	r24, 0x01	; 1
    1b98:	f1 f7       	brne	.-4      	; 0x1b96 <LCD_enuInit+0x41e>
    1b9a:	9a 83       	std	Y+2, r25	; 0x02
    1b9c:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
	LCD_invidSendCommend(0x06);
    1b9e:	86 e0       	ldi	r24, 0x06	; 6
    1ba0:	0e 94 2b 10 	call	0x2056	; 0x2056 <LCD_invidSendCommend>

	return Local_enuErrorState;
    1ba4:	89 ad       	ldd	r24, Y+57	; 0x39
}
    1ba6:	e9 96       	adiw	r28, 0x39	; 57
    1ba8:	0f b6       	in	r0, 0x3f	; 63
    1baa:	f8 94       	cli
    1bac:	de bf       	out	0x3e, r29	; 62
    1bae:	0f be       	out	0x3f, r0	; 63
    1bb0:	cd bf       	out	0x3d, r28	; 61
    1bb2:	cf 91       	pop	r28
    1bb4:	df 91       	pop	r29
    1bb6:	08 95       	ret

00001bb8 <LCD_enuDisplayChar>:

ES_t LCD_enuDisplayChar(u8 Copy_u8Data)
{
    1bb8:	df 93       	push	r29
    1bba:	cf 93       	push	r28
    1bbc:	00 d0       	rcall	.+0      	; 0x1bbe <LCD_enuDisplayChar+0x6>
    1bbe:	cd b7       	in	r28, 0x3d	; 61
    1bc0:	de b7       	in	r29, 0x3e	; 62
    1bc2:	8a 83       	std	Y+2, r24	; 0x02
	ES_t Local_enuErrorState = ES_NOK;
    1bc4:	19 82       	std	Y+1, r1	; 0x01

	DIO_enuSetPinValue(RS_PORT , RS_PIN , DIO_u8HIGH);
    1bc6:	80 e0       	ldi	r24, 0x00	; 0
    1bc8:	60 e0       	ldi	r22, 0x00	; 0
    1bca:	41 e0       	ldi	r20, 0x01	; 1
    1bcc:	0e 94 ff 07 	call	0xffe	; 0xffe <DIO_enuSetPinValue>

	LCD_vidLatch(Copy_u8Data);
    1bd0:	8a 81       	ldd	r24, Y+2	; 0x02
    1bd2:	0e 94 ce 0e 	call	0x1d9c	; 0x1d9c <LCD_vidLatch>

	return Local_enuErrorState;
    1bd6:	89 81       	ldd	r24, Y+1	; 0x01
}
    1bd8:	0f 90       	pop	r0
    1bda:	0f 90       	pop	r0
    1bdc:	cf 91       	pop	r28
    1bde:	df 91       	pop	r29
    1be0:	08 95       	ret

00001be2 <LCD_enuSendCommand>:

ES_t LCD_enuSendCommand(u8 Copy_u8Command)
{
    1be2:	df 93       	push	r29
    1be4:	cf 93       	push	r28
    1be6:	00 d0       	rcall	.+0      	; 0x1be8 <LCD_enuSendCommand+0x6>
    1be8:	cd b7       	in	r28, 0x3d	; 61
    1bea:	de b7       	in	r29, 0x3e	; 62
    1bec:	8a 83       	std	Y+2, r24	; 0x02
	ES_t Local_enuErrorState = ES_NOK;
    1bee:	19 82       	std	Y+1, r1	; 0x01

	// set rs as command
	DIO_enuSetPinValue(RS_PORT , RS_PIN , DIO_u8LOW);
    1bf0:	80 e0       	ldi	r24, 0x00	; 0
    1bf2:	60 e0       	ldi	r22, 0x00	; 0
    1bf4:	40 e0       	ldi	r20, 0x00	; 0
    1bf6:	0e 94 ff 07 	call	0xffe	; 0xffe <DIO_enuSetPinValue>

	LCD_vidLatch(Copy_u8Command);
    1bfa:	8a 81       	ldd	r24, Y+2	; 0x02
    1bfc:	0e 94 ce 0e 	call	0x1d9c	; 0x1d9c <LCD_vidLatch>


	return Local_enuErrorState;
    1c00:	89 81       	ldd	r24, Y+1	; 0x01
}
    1c02:	0f 90       	pop	r0
    1c04:	0f 90       	pop	r0
    1c06:	cf 91       	pop	r28
    1c08:	df 91       	pop	r29
    1c0a:	08 95       	ret

00001c0c <LCD_enuDisplayIntegerNum>:


ES_t LCD_enuDisplayIntegerNum(s32 Copy_s32Num)
{
    1c0c:	df 93       	push	r29
    1c0e:	cf 93       	push	r28
    1c10:	cd b7       	in	r28, 0x3d	; 61
    1c12:	de b7       	in	r29, 0x3e	; 62
    1c14:	2b 97       	sbiw	r28, 0x0b	; 11
    1c16:	0f b6       	in	r0, 0x3f	; 63
    1c18:	f8 94       	cli
    1c1a:	de bf       	out	0x3e, r29	; 62
    1c1c:	0f be       	out	0x3f, r0	; 63
    1c1e:	cd bf       	out	0x3d, r28	; 61
    1c20:	68 87       	std	Y+8, r22	; 0x08
    1c22:	79 87       	std	Y+9, r23	; 0x09
    1c24:	8a 87       	std	Y+10, r24	; 0x0a
    1c26:	9b 87       	std	Y+11, r25	; 0x0b
	ES_t Local_enuErrorState = ES_NOK;
    1c28:	1f 82       	std	Y+7, r1	; 0x07

	s32 Local_s32Reverse=0;
    1c2a:	1b 82       	std	Y+3, r1	; 0x03
    1c2c:	1c 82       	std	Y+4, r1	; 0x04
    1c2e:	1d 82       	std	Y+5, r1	; 0x05
    1c30:	1e 82       	std	Y+6, r1	; 0x06
	u8 Local_u8Remainder=0 , Local_u8NumDigit=0;
    1c32:	1a 82       	std	Y+2, r1	; 0x02
    1c34:	19 82       	std	Y+1, r1	; 0x01

	if(Copy_s32Num==0)
    1c36:	88 85       	ldd	r24, Y+8	; 0x08
    1c38:	99 85       	ldd	r25, Y+9	; 0x09
    1c3a:	aa 85       	ldd	r26, Y+10	; 0x0a
    1c3c:	bb 85       	ldd	r27, Y+11	; 0x0b
    1c3e:	00 97       	sbiw	r24, 0x00	; 0
    1c40:	a1 05       	cpc	r26, r1
    1c42:	b1 05       	cpc	r27, r1
    1c44:	49 f4       	brne	.+18     	; 0x1c58 <LCD_enuDisplayIntegerNum+0x4c>
	{
		DIO_enuSetPinValue(RS_PORT , RS_PIN , DIO_u8HIGH);
    1c46:	80 e0       	ldi	r24, 0x00	; 0
    1c48:	60 e0       	ldi	r22, 0x00	; 0
    1c4a:	41 e0       	ldi	r20, 0x01	; 1
    1c4c:	0e 94 ff 07 	call	0xffe	; 0xffe <DIO_enuSetPinValue>
				LCD_vidLatch('0');
    1c50:	80 e3       	ldi	r24, 0x30	; 48
    1c52:	0e 94 ce 0e 	call	0x1d9c	; 0x1d9c <LCD_vidLatch>
    1c56:	98 c0       	rjmp	.+304    	; 0x1d88 <LCD_enuDisplayIntegerNum+0x17c>
	}
	else
	{


	if(Copy_s32Num <0)
    1c58:	88 85       	ldd	r24, Y+8	; 0x08
    1c5a:	99 85       	ldd	r25, Y+9	; 0x09
    1c5c:	aa 85       	ldd	r26, Y+10	; 0x0a
    1c5e:	bb 85       	ldd	r27, Y+11	; 0x0b
    1c60:	bb 23       	and	r27, r27
    1c62:	0c f0       	brlt	.+2      	; 0x1c66 <LCD_enuDisplayIntegerNum+0x5a>
    1c64:	57 c0       	rjmp	.+174    	; 0x1d14 <LCD_enuDisplayIntegerNum+0x108>
	{
		DIO_enuSetPinValue(RS_PORT , RS_PIN , DIO_u8HIGH);
    1c66:	80 e0       	ldi	r24, 0x00	; 0
    1c68:	60 e0       	ldi	r22, 0x00	; 0
    1c6a:	41 e0       	ldi	r20, 0x01	; 1
    1c6c:	0e 94 ff 07 	call	0xffe	; 0xffe <DIO_enuSetPinValue>
		LCD_vidLatch('-');
    1c70:	8d e2       	ldi	r24, 0x2D	; 45
    1c72:	0e 94 ce 0e 	call	0x1d9c	; 0x1d9c <LCD_vidLatch>
		Copy_s32Num *= -1 ;
    1c76:	88 85       	ldd	r24, Y+8	; 0x08
    1c78:	99 85       	ldd	r25, Y+9	; 0x09
    1c7a:	aa 85       	ldd	r26, Y+10	; 0x0a
    1c7c:	bb 85       	ldd	r27, Y+11	; 0x0b
    1c7e:	b0 95       	com	r27
    1c80:	a0 95       	com	r26
    1c82:	90 95       	com	r25
    1c84:	81 95       	neg	r24
    1c86:	9f 4f       	sbci	r25, 0xFF	; 255
    1c88:	af 4f       	sbci	r26, 0xFF	; 255
    1c8a:	bf 4f       	sbci	r27, 0xFF	; 255
    1c8c:	88 87       	std	Y+8, r24	; 0x08
    1c8e:	99 87       	std	Y+9, r25	; 0x09
    1c90:	aa 87       	std	Y+10, r26	; 0x0a
    1c92:	bb 87       	std	Y+11, r27	; 0x0b
    1c94:	3f c0       	rjmp	.+126    	; 0x1d14 <LCD_enuDisplayIntegerNum+0x108>
	}
	while (Copy_s32Num)
	{
		Local_u8Remainder = Copy_s32Num % 10;
    1c96:	88 85       	ldd	r24, Y+8	; 0x08
    1c98:	99 85       	ldd	r25, Y+9	; 0x09
    1c9a:	aa 85       	ldd	r26, Y+10	; 0x0a
    1c9c:	bb 85       	ldd	r27, Y+11	; 0x0b
    1c9e:	2a e0       	ldi	r18, 0x0A	; 10
    1ca0:	30 e0       	ldi	r19, 0x00	; 0
    1ca2:	40 e0       	ldi	r20, 0x00	; 0
    1ca4:	50 e0       	ldi	r21, 0x00	; 0
    1ca6:	bc 01       	movw	r22, r24
    1ca8:	cd 01       	movw	r24, r26
    1caa:	0e 94 bd 11 	call	0x237a	; 0x237a <__divmodsi4>
    1cae:	dc 01       	movw	r26, r24
    1cb0:	cb 01       	movw	r24, r22
    1cb2:	8a 83       	std	Y+2, r24	; 0x02
		Local_s32Reverse = Local_s32Reverse * 10 + Local_u8Remainder;
    1cb4:	8b 81       	ldd	r24, Y+3	; 0x03
    1cb6:	9c 81       	ldd	r25, Y+4	; 0x04
    1cb8:	ad 81       	ldd	r26, Y+5	; 0x05
    1cba:	be 81       	ldd	r27, Y+6	; 0x06
    1cbc:	2a e0       	ldi	r18, 0x0A	; 10
    1cbe:	30 e0       	ldi	r19, 0x00	; 0
    1cc0:	40 e0       	ldi	r20, 0x00	; 0
    1cc2:	50 e0       	ldi	r21, 0x00	; 0
    1cc4:	bc 01       	movw	r22, r24
    1cc6:	cd 01       	movw	r24, r26
    1cc8:	0e 94 9e 11 	call	0x233c	; 0x233c <__mulsi3>
    1ccc:	9b 01       	movw	r18, r22
    1cce:	ac 01       	movw	r20, r24
    1cd0:	8a 81       	ldd	r24, Y+2	; 0x02
    1cd2:	88 2f       	mov	r24, r24
    1cd4:	90 e0       	ldi	r25, 0x00	; 0
    1cd6:	a0 e0       	ldi	r26, 0x00	; 0
    1cd8:	b0 e0       	ldi	r27, 0x00	; 0
    1cda:	82 0f       	add	r24, r18
    1cdc:	93 1f       	adc	r25, r19
    1cde:	a4 1f       	adc	r26, r20
    1ce0:	b5 1f       	adc	r27, r21
    1ce2:	8b 83       	std	Y+3, r24	; 0x03
    1ce4:	9c 83       	std	Y+4, r25	; 0x04
    1ce6:	ad 83       	std	Y+5, r26	; 0x05
    1ce8:	be 83       	std	Y+6, r27	; 0x06
		Copy_s32Num /=10;
    1cea:	88 85       	ldd	r24, Y+8	; 0x08
    1cec:	99 85       	ldd	r25, Y+9	; 0x09
    1cee:	aa 85       	ldd	r26, Y+10	; 0x0a
    1cf0:	bb 85       	ldd	r27, Y+11	; 0x0b
    1cf2:	2a e0       	ldi	r18, 0x0A	; 10
    1cf4:	30 e0       	ldi	r19, 0x00	; 0
    1cf6:	40 e0       	ldi	r20, 0x00	; 0
    1cf8:	50 e0       	ldi	r21, 0x00	; 0
    1cfa:	bc 01       	movw	r22, r24
    1cfc:	cd 01       	movw	r24, r26
    1cfe:	0e 94 bd 11 	call	0x237a	; 0x237a <__divmodsi4>
    1d02:	da 01       	movw	r26, r20
    1d04:	c9 01       	movw	r24, r18
    1d06:	88 87       	std	Y+8, r24	; 0x08
    1d08:	99 87       	std	Y+9, r25	; 0x09
    1d0a:	aa 87       	std	Y+10, r26	; 0x0a
    1d0c:	bb 87       	std	Y+11, r27	; 0x0b
		Local_u8NumDigit ++;
    1d0e:	89 81       	ldd	r24, Y+1	; 0x01
    1d10:	8f 5f       	subi	r24, 0xFF	; 255
    1d12:	89 83       	std	Y+1, r24	; 0x01
	{
		DIO_enuSetPinValue(RS_PORT , RS_PIN , DIO_u8HIGH);
		LCD_vidLatch('-');
		Copy_s32Num *= -1 ;
	}
	while (Copy_s32Num)
    1d14:	88 85       	ldd	r24, Y+8	; 0x08
    1d16:	99 85       	ldd	r25, Y+9	; 0x09
    1d18:	aa 85       	ldd	r26, Y+10	; 0x0a
    1d1a:	bb 85       	ldd	r27, Y+11	; 0x0b
    1d1c:	00 97       	sbiw	r24, 0x00	; 0
    1d1e:	a1 05       	cpc	r26, r1
    1d20:	b1 05       	cpc	r27, r1
    1d22:	09 f0       	breq	.+2      	; 0x1d26 <LCD_enuDisplayIntegerNum+0x11a>
    1d24:	b8 cf       	rjmp	.-144    	; 0x1c96 <LCD_enuDisplayIntegerNum+0x8a>
    1d26:	2d c0       	rjmp	.+90     	; 0x1d82 <LCD_enuDisplayIntegerNum+0x176>
		Local_u8NumDigit ++;
	}

	while (Local_u8NumDigit)
	{
		Local_u8Remainder = Local_s32Reverse % 10;
    1d28:	8b 81       	ldd	r24, Y+3	; 0x03
    1d2a:	9c 81       	ldd	r25, Y+4	; 0x04
    1d2c:	ad 81       	ldd	r26, Y+5	; 0x05
    1d2e:	be 81       	ldd	r27, Y+6	; 0x06
    1d30:	2a e0       	ldi	r18, 0x0A	; 10
    1d32:	30 e0       	ldi	r19, 0x00	; 0
    1d34:	40 e0       	ldi	r20, 0x00	; 0
    1d36:	50 e0       	ldi	r21, 0x00	; 0
    1d38:	bc 01       	movw	r22, r24
    1d3a:	cd 01       	movw	r24, r26
    1d3c:	0e 94 bd 11 	call	0x237a	; 0x237a <__divmodsi4>
    1d40:	dc 01       	movw	r26, r24
    1d42:	cb 01       	movw	r24, r22
    1d44:	8a 83       	std	Y+2, r24	; 0x02
		DIO_enuSetPinValue(RS_PORT , RS_PIN , DIO_u8HIGH);
    1d46:	80 e0       	ldi	r24, 0x00	; 0
    1d48:	60 e0       	ldi	r22, 0x00	; 0
    1d4a:	41 e0       	ldi	r20, 0x01	; 1
    1d4c:	0e 94 ff 07 	call	0xffe	; 0xffe <DIO_enuSetPinValue>
		LCD_vidLatch(Local_u8Remainder + '0');
    1d50:	8a 81       	ldd	r24, Y+2	; 0x02
    1d52:	80 5d       	subi	r24, 0xD0	; 208
    1d54:	0e 94 ce 0e 	call	0x1d9c	; 0x1d9c <LCD_vidLatch>
		Local_s32Reverse /= 10;
    1d58:	8b 81       	ldd	r24, Y+3	; 0x03
    1d5a:	9c 81       	ldd	r25, Y+4	; 0x04
    1d5c:	ad 81       	ldd	r26, Y+5	; 0x05
    1d5e:	be 81       	ldd	r27, Y+6	; 0x06
    1d60:	2a e0       	ldi	r18, 0x0A	; 10
    1d62:	30 e0       	ldi	r19, 0x00	; 0
    1d64:	40 e0       	ldi	r20, 0x00	; 0
    1d66:	50 e0       	ldi	r21, 0x00	; 0
    1d68:	bc 01       	movw	r22, r24
    1d6a:	cd 01       	movw	r24, r26
    1d6c:	0e 94 bd 11 	call	0x237a	; 0x237a <__divmodsi4>
    1d70:	da 01       	movw	r26, r20
    1d72:	c9 01       	movw	r24, r18
    1d74:	8b 83       	std	Y+3, r24	; 0x03
    1d76:	9c 83       	std	Y+4, r25	; 0x04
    1d78:	ad 83       	std	Y+5, r26	; 0x05
    1d7a:	be 83       	std	Y+6, r27	; 0x06
		Local_u8NumDigit --;
    1d7c:	89 81       	ldd	r24, Y+1	; 0x01
    1d7e:	81 50       	subi	r24, 0x01	; 1
    1d80:	89 83       	std	Y+1, r24	; 0x01
		Local_s32Reverse = Local_s32Reverse * 10 + Local_u8Remainder;
		Copy_s32Num /=10;
		Local_u8NumDigit ++;
	}

	while (Local_u8NumDigit)
    1d82:	89 81       	ldd	r24, Y+1	; 0x01
    1d84:	88 23       	and	r24, r24
    1d86:	81 f6       	brne	.-96     	; 0x1d28 <LCD_enuDisplayIntegerNum+0x11c>
		Local_u8NumDigit --;
	}

	}

	return Local_enuErrorState;
    1d88:	8f 81       	ldd	r24, Y+7	; 0x07
}
    1d8a:	2b 96       	adiw	r28, 0x0b	; 11
    1d8c:	0f b6       	in	r0, 0x3f	; 63
    1d8e:	f8 94       	cli
    1d90:	de bf       	out	0x3e, r29	; 62
    1d92:	0f be       	out	0x3f, r0	; 63
    1d94:	cd bf       	out	0x3d, r28	; 61
    1d96:	cf 91       	pop	r28
    1d98:	df 91       	pop	r29
    1d9a:	08 95       	ret

00001d9c <LCD_vidLatch>:




static void LCD_vidLatch(u8 Copy_u8Data)
{
    1d9c:	df 93       	push	r29
    1d9e:	cf 93       	push	r28
    1da0:	cd b7       	in	r28, 0x3d	; 61
    1da2:	de b7       	in	r29, 0x3e	; 62
    1da4:	6d 97       	sbiw	r28, 0x1d	; 29
    1da6:	0f b6       	in	r0, 0x3f	; 63
    1da8:	f8 94       	cli
    1daa:	de bf       	out	0x3e, r29	; 62
    1dac:	0f be       	out	0x3f, r0	; 63
    1dae:	cd bf       	out	0x3d, r28	; 61
    1db0:	8d 8f       	std	Y+29, r24	; 0x1d
	// set rw as write operation , EN is low
	DIO_enuSetPinValue(RW_PORT , RW_PIN , DIO_u8LOW);
    1db2:	80 e0       	ldi	r24, 0x00	; 0
    1db4:	61 e0       	ldi	r22, 0x01	; 1
    1db6:	40 e0       	ldi	r20, 0x00	; 0
    1db8:	0e 94 ff 07 	call	0xffe	; 0xffe <DIO_enuSetPinValue>
	DIO_enuSetPinValue(EN_PORT , EN_PIN , DIO_u8LOW);
    1dbc:	80 e0       	ldi	r24, 0x00	; 0
    1dbe:	62 e0       	ldi	r22, 0x02	; 2
    1dc0:	40 e0       	ldi	r20, 0x00	; 0
    1dc2:	0e 94 ff 07 	call	0xffe	; 0xffe <DIO_enuSetPinValue>
	//write Data
	DIO_enuSetPinValue(D7_PORT , D7_PIN , ((Copy_u8Data>>7)&1));
    1dc6:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1dc8:	98 2f       	mov	r25, r24
    1dca:	99 1f       	adc	r25, r25
    1dcc:	99 27       	eor	r25, r25
    1dce:	99 1f       	adc	r25, r25
    1dd0:	81 e0       	ldi	r24, 0x01	; 1
    1dd2:	60 e0       	ldi	r22, 0x00	; 0
    1dd4:	49 2f       	mov	r20, r25
    1dd6:	0e 94 ff 07 	call	0xffe	; 0xffe <DIO_enuSetPinValue>
	DIO_enuSetPinValue(D6_PORT , D6_PIN , ((Copy_u8Data>>6)&1));
    1dda:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1ddc:	82 95       	swap	r24
    1dde:	86 95       	lsr	r24
    1de0:	86 95       	lsr	r24
    1de2:	83 70       	andi	r24, 0x03	; 3
    1de4:	98 2f       	mov	r25, r24
    1de6:	91 70       	andi	r25, 0x01	; 1
    1de8:	81 e0       	ldi	r24, 0x01	; 1
    1dea:	61 e0       	ldi	r22, 0x01	; 1
    1dec:	49 2f       	mov	r20, r25
    1dee:	0e 94 ff 07 	call	0xffe	; 0xffe <DIO_enuSetPinValue>
	DIO_enuSetPinValue(D5_PORT , D5_PIN , ((Copy_u8Data>>5)&1));
    1df2:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1df4:	82 95       	swap	r24
    1df6:	86 95       	lsr	r24
    1df8:	87 70       	andi	r24, 0x07	; 7
    1dfa:	98 2f       	mov	r25, r24
    1dfc:	91 70       	andi	r25, 0x01	; 1
    1dfe:	81 e0       	ldi	r24, 0x01	; 1
    1e00:	62 e0       	ldi	r22, 0x02	; 2
    1e02:	49 2f       	mov	r20, r25
    1e04:	0e 94 ff 07 	call	0xffe	; 0xffe <DIO_enuSetPinValue>
	DIO_enuSetPinValue(D4_PORT , D4_PIN , ((Copy_u8Data>>4)&1));
    1e08:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1e0a:	82 95       	swap	r24
    1e0c:	8f 70       	andi	r24, 0x0F	; 15
    1e0e:	98 2f       	mov	r25, r24
    1e10:	91 70       	andi	r25, 0x01	; 1
    1e12:	81 e0       	ldi	r24, 0x01	; 1
    1e14:	63 e0       	ldi	r22, 0x03	; 3
    1e16:	49 2f       	mov	r20, r25
    1e18:	0e 94 ff 07 	call	0xffe	; 0xffe <DIO_enuSetPinValue>

#if LCD_MODE == EIGHT_BIT

	DIO_enuSetPinValue(D3_PORT , D3_PIN , ((Copy_u8Data>>3)&1));
    1e1c:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1e1e:	86 95       	lsr	r24
    1e20:	86 95       	lsr	r24
    1e22:	86 95       	lsr	r24
    1e24:	98 2f       	mov	r25, r24
    1e26:	91 70       	andi	r25, 0x01	; 1
    1e28:	81 e0       	ldi	r24, 0x01	; 1
    1e2a:	64 e0       	ldi	r22, 0x04	; 4
    1e2c:	49 2f       	mov	r20, r25
    1e2e:	0e 94 ff 07 	call	0xffe	; 0xffe <DIO_enuSetPinValue>
	DIO_enuSetPinValue(D2_PORT , D2_PIN , ((Copy_u8Data>>2)&1));
    1e32:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1e34:	86 95       	lsr	r24
    1e36:	86 95       	lsr	r24
    1e38:	98 2f       	mov	r25, r24
    1e3a:	91 70       	andi	r25, 0x01	; 1
    1e3c:	81 e0       	ldi	r24, 0x01	; 1
    1e3e:	65 e0       	ldi	r22, 0x05	; 5
    1e40:	49 2f       	mov	r20, r25
    1e42:	0e 94 ff 07 	call	0xffe	; 0xffe <DIO_enuSetPinValue>
	DIO_enuSetPinValue(D1_PORT , D1_PIN , ((Copy_u8Data>>1)&1));
    1e46:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1e48:	86 95       	lsr	r24
    1e4a:	98 2f       	mov	r25, r24
    1e4c:	91 70       	andi	r25, 0x01	; 1
    1e4e:	81 e0       	ldi	r24, 0x01	; 1
    1e50:	66 e0       	ldi	r22, 0x06	; 6
    1e52:	49 2f       	mov	r20, r25
    1e54:	0e 94 ff 07 	call	0xffe	; 0xffe <DIO_enuSetPinValue>
	DIO_enuSetPinValue(D0_PORT , D0_PIN , ((Copy_u8Data>>0)&1));
    1e58:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1e5a:	98 2f       	mov	r25, r24
    1e5c:	91 70       	andi	r25, 0x01	; 1
    1e5e:	81 e0       	ldi	r24, 0x01	; 1
    1e60:	67 e0       	ldi	r22, 0x07	; 7
    1e62:	49 2f       	mov	r20, r25
    1e64:	0e 94 ff 07 	call	0xffe	; 0xffe <DIO_enuSetPinValue>
	DIO_enuSetPinValue(D5_PORT , D5_PIN , ((Copy_u8Data>>1)&1));
	DIO_enuSetPinValue(D4_PORT , D4_PIN , ((Copy_u8Data>>0)&1));
#endif

	// Enable latch
	DIO_enuSetPinValue(EN_PORT , EN_PIN , DIO_u8HIGH);
    1e68:	80 e0       	ldi	r24, 0x00	; 0
    1e6a:	62 e0       	ldi	r22, 0x02	; 2
    1e6c:	41 e0       	ldi	r20, 0x01	; 1
    1e6e:	0e 94 ff 07 	call	0xffe	; 0xffe <DIO_enuSetPinValue>
    1e72:	80 e0       	ldi	r24, 0x00	; 0
    1e74:	90 e0       	ldi	r25, 0x00	; 0
    1e76:	a0 e2       	ldi	r26, 0x20	; 32
    1e78:	b1 e4       	ldi	r27, 0x41	; 65
    1e7a:	89 8f       	std	Y+25, r24	; 0x19
    1e7c:	9a 8f       	std	Y+26, r25	; 0x1a
    1e7e:	ab 8f       	std	Y+27, r26	; 0x1b
    1e80:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1e82:	69 8d       	ldd	r22, Y+25	; 0x19
    1e84:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1e86:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1e88:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1e8a:	20 e0       	ldi	r18, 0x00	; 0
    1e8c:	30 e0       	ldi	r19, 0x00	; 0
    1e8e:	4a e7       	ldi	r20, 0x7A	; 122
    1e90:	53 e4       	ldi	r21, 0x43	; 67
    1e92:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1e96:	dc 01       	movw	r26, r24
    1e98:	cb 01       	movw	r24, r22
    1e9a:	8d 8b       	std	Y+21, r24	; 0x15
    1e9c:	9e 8b       	std	Y+22, r25	; 0x16
    1e9e:	af 8b       	std	Y+23, r26	; 0x17
    1ea0:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1ea2:	6d 89       	ldd	r22, Y+21	; 0x15
    1ea4:	7e 89       	ldd	r23, Y+22	; 0x16
    1ea6:	8f 89       	ldd	r24, Y+23	; 0x17
    1ea8:	98 8d       	ldd	r25, Y+24	; 0x18
    1eaa:	20 e0       	ldi	r18, 0x00	; 0
    1eac:	30 e0       	ldi	r19, 0x00	; 0
    1eae:	40 e8       	ldi	r20, 0x80	; 128
    1eb0:	5f e3       	ldi	r21, 0x3F	; 63
    1eb2:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1eb6:	88 23       	and	r24, r24
    1eb8:	2c f4       	brge	.+10     	; 0x1ec4 <LCD_vidLatch+0x128>
		__ticks = 1;
    1eba:	81 e0       	ldi	r24, 0x01	; 1
    1ebc:	90 e0       	ldi	r25, 0x00	; 0
    1ebe:	9c 8b       	std	Y+20, r25	; 0x14
    1ec0:	8b 8b       	std	Y+19, r24	; 0x13
    1ec2:	3f c0       	rjmp	.+126    	; 0x1f42 <LCD_vidLatch+0x1a6>
	else if (__tmp > 65535)
    1ec4:	6d 89       	ldd	r22, Y+21	; 0x15
    1ec6:	7e 89       	ldd	r23, Y+22	; 0x16
    1ec8:	8f 89       	ldd	r24, Y+23	; 0x17
    1eca:	98 8d       	ldd	r25, Y+24	; 0x18
    1ecc:	20 e0       	ldi	r18, 0x00	; 0
    1ece:	3f ef       	ldi	r19, 0xFF	; 255
    1ed0:	4f e7       	ldi	r20, 0x7F	; 127
    1ed2:	57 e4       	ldi	r21, 0x47	; 71
    1ed4:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1ed8:	18 16       	cp	r1, r24
    1eda:	4c f5       	brge	.+82     	; 0x1f2e <LCD_vidLatch+0x192>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1edc:	69 8d       	ldd	r22, Y+25	; 0x19
    1ede:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1ee0:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1ee2:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1ee4:	20 e0       	ldi	r18, 0x00	; 0
    1ee6:	30 e0       	ldi	r19, 0x00	; 0
    1ee8:	40 e2       	ldi	r20, 0x20	; 32
    1eea:	51 e4       	ldi	r21, 0x41	; 65
    1eec:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1ef0:	dc 01       	movw	r26, r24
    1ef2:	cb 01       	movw	r24, r22
    1ef4:	bc 01       	movw	r22, r24
    1ef6:	cd 01       	movw	r24, r26
    1ef8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1efc:	dc 01       	movw	r26, r24
    1efe:	cb 01       	movw	r24, r22
    1f00:	9c 8b       	std	Y+20, r25	; 0x14
    1f02:	8b 8b       	std	Y+19, r24	; 0x13
    1f04:	0f c0       	rjmp	.+30     	; 0x1f24 <LCD_vidLatch+0x188>
    1f06:	89 e1       	ldi	r24, 0x19	; 25
    1f08:	90 e0       	ldi	r25, 0x00	; 0
    1f0a:	9a 8b       	std	Y+18, r25	; 0x12
    1f0c:	89 8b       	std	Y+17, r24	; 0x11
    1f0e:	89 89       	ldd	r24, Y+17	; 0x11
    1f10:	9a 89       	ldd	r25, Y+18	; 0x12
    1f12:	01 97       	sbiw	r24, 0x01	; 1
    1f14:	f1 f7       	brne	.-4      	; 0x1f12 <LCD_vidLatch+0x176>
    1f16:	9a 8b       	std	Y+18, r25	; 0x12
    1f18:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1f1a:	8b 89       	ldd	r24, Y+19	; 0x13
    1f1c:	9c 89       	ldd	r25, Y+20	; 0x14
    1f1e:	01 97       	sbiw	r24, 0x01	; 1
    1f20:	9c 8b       	std	Y+20, r25	; 0x14
    1f22:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1f24:	8b 89       	ldd	r24, Y+19	; 0x13
    1f26:	9c 89       	ldd	r25, Y+20	; 0x14
    1f28:	00 97       	sbiw	r24, 0x00	; 0
    1f2a:	69 f7       	brne	.-38     	; 0x1f06 <LCD_vidLatch+0x16a>
    1f2c:	14 c0       	rjmp	.+40     	; 0x1f56 <LCD_vidLatch+0x1ba>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1f2e:	6d 89       	ldd	r22, Y+21	; 0x15
    1f30:	7e 89       	ldd	r23, Y+22	; 0x16
    1f32:	8f 89       	ldd	r24, Y+23	; 0x17
    1f34:	98 8d       	ldd	r25, Y+24	; 0x18
    1f36:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1f3a:	dc 01       	movw	r26, r24
    1f3c:	cb 01       	movw	r24, r22
    1f3e:	9c 8b       	std	Y+20, r25	; 0x14
    1f40:	8b 8b       	std	Y+19, r24	; 0x13
    1f42:	8b 89       	ldd	r24, Y+19	; 0x13
    1f44:	9c 89       	ldd	r25, Y+20	; 0x14
    1f46:	98 8b       	std	Y+16, r25	; 0x10
    1f48:	8f 87       	std	Y+15, r24	; 0x0f
    1f4a:	8f 85       	ldd	r24, Y+15	; 0x0f
    1f4c:	98 89       	ldd	r25, Y+16	; 0x10
    1f4e:	01 97       	sbiw	r24, 0x01	; 1
    1f50:	f1 f7       	brne	.-4      	; 0x1f4e <LCD_vidLatch+0x1b2>
    1f52:	98 8b       	std	Y+16, r25	; 0x10
    1f54:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(10);
	DIO_enuSetPinValue(EN_PORT , EN_PIN , DIO_u8LOW);
    1f56:	80 e0       	ldi	r24, 0x00	; 0
    1f58:	62 e0       	ldi	r22, 0x02	; 2
    1f5a:	40 e0       	ldi	r20, 0x00	; 0
    1f5c:	0e 94 ff 07 	call	0xffe	; 0xffe <DIO_enuSetPinValue>
    1f60:	80 e0       	ldi	r24, 0x00	; 0
    1f62:	90 e0       	ldi	r25, 0x00	; 0
    1f64:	a0 e2       	ldi	r26, 0x20	; 32
    1f66:	b1 e4       	ldi	r27, 0x41	; 65
    1f68:	8b 87       	std	Y+11, r24	; 0x0b
    1f6a:	9c 87       	std	Y+12, r25	; 0x0c
    1f6c:	ad 87       	std	Y+13, r26	; 0x0d
    1f6e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1f70:	6b 85       	ldd	r22, Y+11	; 0x0b
    1f72:	7c 85       	ldd	r23, Y+12	; 0x0c
    1f74:	8d 85       	ldd	r24, Y+13	; 0x0d
    1f76:	9e 85       	ldd	r25, Y+14	; 0x0e
    1f78:	20 e0       	ldi	r18, 0x00	; 0
    1f7a:	30 e0       	ldi	r19, 0x00	; 0
    1f7c:	4a e7       	ldi	r20, 0x7A	; 122
    1f7e:	53 e4       	ldi	r21, 0x43	; 67
    1f80:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1f84:	dc 01       	movw	r26, r24
    1f86:	cb 01       	movw	r24, r22
    1f88:	8f 83       	std	Y+7, r24	; 0x07
    1f8a:	98 87       	std	Y+8, r25	; 0x08
    1f8c:	a9 87       	std	Y+9, r26	; 0x09
    1f8e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1f90:	6f 81       	ldd	r22, Y+7	; 0x07
    1f92:	78 85       	ldd	r23, Y+8	; 0x08
    1f94:	89 85       	ldd	r24, Y+9	; 0x09
    1f96:	9a 85       	ldd	r25, Y+10	; 0x0a
    1f98:	20 e0       	ldi	r18, 0x00	; 0
    1f9a:	30 e0       	ldi	r19, 0x00	; 0
    1f9c:	40 e8       	ldi	r20, 0x80	; 128
    1f9e:	5f e3       	ldi	r21, 0x3F	; 63
    1fa0:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1fa4:	88 23       	and	r24, r24
    1fa6:	2c f4       	brge	.+10     	; 0x1fb2 <LCD_vidLatch+0x216>
		__ticks = 1;
    1fa8:	81 e0       	ldi	r24, 0x01	; 1
    1faa:	90 e0       	ldi	r25, 0x00	; 0
    1fac:	9e 83       	std	Y+6, r25	; 0x06
    1fae:	8d 83       	std	Y+5, r24	; 0x05
    1fb0:	3f c0       	rjmp	.+126    	; 0x2030 <LCD_vidLatch+0x294>
	else if (__tmp > 65535)
    1fb2:	6f 81       	ldd	r22, Y+7	; 0x07
    1fb4:	78 85       	ldd	r23, Y+8	; 0x08
    1fb6:	89 85       	ldd	r24, Y+9	; 0x09
    1fb8:	9a 85       	ldd	r25, Y+10	; 0x0a
    1fba:	20 e0       	ldi	r18, 0x00	; 0
    1fbc:	3f ef       	ldi	r19, 0xFF	; 255
    1fbe:	4f e7       	ldi	r20, 0x7F	; 127
    1fc0:	57 e4       	ldi	r21, 0x47	; 71
    1fc2:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1fc6:	18 16       	cp	r1, r24
    1fc8:	4c f5       	brge	.+82     	; 0x201c <LCD_vidLatch+0x280>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1fca:	6b 85       	ldd	r22, Y+11	; 0x0b
    1fcc:	7c 85       	ldd	r23, Y+12	; 0x0c
    1fce:	8d 85       	ldd	r24, Y+13	; 0x0d
    1fd0:	9e 85       	ldd	r25, Y+14	; 0x0e
    1fd2:	20 e0       	ldi	r18, 0x00	; 0
    1fd4:	30 e0       	ldi	r19, 0x00	; 0
    1fd6:	40 e2       	ldi	r20, 0x20	; 32
    1fd8:	51 e4       	ldi	r21, 0x41	; 65
    1fda:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1fde:	dc 01       	movw	r26, r24
    1fe0:	cb 01       	movw	r24, r22
    1fe2:	bc 01       	movw	r22, r24
    1fe4:	cd 01       	movw	r24, r26
    1fe6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1fea:	dc 01       	movw	r26, r24
    1fec:	cb 01       	movw	r24, r22
    1fee:	9e 83       	std	Y+6, r25	; 0x06
    1ff0:	8d 83       	std	Y+5, r24	; 0x05
    1ff2:	0f c0       	rjmp	.+30     	; 0x2012 <LCD_vidLatch+0x276>
    1ff4:	89 e1       	ldi	r24, 0x19	; 25
    1ff6:	90 e0       	ldi	r25, 0x00	; 0
    1ff8:	9c 83       	std	Y+4, r25	; 0x04
    1ffa:	8b 83       	std	Y+3, r24	; 0x03
    1ffc:	8b 81       	ldd	r24, Y+3	; 0x03
    1ffe:	9c 81       	ldd	r25, Y+4	; 0x04
    2000:	01 97       	sbiw	r24, 0x01	; 1
    2002:	f1 f7       	brne	.-4      	; 0x2000 <LCD_vidLatch+0x264>
    2004:	9c 83       	std	Y+4, r25	; 0x04
    2006:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2008:	8d 81       	ldd	r24, Y+5	; 0x05
    200a:	9e 81       	ldd	r25, Y+6	; 0x06
    200c:	01 97       	sbiw	r24, 0x01	; 1
    200e:	9e 83       	std	Y+6, r25	; 0x06
    2010:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2012:	8d 81       	ldd	r24, Y+5	; 0x05
    2014:	9e 81       	ldd	r25, Y+6	; 0x06
    2016:	00 97       	sbiw	r24, 0x00	; 0
    2018:	69 f7       	brne	.-38     	; 0x1ff4 <LCD_vidLatch+0x258>
    201a:	14 c0       	rjmp	.+40     	; 0x2044 <LCD_vidLatch+0x2a8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    201c:	6f 81       	ldd	r22, Y+7	; 0x07
    201e:	78 85       	ldd	r23, Y+8	; 0x08
    2020:	89 85       	ldd	r24, Y+9	; 0x09
    2022:	9a 85       	ldd	r25, Y+10	; 0x0a
    2024:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2028:	dc 01       	movw	r26, r24
    202a:	cb 01       	movw	r24, r22
    202c:	9e 83       	std	Y+6, r25	; 0x06
    202e:	8d 83       	std	Y+5, r24	; 0x05
    2030:	8d 81       	ldd	r24, Y+5	; 0x05
    2032:	9e 81       	ldd	r25, Y+6	; 0x06
    2034:	9a 83       	std	Y+2, r25	; 0x02
    2036:	89 83       	std	Y+1, r24	; 0x01
    2038:	89 81       	ldd	r24, Y+1	; 0x01
    203a:	9a 81       	ldd	r25, Y+2	; 0x02
    203c:	01 97       	sbiw	r24, 0x01	; 1
    203e:	f1 f7       	brne	.-4      	; 0x203c <LCD_vidLatch+0x2a0>
    2040:	9a 83       	std	Y+2, r25	; 0x02
    2042:	89 83       	std	Y+1, r24	; 0x01


	_delay_ms(10);
}
    2044:	6d 96       	adiw	r28, 0x1d	; 29
    2046:	0f b6       	in	r0, 0x3f	; 63
    2048:	f8 94       	cli
    204a:	de bf       	out	0x3e, r29	; 62
    204c:	0f be       	out	0x3f, r0	; 63
    204e:	cd bf       	out	0x3d, r28	; 61
    2050:	cf 91       	pop	r28
    2052:	df 91       	pop	r29
    2054:	08 95       	ret

00002056 <LCD_invidSendCommend>:


static inline void LCD_invidSendCommend(u8 Copy_u8Command)
{
    2056:	df 93       	push	r29
    2058:	cf 93       	push	r28
    205a:	cd b7       	in	r28, 0x3d	; 61
    205c:	de b7       	in	r29, 0x3e	; 62
    205e:	2f 97       	sbiw	r28, 0x0f	; 15
    2060:	0f b6       	in	r0, 0x3f	; 63
    2062:	f8 94       	cli
    2064:	de bf       	out	0x3e, r29	; 62
    2066:	0f be       	out	0x3f, r0	; 63
    2068:	cd bf       	out	0x3d, r28	; 61
    206a:	8f 87       	std	Y+15, r24	; 0x0f
	// set rs as command
	DIO_enuSetPinValue(RS_PORT , RS_PIN , DIO_u8LOW);
    206c:	80 e0       	ldi	r24, 0x00	; 0
    206e:	60 e0       	ldi	r22, 0x00	; 0
    2070:	40 e0       	ldi	r20, 0x00	; 0
    2072:	0e 94 ff 07 	call	0xffe	; 0xffe <DIO_enuSetPinValue>
	// set rw as write operation , EN is low
	DIO_enuSetPinValue(RW_PORT , RW_PIN , DIO_u8LOW);
    2076:	80 e0       	ldi	r24, 0x00	; 0
    2078:	61 e0       	ldi	r22, 0x01	; 1
    207a:	40 e0       	ldi	r20, 0x00	; 0
    207c:	0e 94 ff 07 	call	0xffe	; 0xffe <DIO_enuSetPinValue>
	DIO_enuSetPinValue(EN_PORT , EN_PIN , DIO_u8LOW);
    2080:	80 e0       	ldi	r24, 0x00	; 0
    2082:	62 e0       	ldi	r22, 0x02	; 2
    2084:	40 e0       	ldi	r20, 0x00	; 0
    2086:	0e 94 ff 07 	call	0xffe	; 0xffe <DIO_enuSetPinValue>
	//write Data
	DIO_enuSetPinValue(D7_PORT , D7_PIN , ((Copy_u8Command>>7)&1));
    208a:	8f 85       	ldd	r24, Y+15	; 0x0f
    208c:	98 2f       	mov	r25, r24
    208e:	99 1f       	adc	r25, r25
    2090:	99 27       	eor	r25, r25
    2092:	99 1f       	adc	r25, r25
    2094:	81 e0       	ldi	r24, 0x01	; 1
    2096:	60 e0       	ldi	r22, 0x00	; 0
    2098:	49 2f       	mov	r20, r25
    209a:	0e 94 ff 07 	call	0xffe	; 0xffe <DIO_enuSetPinValue>
	DIO_enuSetPinValue(D6_PORT , D6_PIN , ((Copy_u8Command>>6)&1));
    209e:	8f 85       	ldd	r24, Y+15	; 0x0f
    20a0:	82 95       	swap	r24
    20a2:	86 95       	lsr	r24
    20a4:	86 95       	lsr	r24
    20a6:	83 70       	andi	r24, 0x03	; 3
    20a8:	98 2f       	mov	r25, r24
    20aa:	91 70       	andi	r25, 0x01	; 1
    20ac:	81 e0       	ldi	r24, 0x01	; 1
    20ae:	61 e0       	ldi	r22, 0x01	; 1
    20b0:	49 2f       	mov	r20, r25
    20b2:	0e 94 ff 07 	call	0xffe	; 0xffe <DIO_enuSetPinValue>
	DIO_enuSetPinValue(D5_PORT , D5_PIN , ((Copy_u8Command>>5)&1));
    20b6:	8f 85       	ldd	r24, Y+15	; 0x0f
    20b8:	82 95       	swap	r24
    20ba:	86 95       	lsr	r24
    20bc:	87 70       	andi	r24, 0x07	; 7
    20be:	98 2f       	mov	r25, r24
    20c0:	91 70       	andi	r25, 0x01	; 1
    20c2:	81 e0       	ldi	r24, 0x01	; 1
    20c4:	62 e0       	ldi	r22, 0x02	; 2
    20c6:	49 2f       	mov	r20, r25
    20c8:	0e 94 ff 07 	call	0xffe	; 0xffe <DIO_enuSetPinValue>
	DIO_enuSetPinValue(D4_PORT , D4_PIN , ((Copy_u8Command>>4)&1));
    20cc:	8f 85       	ldd	r24, Y+15	; 0x0f
    20ce:	82 95       	swap	r24
    20d0:	8f 70       	andi	r24, 0x0F	; 15
    20d2:	98 2f       	mov	r25, r24
    20d4:	91 70       	andi	r25, 0x01	; 1
    20d6:	81 e0       	ldi	r24, 0x01	; 1
    20d8:	63 e0       	ldi	r22, 0x03	; 3
    20da:	49 2f       	mov	r20, r25
    20dc:	0e 94 ff 07 	call	0xffe	; 0xffe <DIO_enuSetPinValue>
#if LCD_MODE == EIGHT_BIT
	DIO_enuSetPinValue(D3_PORT , D3_PIN , ((Copy_u8Command>>3)&1));
    20e0:	8f 85       	ldd	r24, Y+15	; 0x0f
    20e2:	86 95       	lsr	r24
    20e4:	86 95       	lsr	r24
    20e6:	86 95       	lsr	r24
    20e8:	98 2f       	mov	r25, r24
    20ea:	91 70       	andi	r25, 0x01	; 1
    20ec:	81 e0       	ldi	r24, 0x01	; 1
    20ee:	64 e0       	ldi	r22, 0x04	; 4
    20f0:	49 2f       	mov	r20, r25
    20f2:	0e 94 ff 07 	call	0xffe	; 0xffe <DIO_enuSetPinValue>
	DIO_enuSetPinValue(D2_PORT , D2_PIN , ((Copy_u8Command>>2)&1));
    20f6:	8f 85       	ldd	r24, Y+15	; 0x0f
    20f8:	86 95       	lsr	r24
    20fa:	86 95       	lsr	r24
    20fc:	98 2f       	mov	r25, r24
    20fe:	91 70       	andi	r25, 0x01	; 1
    2100:	81 e0       	ldi	r24, 0x01	; 1
    2102:	65 e0       	ldi	r22, 0x05	; 5
    2104:	49 2f       	mov	r20, r25
    2106:	0e 94 ff 07 	call	0xffe	; 0xffe <DIO_enuSetPinValue>
	DIO_enuSetPinValue(D1_PORT , D1_PIN , ((Copy_u8Command>>1)&1));
    210a:	8f 85       	ldd	r24, Y+15	; 0x0f
    210c:	86 95       	lsr	r24
    210e:	98 2f       	mov	r25, r24
    2110:	91 70       	andi	r25, 0x01	; 1
    2112:	81 e0       	ldi	r24, 0x01	; 1
    2114:	66 e0       	ldi	r22, 0x06	; 6
    2116:	49 2f       	mov	r20, r25
    2118:	0e 94 ff 07 	call	0xffe	; 0xffe <DIO_enuSetPinValue>
	DIO_enuSetPinValue(D0_PORT , D0_PIN , ((Copy_u8Command>>0)&1));
    211c:	8f 85       	ldd	r24, Y+15	; 0x0f
    211e:	98 2f       	mov	r25, r24
    2120:	91 70       	andi	r25, 0x01	; 1
    2122:	81 e0       	ldi	r24, 0x01	; 1
    2124:	67 e0       	ldi	r22, 0x07	; 7
    2126:	49 2f       	mov	r20, r25
    2128:	0e 94 ff 07 	call	0xffe	; 0xffe <DIO_enuSetPinValue>
	DIO_enuSetPinValue(D6_PORT , D6_PIN , ((Copy_u8Command>>2)&1));
	DIO_enuSetPinValue(D5_PORT , D5_PIN , ((Copy_u8Command>>1)&1));
	DIO_enuSetPinValue(D4_PORT , D4_PIN , ((Copy_u8Command>>0)&1));

#endif
	DIO_enuSetPinValue(EN_PORT , EN_PIN , DIO_u8HIGH);
    212c:	80 e0       	ldi	r24, 0x00	; 0
    212e:	62 e0       	ldi	r22, 0x02	; 2
    2130:	41 e0       	ldi	r20, 0x01	; 1
    2132:	0e 94 ff 07 	call	0xffe	; 0xffe <DIO_enuSetPinValue>
    2136:	80 e0       	ldi	r24, 0x00	; 0
    2138:	90 e0       	ldi	r25, 0x00	; 0
    213a:	a0 e2       	ldi	r26, 0x20	; 32
    213c:	b1 e4       	ldi	r27, 0x41	; 65
    213e:	8b 87       	std	Y+11, r24	; 0x0b
    2140:	9c 87       	std	Y+12, r25	; 0x0c
    2142:	ad 87       	std	Y+13, r26	; 0x0d
    2144:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2146:	6b 85       	ldd	r22, Y+11	; 0x0b
    2148:	7c 85       	ldd	r23, Y+12	; 0x0c
    214a:	8d 85       	ldd	r24, Y+13	; 0x0d
    214c:	9e 85       	ldd	r25, Y+14	; 0x0e
    214e:	20 e0       	ldi	r18, 0x00	; 0
    2150:	30 e0       	ldi	r19, 0x00	; 0
    2152:	4a e7       	ldi	r20, 0x7A	; 122
    2154:	53 e4       	ldi	r21, 0x43	; 67
    2156:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    215a:	dc 01       	movw	r26, r24
    215c:	cb 01       	movw	r24, r22
    215e:	8f 83       	std	Y+7, r24	; 0x07
    2160:	98 87       	std	Y+8, r25	; 0x08
    2162:	a9 87       	std	Y+9, r26	; 0x09
    2164:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2166:	6f 81       	ldd	r22, Y+7	; 0x07
    2168:	78 85       	ldd	r23, Y+8	; 0x08
    216a:	89 85       	ldd	r24, Y+9	; 0x09
    216c:	9a 85       	ldd	r25, Y+10	; 0x0a
    216e:	20 e0       	ldi	r18, 0x00	; 0
    2170:	30 e0       	ldi	r19, 0x00	; 0
    2172:	40 e8       	ldi	r20, 0x80	; 128
    2174:	5f e3       	ldi	r21, 0x3F	; 63
    2176:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    217a:	88 23       	and	r24, r24
    217c:	2c f4       	brge	.+10     	; 0x2188 <LCD_invidSendCommend+0x132>
		__ticks = 1;
    217e:	81 e0       	ldi	r24, 0x01	; 1
    2180:	90 e0       	ldi	r25, 0x00	; 0
    2182:	9e 83       	std	Y+6, r25	; 0x06
    2184:	8d 83       	std	Y+5, r24	; 0x05
    2186:	3f c0       	rjmp	.+126    	; 0x2206 <LCD_invidSendCommend+0x1b0>
	else if (__tmp > 65535)
    2188:	6f 81       	ldd	r22, Y+7	; 0x07
    218a:	78 85       	ldd	r23, Y+8	; 0x08
    218c:	89 85       	ldd	r24, Y+9	; 0x09
    218e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2190:	20 e0       	ldi	r18, 0x00	; 0
    2192:	3f ef       	ldi	r19, 0xFF	; 255
    2194:	4f e7       	ldi	r20, 0x7F	; 127
    2196:	57 e4       	ldi	r21, 0x47	; 71
    2198:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    219c:	18 16       	cp	r1, r24
    219e:	4c f5       	brge	.+82     	; 0x21f2 <LCD_invidSendCommend+0x19c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    21a0:	6b 85       	ldd	r22, Y+11	; 0x0b
    21a2:	7c 85       	ldd	r23, Y+12	; 0x0c
    21a4:	8d 85       	ldd	r24, Y+13	; 0x0d
    21a6:	9e 85       	ldd	r25, Y+14	; 0x0e
    21a8:	20 e0       	ldi	r18, 0x00	; 0
    21aa:	30 e0       	ldi	r19, 0x00	; 0
    21ac:	40 e2       	ldi	r20, 0x20	; 32
    21ae:	51 e4       	ldi	r21, 0x41	; 65
    21b0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    21b4:	dc 01       	movw	r26, r24
    21b6:	cb 01       	movw	r24, r22
    21b8:	bc 01       	movw	r22, r24
    21ba:	cd 01       	movw	r24, r26
    21bc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    21c0:	dc 01       	movw	r26, r24
    21c2:	cb 01       	movw	r24, r22
    21c4:	9e 83       	std	Y+6, r25	; 0x06
    21c6:	8d 83       	std	Y+5, r24	; 0x05
    21c8:	0f c0       	rjmp	.+30     	; 0x21e8 <LCD_invidSendCommend+0x192>
    21ca:	89 e1       	ldi	r24, 0x19	; 25
    21cc:	90 e0       	ldi	r25, 0x00	; 0
    21ce:	9c 83       	std	Y+4, r25	; 0x04
    21d0:	8b 83       	std	Y+3, r24	; 0x03
    21d2:	8b 81       	ldd	r24, Y+3	; 0x03
    21d4:	9c 81       	ldd	r25, Y+4	; 0x04
    21d6:	01 97       	sbiw	r24, 0x01	; 1
    21d8:	f1 f7       	brne	.-4      	; 0x21d6 <LCD_invidSendCommend+0x180>
    21da:	9c 83       	std	Y+4, r25	; 0x04
    21dc:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    21de:	8d 81       	ldd	r24, Y+5	; 0x05
    21e0:	9e 81       	ldd	r25, Y+6	; 0x06
    21e2:	01 97       	sbiw	r24, 0x01	; 1
    21e4:	9e 83       	std	Y+6, r25	; 0x06
    21e6:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    21e8:	8d 81       	ldd	r24, Y+5	; 0x05
    21ea:	9e 81       	ldd	r25, Y+6	; 0x06
    21ec:	00 97       	sbiw	r24, 0x00	; 0
    21ee:	69 f7       	brne	.-38     	; 0x21ca <LCD_invidSendCommend+0x174>
    21f0:	14 c0       	rjmp	.+40     	; 0x221a <LCD_invidSendCommend+0x1c4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    21f2:	6f 81       	ldd	r22, Y+7	; 0x07
    21f4:	78 85       	ldd	r23, Y+8	; 0x08
    21f6:	89 85       	ldd	r24, Y+9	; 0x09
    21f8:	9a 85       	ldd	r25, Y+10	; 0x0a
    21fa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    21fe:	dc 01       	movw	r26, r24
    2200:	cb 01       	movw	r24, r22
    2202:	9e 83       	std	Y+6, r25	; 0x06
    2204:	8d 83       	std	Y+5, r24	; 0x05
    2206:	8d 81       	ldd	r24, Y+5	; 0x05
    2208:	9e 81       	ldd	r25, Y+6	; 0x06
    220a:	9a 83       	std	Y+2, r25	; 0x02
    220c:	89 83       	std	Y+1, r24	; 0x01
    220e:	89 81       	ldd	r24, Y+1	; 0x01
    2210:	9a 81       	ldd	r25, Y+2	; 0x02
    2212:	01 97       	sbiw	r24, 0x01	; 1
    2214:	f1 f7       	brne	.-4      	; 0x2212 <LCD_invidSendCommend+0x1bc>
    2216:	9a 83       	std	Y+2, r25	; 0x02
    2218:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(10);
	DIO_enuSetPinValue(EN_PORT , EN_PIN , DIO_u8LOW);
    221a:	80 e0       	ldi	r24, 0x00	; 0
    221c:	62 e0       	ldi	r22, 0x02	; 2
    221e:	40 e0       	ldi	r20, 0x00	; 0
    2220:	0e 94 ff 07 	call	0xffe	; 0xffe <DIO_enuSetPinValue>
}
    2224:	2f 96       	adiw	r28, 0x0f	; 15
    2226:	0f b6       	in	r0, 0x3f	; 63
    2228:	f8 94       	cli
    222a:	de bf       	out	0x3e, r29	; 62
    222c:	0f be       	out	0x3f, r0	; 63
    222e:	cd bf       	out	0x3d, r28	; 61
    2230:	cf 91       	pop	r28
    2232:	df 91       	pop	r29
    2234:	08 95       	ret

00002236 <LCD_enuDisplayString>:

ES_t LCD_enuDisplayString(u8 Copy_au8Data[])
{
    2236:	df 93       	push	r29
    2238:	cf 93       	push	r28
    223a:	00 d0       	rcall	.+0      	; 0x223c <LCD_enuDisplayString+0x6>
    223c:	00 d0       	rcall	.+0      	; 0x223e <LCD_enuDisplayString+0x8>
    223e:	cd b7       	in	r28, 0x3d	; 61
    2240:	de b7       	in	r29, 0x3e	; 62
    2242:	9c 83       	std	Y+4, r25	; 0x04
    2244:	8b 83       	std	Y+3, r24	; 0x03
	ES_t Local_enuErrorState = ES_NOK;
    2246:	1a 82       	std	Y+2, r1	; 0x02

		DIO_enuSetPinValue(RS_PORT , RS_PIN , DIO_u8HIGH);
    2248:	80 e0       	ldi	r24, 0x00	; 0
    224a:	60 e0       	ldi	r22, 0x00	; 0
    224c:	41 e0       	ldi	r20, 0x01	; 1
    224e:	0e 94 ff 07 	call	0xffe	; 0xffe <DIO_enuSetPinValue>
		for(u8 i=0;Copy_au8Data[i] != '\0';i++)
    2252:	19 82       	std	Y+1, r1	; 0x01
    2254:	0e c0       	rjmp	.+28     	; 0x2272 <LCD_enuDisplayString+0x3c>

		LCD_vidLatch(Copy_au8Data[i]);
    2256:	89 81       	ldd	r24, Y+1	; 0x01
    2258:	28 2f       	mov	r18, r24
    225a:	30 e0       	ldi	r19, 0x00	; 0
    225c:	8b 81       	ldd	r24, Y+3	; 0x03
    225e:	9c 81       	ldd	r25, Y+4	; 0x04
    2260:	fc 01       	movw	r30, r24
    2262:	e2 0f       	add	r30, r18
    2264:	f3 1f       	adc	r31, r19
    2266:	80 81       	ld	r24, Z
    2268:	0e 94 ce 0e 	call	0x1d9c	; 0x1d9c <LCD_vidLatch>
ES_t LCD_enuDisplayString(u8 Copy_au8Data[])
{
	ES_t Local_enuErrorState = ES_NOK;

		DIO_enuSetPinValue(RS_PORT , RS_PIN , DIO_u8HIGH);
		for(u8 i=0;Copy_au8Data[i] != '\0';i++)
    226c:	89 81       	ldd	r24, Y+1	; 0x01
    226e:	8f 5f       	subi	r24, 0xFF	; 255
    2270:	89 83       	std	Y+1, r24	; 0x01
    2272:	89 81       	ldd	r24, Y+1	; 0x01
    2274:	28 2f       	mov	r18, r24
    2276:	30 e0       	ldi	r19, 0x00	; 0
    2278:	8b 81       	ldd	r24, Y+3	; 0x03
    227a:	9c 81       	ldd	r25, Y+4	; 0x04
    227c:	fc 01       	movw	r30, r24
    227e:	e2 0f       	add	r30, r18
    2280:	f3 1f       	adc	r31, r19
    2282:	80 81       	ld	r24, Z
    2284:	88 23       	and	r24, r24
    2286:	39 f7       	brne	.-50     	; 0x2256 <LCD_enuDisplayString+0x20>

		LCD_vidLatch(Copy_au8Data[i]);

		return Local_enuErrorState;
    2288:	8a 81       	ldd	r24, Y+2	; 0x02

}
    228a:	0f 90       	pop	r0
    228c:	0f 90       	pop	r0
    228e:	0f 90       	pop	r0
    2290:	0f 90       	pop	r0
    2292:	cf 91       	pop	r28
    2294:	df 91       	pop	r29
    2296:	08 95       	ret

00002298 <EXINT0>:
#include "LCD_int.h"

#include "util/delay.h"

void EXINT0(void)
{
    2298:	df 93       	push	r29
    229a:	cf 93       	push	r28
    229c:	cd b7       	in	r28, 0x3d	; 61
    229e:	de b7       	in	r29, 0x3e	; 62
	DIO_enuSetPinValue(DIO_u8PORTD,DIO_u8PIN7, DIO_u8LOW);
    22a0:	83 e0       	ldi	r24, 0x03	; 3
    22a2:	67 e0       	ldi	r22, 0x07	; 7
    22a4:	40 e0       	ldi	r20, 0x00	; 0
    22a6:	0e 94 ff 07 	call	0xffe	; 0xffe <DIO_enuSetPinValue>
							//_delay_ms(1000);
							LCD_enuDisplayChar('a');
    22aa:	81 e6       	ldi	r24, 0x61	; 97
    22ac:	0e 94 dc 0d 	call	0x1bb8	; 0x1bb8 <LCD_enuDisplayChar>
}
    22b0:	cf 91       	pop	r28
    22b2:	df 91       	pop	r29
    22b4:	08 95       	ret

000022b6 <main>:

int main(void)
{
    22b6:	df 93       	push	r29
    22b8:	cf 93       	push	r28
    22ba:	0f 92       	push	r0
    22bc:	cd b7       	in	r28, 0x3d	; 61
    22be:	de b7       	in	r29, 0x3e	; 62
	DIO_enuInit();
    22c0:	0e 94 a3 05 	call	0xb46	; 0xb46 <DIO_enuInit>
	EXINT_Init();
    22c4:	0e 94 17 0a 	call	0x142e	; 0x142e <EXINT_Init>
	LCD_enuInit();
    22c8:	0e 94 bc 0b 	call	0x1778	; 0x1778 <LCD_enuInit>

	//Button
	DIO_enuSetPinDirection(DIO_u8PORTD,DIO_u8PIN2, DIO_u8INPUT);
    22cc:	83 e0       	ldi	r24, 0x03	; 3
    22ce:	62 e0       	ldi	r22, 0x02	; 2
    22d0:	40 e0       	ldi	r20, 0x00	; 0
    22d2:	0e 94 13 07 	call	0xe26	; 0xe26 <DIO_enuSetPinDirection>
	//LED
	DIO_enuSetPinDirection(DIO_u8PORTD,DIO_u8PIN7, DIO_u8OUTPUT);
    22d6:	83 e0       	ldi	r24, 0x03	; 3
    22d8:	67 e0       	ldi	r22, 0x07	; 7
    22da:	41 e0       	ldi	r20, 0x01	; 1
    22dc:	0e 94 13 07 	call	0xe26	; 0xe26 <DIO_enuSetPinDirection>

	EXINTGLOBAL_Enable();
    22e0:	0e 94 ba 0a 	call	0x1574	; 0x1574 <EXINTGLOBAL_Enable>
	EXINT_Enable(0);
    22e4:	80 e0       	ldi	r24, 0x00	; 0
    22e6:	0e 94 5c 0a 	call	0x14b8	; 0x14b8 <EXINT_Enable>
	EXINT_Callback(EXINT0,0);
    22ea:	8c e4       	ldi	r24, 0x4C	; 76
    22ec:	91 e1       	ldi	r25, 0x11	; 17
    22ee:	60 e0       	ldi	r22, 0x00	; 0
    22f0:	0e 94 e2 0a 	call	0x15c4	; 0x15c4 <EXINT_Callback>

	u8 Switch_Read;
	while(1)
	{

				DIO_enuSetPinValue(DIO_u8PORTD,DIO_u8PIN7, DIO_u8HIGH);
    22f4:	83 e0       	ldi	r24, 0x03	; 3
    22f6:	67 e0       	ldi	r22, 0x07	; 7
    22f8:	41 e0       	ldi	r20, 0x01	; 1
    22fa:	0e 94 ff 07 	call	0xffe	; 0xffe <DIO_enuSetPinValue>

				 DIO_enuGetPinValue(DIO_u8PORTD,DIO_u8PIN2,&Switch_Read);
    22fe:	83 e0       	ldi	r24, 0x03	; 3
    2300:	62 e0       	ldi	r22, 0x02	; 2
    2302:	9e 01       	movw	r18, r28
    2304:	2f 5f       	subi	r18, 0xFF	; 255
    2306:	3f 4f       	sbci	r19, 0xFF	; 255
    2308:	a9 01       	movw	r20, r18
    230a:	0e 94 79 09 	call	0x12f2	; 0x12f2 <DIO_enuGetPinValue>
					if( Switch_Read == 0  )
    230e:	89 81       	ldd	r24, Y+1	; 0x01
    2310:	88 23       	and	r24, r24
    2312:	81 f7       	brne	.-32     	; 0x22f4 <main+0x3e>
    2314:	05 c0       	rjmp	.+10     	; 0x2320 <main+0x6a>
					{
						while( DIO_enuGetPinValue(DIO_u8PORTD,DIO_u8PIN2,&Switch_Read) && Switch_Read == 0  )
						EXINT_Callback(EXINT0,0);
    2316:	8c e4       	ldi	r24, 0x4C	; 76
    2318:	91 e1       	ldi	r25, 0x11	; 17
    231a:	60 e0       	ldi	r22, 0x00	; 0
    231c:	0e 94 e2 0a 	call	0x15c4	; 0x15c4 <EXINT_Callback>
				DIO_enuSetPinValue(DIO_u8PORTD,DIO_u8PIN7, DIO_u8HIGH);

				 DIO_enuGetPinValue(DIO_u8PORTD,DIO_u8PIN2,&Switch_Read);
					if( Switch_Read == 0  )
					{
						while( DIO_enuGetPinValue(DIO_u8PORTD,DIO_u8PIN2,&Switch_Read) && Switch_Read == 0  )
    2320:	83 e0       	ldi	r24, 0x03	; 3
    2322:	62 e0       	ldi	r22, 0x02	; 2
    2324:	9e 01       	movw	r18, r28
    2326:	2f 5f       	subi	r18, 0xFF	; 255
    2328:	3f 4f       	sbci	r19, 0xFF	; 255
    232a:	a9 01       	movw	r20, r18
    232c:	0e 94 79 09 	call	0x12f2	; 0x12f2 <DIO_enuGetPinValue>
    2330:	88 23       	and	r24, r24
    2332:	01 f3       	breq	.-64     	; 0x22f4 <main+0x3e>
    2334:	89 81       	ldd	r24, Y+1	; 0x01
    2336:	88 23       	and	r24, r24
    2338:	71 f3       	breq	.-36     	; 0x2316 <main+0x60>
    233a:	dc cf       	rjmp	.-72     	; 0x22f4 <main+0x3e>

0000233c <__mulsi3>:
    233c:	62 9f       	mul	r22, r18
    233e:	d0 01       	movw	r26, r0
    2340:	73 9f       	mul	r23, r19
    2342:	f0 01       	movw	r30, r0
    2344:	82 9f       	mul	r24, r18
    2346:	e0 0d       	add	r30, r0
    2348:	f1 1d       	adc	r31, r1
    234a:	64 9f       	mul	r22, r20
    234c:	e0 0d       	add	r30, r0
    234e:	f1 1d       	adc	r31, r1
    2350:	92 9f       	mul	r25, r18
    2352:	f0 0d       	add	r31, r0
    2354:	83 9f       	mul	r24, r19
    2356:	f0 0d       	add	r31, r0
    2358:	74 9f       	mul	r23, r20
    235a:	f0 0d       	add	r31, r0
    235c:	65 9f       	mul	r22, r21
    235e:	f0 0d       	add	r31, r0
    2360:	99 27       	eor	r25, r25
    2362:	72 9f       	mul	r23, r18
    2364:	b0 0d       	add	r27, r0
    2366:	e1 1d       	adc	r30, r1
    2368:	f9 1f       	adc	r31, r25
    236a:	63 9f       	mul	r22, r19
    236c:	b0 0d       	add	r27, r0
    236e:	e1 1d       	adc	r30, r1
    2370:	f9 1f       	adc	r31, r25
    2372:	bd 01       	movw	r22, r26
    2374:	cf 01       	movw	r24, r30
    2376:	11 24       	eor	r1, r1
    2378:	08 95       	ret

0000237a <__divmodsi4>:
    237a:	97 fb       	bst	r25, 7
    237c:	09 2e       	mov	r0, r25
    237e:	05 26       	eor	r0, r21
    2380:	0e d0       	rcall	.+28     	; 0x239e <__divmodsi4_neg1>
    2382:	57 fd       	sbrc	r21, 7
    2384:	04 d0       	rcall	.+8      	; 0x238e <__divmodsi4_neg2>
    2386:	14 d0       	rcall	.+40     	; 0x23b0 <__udivmodsi4>
    2388:	0a d0       	rcall	.+20     	; 0x239e <__divmodsi4_neg1>
    238a:	00 1c       	adc	r0, r0
    238c:	38 f4       	brcc	.+14     	; 0x239c <__divmodsi4_exit>

0000238e <__divmodsi4_neg2>:
    238e:	50 95       	com	r21
    2390:	40 95       	com	r20
    2392:	30 95       	com	r19
    2394:	21 95       	neg	r18
    2396:	3f 4f       	sbci	r19, 0xFF	; 255
    2398:	4f 4f       	sbci	r20, 0xFF	; 255
    239a:	5f 4f       	sbci	r21, 0xFF	; 255

0000239c <__divmodsi4_exit>:
    239c:	08 95       	ret

0000239e <__divmodsi4_neg1>:
    239e:	f6 f7       	brtc	.-4      	; 0x239c <__divmodsi4_exit>
    23a0:	90 95       	com	r25
    23a2:	80 95       	com	r24
    23a4:	70 95       	com	r23
    23a6:	61 95       	neg	r22
    23a8:	7f 4f       	sbci	r23, 0xFF	; 255
    23aa:	8f 4f       	sbci	r24, 0xFF	; 255
    23ac:	9f 4f       	sbci	r25, 0xFF	; 255
    23ae:	08 95       	ret

000023b0 <__udivmodsi4>:
    23b0:	a1 e2       	ldi	r26, 0x21	; 33
    23b2:	1a 2e       	mov	r1, r26
    23b4:	aa 1b       	sub	r26, r26
    23b6:	bb 1b       	sub	r27, r27
    23b8:	fd 01       	movw	r30, r26
    23ba:	0d c0       	rjmp	.+26     	; 0x23d6 <__udivmodsi4_ep>

000023bc <__udivmodsi4_loop>:
    23bc:	aa 1f       	adc	r26, r26
    23be:	bb 1f       	adc	r27, r27
    23c0:	ee 1f       	adc	r30, r30
    23c2:	ff 1f       	adc	r31, r31
    23c4:	a2 17       	cp	r26, r18
    23c6:	b3 07       	cpc	r27, r19
    23c8:	e4 07       	cpc	r30, r20
    23ca:	f5 07       	cpc	r31, r21
    23cc:	20 f0       	brcs	.+8      	; 0x23d6 <__udivmodsi4_ep>
    23ce:	a2 1b       	sub	r26, r18
    23d0:	b3 0b       	sbc	r27, r19
    23d2:	e4 0b       	sbc	r30, r20
    23d4:	f5 0b       	sbc	r31, r21

000023d6 <__udivmodsi4_ep>:
    23d6:	66 1f       	adc	r22, r22
    23d8:	77 1f       	adc	r23, r23
    23da:	88 1f       	adc	r24, r24
    23dc:	99 1f       	adc	r25, r25
    23de:	1a 94       	dec	r1
    23e0:	69 f7       	brne	.-38     	; 0x23bc <__udivmodsi4_loop>
    23e2:	60 95       	com	r22
    23e4:	70 95       	com	r23
    23e6:	80 95       	com	r24
    23e8:	90 95       	com	r25
    23ea:	9b 01       	movw	r18, r22
    23ec:	ac 01       	movw	r20, r24
    23ee:	bd 01       	movw	r22, r26
    23f0:	cf 01       	movw	r24, r30
    23f2:	08 95       	ret

000023f4 <__prologue_saves__>:
    23f4:	2f 92       	push	r2
    23f6:	3f 92       	push	r3
    23f8:	4f 92       	push	r4
    23fa:	5f 92       	push	r5
    23fc:	6f 92       	push	r6
    23fe:	7f 92       	push	r7
    2400:	8f 92       	push	r8
    2402:	9f 92       	push	r9
    2404:	af 92       	push	r10
    2406:	bf 92       	push	r11
    2408:	cf 92       	push	r12
    240a:	df 92       	push	r13
    240c:	ef 92       	push	r14
    240e:	ff 92       	push	r15
    2410:	0f 93       	push	r16
    2412:	1f 93       	push	r17
    2414:	cf 93       	push	r28
    2416:	df 93       	push	r29
    2418:	cd b7       	in	r28, 0x3d	; 61
    241a:	de b7       	in	r29, 0x3e	; 62
    241c:	ca 1b       	sub	r28, r26
    241e:	db 0b       	sbc	r29, r27
    2420:	0f b6       	in	r0, 0x3f	; 63
    2422:	f8 94       	cli
    2424:	de bf       	out	0x3e, r29	; 62
    2426:	0f be       	out	0x3f, r0	; 63
    2428:	cd bf       	out	0x3d, r28	; 61
    242a:	09 94       	ijmp

0000242c <__epilogue_restores__>:
    242c:	2a 88       	ldd	r2, Y+18	; 0x12
    242e:	39 88       	ldd	r3, Y+17	; 0x11
    2430:	48 88       	ldd	r4, Y+16	; 0x10
    2432:	5f 84       	ldd	r5, Y+15	; 0x0f
    2434:	6e 84       	ldd	r6, Y+14	; 0x0e
    2436:	7d 84       	ldd	r7, Y+13	; 0x0d
    2438:	8c 84       	ldd	r8, Y+12	; 0x0c
    243a:	9b 84       	ldd	r9, Y+11	; 0x0b
    243c:	aa 84       	ldd	r10, Y+10	; 0x0a
    243e:	b9 84       	ldd	r11, Y+9	; 0x09
    2440:	c8 84       	ldd	r12, Y+8	; 0x08
    2442:	df 80       	ldd	r13, Y+7	; 0x07
    2444:	ee 80       	ldd	r14, Y+6	; 0x06
    2446:	fd 80       	ldd	r15, Y+5	; 0x05
    2448:	0c 81       	ldd	r16, Y+4	; 0x04
    244a:	1b 81       	ldd	r17, Y+3	; 0x03
    244c:	aa 81       	ldd	r26, Y+2	; 0x02
    244e:	b9 81       	ldd	r27, Y+1	; 0x01
    2450:	ce 0f       	add	r28, r30
    2452:	d1 1d       	adc	r29, r1
    2454:	0f b6       	in	r0, 0x3f	; 63
    2456:	f8 94       	cli
    2458:	de bf       	out	0x3e, r29	; 62
    245a:	0f be       	out	0x3f, r0	; 63
    245c:	cd bf       	out	0x3d, r28	; 61
    245e:	ed 01       	movw	r28, r26
    2460:	08 95       	ret

00002462 <_exit>:
    2462:	f8 94       	cli

00002464 <__stop_program>:
    2464:	ff cf       	rjmp	.-2      	; 0x2464 <__stop_program>
